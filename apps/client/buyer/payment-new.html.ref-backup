<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Minimal Navigation System -->
  <script src="/shared/minimal-navigation-injector.js"></script>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Payment | African Deals Domain</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/shared/router.js"></script>
    <script src="/shared/mode-manager.js"></script>
<script src="/shared/navigation.js"></script>
  <link rel="icon" href="/public/images/logo.png">
  <script src="/shared/auth-helper.js"></script>
</head>
<body class="bg-gray-50 min-h-screen" data-page-type="buyer">
  
  <!-- Navigation preserved - each page has unique navigation -->

  
  <!-- Navigation preserved - each page has unique navigation -->

  
  
  
  <!-- Header Component -->
  <div id="buyer-header"></div>
  
  <script src="shared-components.js"></script>

  <main class="pt-16 pb-8">
    <div class="max-w-4xl mx-auto px-4">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Complete Payment</h1>
        <p class="text-gray-600">Choose your preferred payment method</p>
      </div>

      <!-- Order Summary -->
      <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-4">Order Summary</h2>
        <div id="order-summary">
          <!-- Order details will be loaded here -->
        </div>
      </div>

      <!-- Payment Methods -->
      <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-6">Select Payment Method</h2>
        <div id="payment-methods-container">
          <!-- Payment methods will be loaded here -->
        </div>
      </div>

      <!-- Manual Payment Fallback -->
      <div id="manual-payment-section" class="bg-white rounded-xl shadow-lg p-6 hidden">
        <h2 class="text-xl font-semibold text-gray-900 mb-6">Manual Payment</h2>
        
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
          <h3 class="font-semibold text-blue-900 mb-4">Payment Instructions</h3>
          <div class="space-y-3 text-blue-800">
            <p><strong>For Rwandan MTN MoMo senders:</strong></p>
            <p class="font-mono bg-blue-100 p-2 rounded">Dial *182*1*1*{ADD_PHONE_NUMBER}#</p>
            
            <p><strong>For MoMo Pay:</strong></p>
            <p class="font-mono bg-blue-100 p-2 rounded">Dial *182*8*1*{ADD_MOMOPAY_CODE}#</p>
            
            <p><strong>Confirm the payment name is:</strong> <span class="font-semibold">African Deals Domain</span></p>
          </div>
        </div>

        <form id="manual-payment-form" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="sender-name" class="block text-sm font-medium text-gray-700 mb-1">Sender Name *</label>
              <input type="text" id="sender-name" name="sender_name" required 
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
            <div>
              <label for="sender-phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number *</label>
              <input type="tel" id="sender-phone" name="sender_phone" required 
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
          </div>

          <div>
            <label for="transaction-id" class="block text-sm font-medium text-gray-700 mb-1">Transaction ID *</label>
            <input type="text" id="transaction-id" name="transaction_id" required 
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                   placeholder="Enter the transaction ID from your payment">
          </div>

          <div>
            <label for="payment-screenshot" class="block text-sm font-medium text-gray-700 mb-1">Payment Screenshot *</label>
            <input type="file" id="payment-screenshot" name="screenshot" accept="image/*" required 
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            <p class="text-xs text-gray-500 mt-1">Upload a screenshot of your payment confirmation (max 5MB)</p>
          </div>

          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-yellow-800">Important Notice</h3>
                <div class="mt-2 text-sm text-yellow-700">
                  <p>Your payment will be manually verified by our admin team. This process may take 1-24 hours. You will receive a confirmation email once your payment is approved.</p>
                </div>
              </div>
            </div>
          </div>

          <button type="submit" class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors font-semibold">
            Submit Payment Proof
          </button>
        </form>
      </div>

      <!-- Coming Soon Fallback -->
      <div id="coming-soon-section" class="bg-white rounded-xl shadow-lg p-8 text-center hidden">
        <div class="max-w-md mx-auto">
          <div class="mb-6">
            <svg class="mx-auto h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-900 mb-4">Payment Methods Coming Soon</h2>
          <p class="text-gray-600 mb-6">We're working hard to bring you secure and convenient payment options. In the meantime, you can use our manual payment option below.</p>
          
          <button id="show-manual-payment" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-semibold">
            Use Manual Payment
          </button>
        </div>
      </div>
    </div>
  </main>

  <!-- Loading Overlay -->
  <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen">
      <div class="bg-white rounded-lg p-6 text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p class="text-gray-600">Processing payment...</p>
      </div>
    </div>
  </div>

  <script>
    // Load header component
    fetch('/buyer/shared-components.html')
      .then(res => res.text())
      .then(html => {
        document.getElementById('buyer-header').innerHTML = html;
      });

    let currentOrder = null;
    let paymentTransaction = null;
    let availablePaymentMethods = [];

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      // Redirect mobile users to mobile-optimized page
      if (window.innerWidth < 768) {
        window.location.href = window.location.href.replace('payment-new.html', 'payment-mobile.html');
        return;
      }
      
      loadOrderDetails();
      loadPaymentMethods();
      setupEventListeners();
    });

    function setupEventListeners() {
      // Manual payment form
      document.getElementById('manual-payment-form').addEventListener('submit', handleManualPayment);
      
      // Show manual payment button
      document.getElementById('show-manual-payment').addEventListener('click', () => {
        document.getElementById('coming-soon-section').classList.add('hidden');
        document.getElementById('manual-payment-section').classList.remove('hidden');
      });
    }

    async function loadOrderDetails() {
      try {
        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('orderId');
        
        if (!orderId) {
          showNotification('No order ID provided', 'error');
          window.location.href = '/buyer/orders.html';
          return;
        }

        // Try to get order from localStorage first
        const pendingOrder = localStorage.getItem('pendingOrder');
        if (pendingOrder) {
          currentOrder = JSON.parse(pendingOrder);
          renderOrderSummary(currentOrder);
          
          // Create payment transaction
          await createPaymentTransaction(orderId);
        } else {
          // Fetch order details from API
          const data = await window.authHelper.get(`/api/orders/${orderId}`);
          currentOrder = data.order;
          renderOrderSummary(currentOrder);
          
          // Create payment transaction
          await createPaymentTransaction(orderId);
        }
      } catch (error) {
        console.error('Error loading order details:', error);
        showNotification('Failed to load order details', 'error');
      }
    }

    async function createPaymentTransaction(orderId) {
      try {
        const data = await window.authHelper.post('/api/payment-transactions', {
          order_id: orderId,
          amount: currentOrder.total_amount,
          currency: currentOrder.currency || 'USD'
        });
        
        paymentTransaction = data.transaction;
        console.log('Payment transaction created:', paymentTransaction);
      } catch (error) {
        console.error('Error creating payment transaction:', error);
        showNotification('Failed to initialize payment', 'error');
      }
    }

    function renderOrderSummary(order) {
      const container = document.getElementById('order-summary');
      
      container.innerHTML = `
        <div class="space-y-4">
          <div class="flex justify-between items-center">
            <span class="text-gray-600">Order Number:</span>
            <span class="font-semibold">#${order.order_number || order.id}</span>
          </div>
          
          <div class="border-t pt-4">
            <div class="flex justify-between items-center text-lg font-semibold">
              <span>Total Amount:</span>
              <span class="text-blue-600">$${order.total_amount} ${order.currency || 'USD'}</span>
            </div>
          </div>
          
          <div class="bg-gray-50 p-4 rounded-lg">
            <h3 class="font-semibold text-gray-900 mb-2">Shipping Address:</h3>
            <p class="text-gray-600 text-sm">
              ${order.shipping_address ? JSON.parse(order.shipping_address).address : 'Address not available'}
            </p>
          </div>
        </div>
      `;
    }

    async function loadPaymentMethods() {
      try {
        const data = await window.authHelper.get('/api/payment-methods?active_only=true');
        availablePaymentMethods = data.payment_methods;
        
        if (availablePaymentMethods.length === 0) {
          // No active payment methods - show coming soon with manual payment option
          document.getElementById('coming-soon-section').classList.remove('hidden');
        } else {
          renderPaymentMethods(availablePaymentMethods);
        }
      } catch (error) {
        console.error('Error loading payment methods:', error);
        // Show coming soon as fallback
        document.getElementById('coming-soon-section').classList.remove('hidden');
      }
    }

    function renderPaymentMethods(methods) {
      const container = document.getElementById('payment-methods-container');
      
      container.innerHTML = `
        <div class="space-y-4">
          ${methods.map(method => `
            <div class="border border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors cursor-pointer payment-method-option" 
                 data-method-id="${method.id}">
              <div class="flex items-center space-x-4">
                <input type="radio" name="payment_method" value="${method.id}" class="text-blue-600">
                ${method.logo_url ? `
                  <img src="${method.logo_url}" loading="lazy" alt="${method.name}" class="h-8 w-8 object-contain">
                ` : `
                  <div class="h-8 w-8 bg-gray-200 rounded flex items-center justify-center">
                    <span class="text-gray-500 text-xs">${method.name.charAt(0)}</span>
                  </div>
                `}
                <div class="flex-1">
                  <h3 class="font-semibold text-gray-900">${method.name}</h3>
                  <p class="text-sm text-gray-600">${method.description || ''}</p>
                </div>
              </div>
              
              ${method.instructions ? `
                <div class="mt-3 pl-12 text-sm text-gray-600 bg-gray-50 p-3 rounded">
                  <p><strong>Instructions:</strong> ${method.instructions}</p>
                </div>
              ` : ''}
            </div>
          `).join('')}
          
          <div class="border-t pt-4">
            <button id="proceed-payment-btn" class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors font-semibold disabled:bg-gray-400" disabled>
              Proceed with Payment
            </button>
          </div>
          
          <div class="text-center">
            <button id="use-manual-payment-btn" class="text-blue-600 hover:text-blue-700 text-sm underline">
              Or use manual payment instead
            </button>
          </div>
        </div>
      `;

      // Add event listeners
      const paymentOptions = container.querySelectorAll('.payment-method-option');
      const proceedBtn = document.getElementById('proceed-payment-btn');
      const manualBtn = document.getElementById('use-manual-payment-btn');

      paymentOptions.forEach(option => {
        option.addEventListener('click', () => {
          const radio = option.querySelector('input[type="radio"]');
          radio.checked = true;
          proceedBtn.disabled = false;
        });
      });

      proceedBtn.addEventListener('click', handleAutomaticPayment);
      manualBtn.addEventListener('click', () => {
        document.getElementById('manual-payment-section').classList.remove('hidden');
        container.parentElement.classList.add('hidden');
      });
    }

    async function handleAutomaticPayment() {
      const selectedMethod = document.querySelector('input[name="payment_method"]:checked');
      
      if (!selectedMethod) {
        showNotification('Please select a payment method', 'error');
        return;
      }

      const methodId = selectedMethod.value;
      const method = availablePaymentMethods.find(m => m.id == methodId);

      showNotification('Automatic payment processing is not yet implemented. Please use manual payment.', 'info');
      
      // For now, show manual payment as fallback
      document.getElementById('manual-payment-section').classList.remove('hidden');
      document.getElementById('payment-methods-container').parentElement.classList.add('hidden');
    }

    async function handleManualPayment(e) {
      e.preventDefault();
      
      if (!paymentTransaction) {
        showNotification('Payment transaction not initialized', 'error');
        return;
      }

      const formData = new FormData(e.target);
      const loadingOverlay = document.getElementById('loading-overlay');
      
      try {
        loadingOverlay.classList.remove('hidden');
        
        const response = await fetch(`/api/payment-transactions/${paymentTransaction.id}/manual-payment`, {
          method: 'POST',
          headers: window.authHelper.getAuthHeaders(),
          body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
          showNotification('Payment proof submitted successfully! Please wait for admin confirmation.', 'success');
          
          // Clear pending order from localStorage
          localStorage.removeItem('pendingOrder');
          
          // Redirect to orders page after delay
          setTimeout(() => {
            window.location.href = '/buyer/orders.html';
          }, 3000);
        } else {
          showNotification(data.error || 'Failed to submit payment proof', 'error');
        }
      } catch (error) {
        console.error('Error submitting manual payment:', error);
        showNotification('Failed to submit payment proof', 'error');
      } finally {
        loadingOverlay.classList.add('hidden');
      }
    }

    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white max-w-md ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 'bg-blue-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 5000);
    }
  </script>

  <!-- Navigation utilities for this page -->
  <script>
    // Page-specific navigation setup
    document.addEventListener('DOMContentLoaded', function() {
      // Set page type and mode
      document.body.setAttribute('data-page-type', 'buyer');
      
      
      
      // Add navigation helpers to existing elements
      enhanceExistingNavigation();
      
      // Setup page-specific navigation
      setupPageNavigation();
    });
    
    function enhanceExistingNavigation() {
      // Add data-route attributes to links that don't have them
      const links = document.querySelectorAll('a[href]:not([data-route])');
      links.forEach(link => {
        const href = link.getAttribute('href');
        if (href && !href.startsWith('http') && !href.startsWith('mailto:') && !href.startsWith('tel:')) {
          const route = getRouteForHref(href);
          if (route) {
            link.setAttribute('data-route', route);
          }
        }
      });
      
      // Add journey actions to buttons
      const buttons = document.querySelectorAll('button, .btn, [role="button"]');
      buttons.forEach(button => {
        const text = button.textContent.toLowerCase();
        
        if (text.includes('add') && text.includes('cart')) {
          button.setAttribute('data-journey-action', 'add-to-cart');
        } else if (text.includes('checkout')) {
          button.setAttribute('data-journey-action', 'proceed-checkout');
        } else if (text.includes('place') && text.includes('order')) {
          button.setAttribute('data-journey-action', 'complete-payment');
        } else if (text.includes('login') || text.includes('sign in')) {
          button.setAttribute('data-quick-nav', 'login');
        } else if (text.includes('logout') || text.includes('sign out')) {
          button.setAttribute('data-quick-nav', 'logout');
        }
      });
    }
    
    function setupPageNavigation() {
      // Page-specific navigation setup
      const pageType = 'buyer';
      
      // Add mode indicators if they exist
      const modeIndicators = document.querySelectorAll('.mode-indicator');
      modeIndicators.forEach(indicator => {
        const currentMode = window.navUtils ? window.navUtils.getCurrentMode() : 'marketplace';
        indicator.className = `mode-indicator mode-${currentMode}`;
        indicator.textContent = currentMode === 'marketplace' ? 'Marketplace' : 'Local Market';
      });
      
      // Add quick navigation buttons if they exist
      const homeButtons = document.querySelectorAll('[data-nav="home"], .home-btn');
      homeButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'home'));
      
      const backButtons = document.querySelectorAll('[data-nav="back"], .back-btn');
      backButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'back'));
      
      const dashboardButtons = document.querySelectorAll('[data-nav="dashboard"], .dashboard-btn');
      dashboardButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'dashboard'));
    }
    
    function getRouteForHref(href) {
      // Basic route mapping
      const routeMap = {
        '/': 'home',
        '/public/index.html': 'home',
        '/public/about.html': 'public.about',
        '/public/contact.html': 'public.contact',
        '/public/product-list.html': 'public.product-list',
        '/public/product-detail.html': 'public.product-detail',
        '/buyer/buyers-home.html': 'buyer.dashboard',
        '/buyer/cart.html': 'buyer.cart',
        '/buyer/checkout.html': 'buyer.checkout',
        '/buyer/orders.html': 'buyer.orders',
        '/seller/dashboard.html': 'seller.dashboard',
        '/seller/add-product.html': 'seller.add-product',
        '/agent/dashboard.html': 'agent.dashboard',
        '/admin/dashboard.html': 'admin.dashboard',
        '/auth/auth-buyer.html': 'auth.login',
        '/auth/auth-seller.html': 'auth.login-seller',
        '/auth/auth-agent.html': 'auth.login-agent',
        '/grocery/local-market-home.html': 'local-market.home',
        '/grocery/cart.html': 'local-market.cart'
      };
      
      return routeMap[href] || null;
    }
    
    // Wait for flexible navigation system to be ready
    window.addEventListener('flexibleNavigationReady', function() {
      console.log('✅ Flexible navigation ready on buyer\payment-new.html');
      
      // Start appropriate journey if needed
      
    });
  </script>

</body>
</html>
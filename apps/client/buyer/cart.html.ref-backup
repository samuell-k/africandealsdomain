<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopping Cart | African Deals Domain</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="icon" href="/public/images/logo.png">
  <script src="/shared/auth-utils.js"></script>
  <script src="/shared/mode-switcher.js"></script>
</head>
<body class="bg-gray-50 min-h-screen">
  
  <!-- Navigation Header -->
  <nav class="bg-white shadow-lg border-b border-gray-200 sticky top-0 z-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        <!-- Logo and Brand -->
        <div class="flex items-center space-x-4">
          <a href="/public/index.html" class="flex items-center space-x-2 group">
            <img src="/public/images/logo.png" alt="ADD" class="h-10 w-10 rounded-xl shadow-lg group-hover:scale-110 transition-transform duration-300">
            <div>
              <h1 class="text-xl font-bold text-gray-900">ADD Physical Products</h1>
              <p class="text-xs text-blue-600">Buyer Portal</p>
            </div>
          </a>
        </div>
        
        <!-- Navigation Links -->
        <div class="hidden md:flex items-center space-x-6">
          <a href="/buyer/dashboard.html" class="text-gray-600 hover:text-blue-600 transition-colors">Dashboard</a>
          <a href="/public/products.html" class="text-gray-600 hover:text-blue-600 transition-colors">Browse Products</a>
          <a href="/buyer/orders.html" class="text-gray-600 hover:text-blue-600 transition-colors">My Orders</a>
          <a href="/buyer/cart.html" class="text-blue-600 font-semibold">Cart</a>
          <a href="/buyer/wishlist.html" class="text-gray-600 hover:text-blue-600 transition-colors">Wishlist</a>
        </div>
        
        <!-- Mode Switcher -->
        <div class="mode-switcher-container" data-mode-switch="">
          <!-- Mode switcher will be inserted here by JavaScript -->
        </div>
        
        <!-- User Menu -->
        <div class="flex items-center space-x-4">
          <div class="relative">
            <button id="userMenuButton" class="flex items-center space-x-2 text-gray-700 hover:text-blue-600 transition-colors">
              <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
              <span class="hidden md:block font-medium" id="userName">Account</span>
            </button>
            
            <!-- Dropdown Menu -->
            <div id="userDropdown" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
              <div class="py-2">
                <a href="/buyer/profile.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a>
                <a href="/buyer/messages.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Messages</a>
                <a href="/buyer/support.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Support</a>
                <hr class="my-2">
                <button onclick="logout()" class="block w-full text-left px-4 py-2 text-red-600 hover:bg-red-50">Logout</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Mobile Menu -->
    <div id="mobileMenu" class="hidden md:hidden bg-white border-t border-gray-200">
      <div class="px-4 py-2 space-y-2">
        <a href="/buyer/dashboard.html" class="block py-2 text-gray-600 hover:text-blue-600">Dashboard</a>
        <a href="/public/products.html" class="block py-2 text-gray-600 hover:text-blue-600">Browse Products</a>
        <a href="/buyer/orders.html" class="block py-2 text-gray-600 hover:text-blue-600">My Orders</a>
        <a href="/buyer/cart.html" class="block py-2 text-blue-600 font-semibold">Cart</a>
        <a href="/buyer/wishlist.html" class="block py-2 text-gray-600 hover:text-blue-600">Wishlist</a>
      </div>
    </div>
  </nav>

  <main class="pb-8">
    <div class="max-w-7xl mx-auto px-4">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Shopping Cart</h1>
        <p class="text-gray-600">Review and manage your cart items</p>
      </div>

      <!-- Cart Content -->
      <div id="cart-content" class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Cart Items -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-xl shadow-lg p-6">
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-xl font-semibold text-gray-900">Cart Items</h2>
              <span id="cart-count" class="text-sm text-gray-500">0 items</span>
            </div>
            
            <div id="cart-items" class="space-y-4">
              <!-- Cart items will be loaded here -->
              <div class="text-center py-8">
                <svg width="64" height="64" fill="none" stroke="currentColor" stroke-width="1" class="mx-auto text-gray-400 mb-4" viewBox="0 0 24 24">
                  <path d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"/>
                </svg>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Your cart is empty</h3>
                <p class="text-gray-600 mb-4">Add some products to get started</p>
                <a href="/buyer/product-list.html" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  Continue Shopping
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- Cart Summary -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-xl shadow-lg p-6 sticky top-20">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Order Summary</h2>
            
            <div class="space-y-3 mb-6">
              <div class="flex justify-between text-sm">
                <span>Subtotal</span>
                <span id="subtotal">$0.00</span>
              </div>
              <div class="flex justify-between text-sm">
                <span>Shipping</span>
                <span id="shipping">$0.00</span>
              </div>
              <div class="flex justify-between text-sm">
                <span>Tax</span>
                <span id="tax">$0.00</span>
              </div>
              <div class="border-t pt-3">
                <div class="flex justify-between font-semibold">
                  <span>Total</span>
                  <span id="total">$0.00</span>
                </div>
              </div>
            </div>
            
            <button id="checkout-btn" class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed" disabled>
              Proceed to Checkout
            </button>
            
            <div class="mt-4 text-center">
              <a href="/buyer/product-list.html" class="text-blue-600 hover:text-blue-700 text-sm">
                Continue Shopping
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    // --- GLOBAL STATE ---
    let cartItems = [];
    let currencyRates = {};
    let selectedCurrency = localStorage.getItem('selectedCurrency') || 'USD';
    let selectedCurrencySymbol = { USD: '$', RWF: 'FRw', EUR: '€', KES: 'Ksh', NGN: '₦' }[selectedCurrency] || '$';

    // --- LOAD HEADER COMPONENT ---
    fetch('/buyer/components/header.html')
      .then(res => res.text())
      .then(html => {
        document.getElementById('buyer-header').innerHTML = html;
      });

    // --- FETCH CART ITEMS ---
    async function fetchCartItems() {
      try {
        const token = localStorage.getItem('authToken');
        if (!token) {
          window.location.href = '/auth/auth-buyer.html';
          return;
        }
        
        const response = await fetch('/api/cart', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          cartItems = data.items || [];
          renderCartItems();
          updateOrderSummary();
        } else {
          console.error('Failed to fetch cart items');
          showNotification('Failed to load cart items', 'error');
        }
      } catch (error) {
        console.error('Error fetching cart items:', error);
        showNotification('Failed to load cart items', 'error');
      }
    }

    // --- RENDER CART ITEMS ---
    function renderCartItems() {
      const container = document.getElementById('cart-items');
      const cartCount = document.getElementById('cart-count');
      
      cartCount.textContent = `${cartItems.length} item${cartItems.length !== 1 ? 's' : ''}`;
      
      if (cartItems.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8">
            <svg width="64" height="64" fill="none" stroke="currentColor" stroke-width="1" class="mx-auto text-gray-400 mb-4" viewBox="0 0 24 24">
              <path d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"/>
            </svg>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Your cart is empty</h3>
            <p class="text-gray-600 mb-4">Add some products to get started</p>
            <a href="/buyer/product-list.html" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              Continue Shopping
            </a>
          </div>
        `;
        return;
      }
      
      container.innerHTML = cartItems.map(item => `
        <div class="flex items-center gap-4 p-4 border border-gray-200 rounded-lg" data-cart-id="${item.id}">
        <!-- Mode Switcher -->
        <div class="mode-switcher-container" data-mode-switch="">
          <!-- Mode switcher will be inserted here by JavaScript -->
        </div>
          <img src="${item.main_image ? `/uploads/${item.main_image}` : '/public/images/placeholder.jpg'}" 
               alt="${item.name}" 
               class="w-20 h-20 object-cover rounded-lg"
               onerror="this.src='/public/images/logo.png'">
          
          <div class="flex-1">
            <h3 class="font-semibold text-gray-900">${item.name}</h3>
            <p class="text-sm text-gray-600">${item.currency} ${item.price}</p>
          </div>
          
          <div class="flex items-center gap-2">
            <button onclick="updateQuantity(${item.id}, ${item.quantity - 1})" 
                    class="w-8 h-8 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-50">
              -
            </button>
            <span class="w-12 text-center">${item.quantity}</span>
            <button onclick="updateQuantity(${item.id}, ${item.quantity + 1})" 
                    class="w-8 h-8 flex items-center justify-center border border-gray-300 rounded hover:bg-gray-50">
              +
            </button>
          </div>
          
          <div class="text-right">
            <p class="font-semibold text-gray-900 item-total" data-price="${item.price}" data-quantity="${item.quantity}">
              ${item.currency} ${(item.price * item.quantity).toFixed(2)}
            </p>
            <button onclick="removeItem(${item.id})" class="text-red-600 hover:text-red-700 text-sm">
              Remove
            </button>
          </div>
        </div>
      `).join('');
    }

    // --- UPDATE QUANTITY ---
    async function updateQuantity(cartId, newQuantity) {
      try {
        const token = localStorage.getItem('authToken');
        const response = await fetch('/api/cart/update', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            cartId: cartId,
            quantity: newQuantity
          })
        });
        
        if (response.ok) {
          await fetchCartItems();
          showNotification('Cart updated successfully', 'success');
        } else {
          showNotification('Failed to update cart', 'error');
        }
      } catch (error) {
        console.error('Error updating quantity:', error);
        showNotification('Failed to update quantity', 'error');
      }
    }

    // --- REMOVE ITEM ---
    async function removeItem(cartId) {
      try {
        const token = localStorage.getItem('authToken');
        const response = await fetch(`/api/cart/remove/${cartId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (response.ok) {
          await fetchCartItems();
          showNotification('Item removed from cart', 'success');
        } else {
          showNotification('Failed to remove item', 'error');
        }
      } catch (error) {
        console.error('Error removing item:', error);
        showNotification('Failed to remove item', 'error');
      }
    }

    // --- UPDATE ORDER SUMMARY ---
    function updateOrderSummary() {
      const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      const shipping = subtotal > 0 ? 10 : 0; // $10 shipping for non-empty cart
      const tax = subtotal * 0.1; // 10% tax
      const total = subtotal + shipping + tax;
      
      document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;
      document.getElementById('shipping').textContent = `$${shipping.toFixed(2)}`;
      document.getElementById('tax').textContent = `$${tax.toFixed(2)}`;
      document.getElementById('total').textContent = `$${total.toFixed(2)}`;
      
      // Enable/disable checkout button
      const checkoutBtn = document.getElementById('checkout-btn');
      checkoutBtn.disabled = cartItems.length === 0;
    }

    // --- CHECKOUT FUNCTION ---
    document.getElementById('checkout-btn').addEventListener('click', function() {
      if (cartItems.length === 0) {
        showNotification('Your cart is empty', 'error');
        return;
      }
      
      // Store cart data for delivery method selection
      localStorage.setItem('cartData', JSON.stringify(cartItems));
      
      // Redirect to delivery method selection page
      window.location.href = '/buyer/delivery-method-selection.html';
    });

    // --- CURRENCY CONVERSION ---
    async function fetchCurrencyRates() {
      try {
        const response = await fetch('https://v6.exchangerate-api.com/v6/c5f524e323378439dad2a43f/latest/USD');
        const data = await response.json();
        if (data && data.result === 'success') {
          currencyRates = data.conversion_rates;
          localStorage.setItem('currencyRates', JSON.stringify(currencyRates));
          updateCurrencyDisplay();
        }
      } catch (error) {
        console.error('Error fetching currency rates:', error);
        currencyRates = { USD: 1, RWF: 1200, EUR: 0.9, KES: 130, NGN: 1500 };
        updateCurrencyDisplay();
      }
    }

    function updateCurrencyDisplay() {
      const symbol = selectedCurrencySymbol;
      
      // Update all item totals
      document.querySelectorAll('.item-total').forEach(element => {
        const price = parseFloat(element.dataset.price);
        const quantity = parseInt(element.dataset.quantity);
        const total = price * quantity;
        
        if (selectedCurrency === 'USD') {
          element.textContent = `$${total.toFixed(2)}`;
        } else {
          const convertedTotal = total * (currencyRates[selectedCurrency] || 1);
          element.textContent = `${symbol}${convertedTotal.toFixed(2)}`;
        }
      });
      
      // Update order summary
      updateOrderSummary();
    }

    // --- NOTIFICATION FUNCTION ---
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 'bg-blue-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // --- INITIALIZE PAGE ---
    document.addEventListener('DOMContentLoaded', function() {
      fetchCartItems();
      fetchCurrencyRates();
      initializeNavigation();
    });
    
    // --- NAVIGATION FUNCTIONALITY ---
    function initializeNavigation() {
      // User menu toggle
      const userMenuButton = document.getElementById('userMenuButton');
      const userDropdown = document.getElementById('userDropdown');
      
      if (userMenuButton && userDropdown) {
        userMenuButton.addEventListener('click', function(e) {
          e.stopPropagation();
          userDropdown.classList.toggle('hidden');
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', function() {
          userDropdown.classList.add('hidden');
        });
      }
      
      // Load user info
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      if (user.name) {
        const userNameElement = document.getElementById('userName');
        if (userNameElement) {
          userNameElement.textContent = user.name;
        }
      }
    }
    
    // --- LOGOUT FUNCTIONALITY ---
    function logout() {
      localStorage.removeItem('authToken');
      localStorage.removeItem('user');
      window.location.href = '/auth/auth-buyer.html';
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Buyer Dashboard | African Deals Domain</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/shared/auth-utils.js"></script>
  <script src="/shared/mode-switcher.js"></script>
  <script src="/shared/buyer-navigation.js"></script>
  <link rel="icon" href="/public/images/logo.png">
  <style>
    .brand-gradient { background: linear-gradient(90deg,#0e2038 0%,#23325c 100%); }
    .brand-text { color: #0e2038; }
    .brand-bg { background-color: #0e2038; }
  </style>
</head>
<body class="bg-gray-50 min-h-screen flex flex-col">
  <!-- Navigation Container -->
  <div id="navigation-container"></div>
  
  <!-- Mode Switcher -->
  <div class="mode-switcher-container" data-mode-switch="">
    <!-- Mode switcher will be inserted here by JavaScript -->
  </div>
        <a href="#" id="local-market-link-mobile" class="md:hidden flex items-center justify-center h-10 w-10 bg-green-500 hover:bg-green-600 text-white rounded-full transition-all duration-300 shadow-lg" title="Switch to Local Market">
          <span class="text-lg">üõí</span>
        </a>
        
        <!-- Message Icon Only -->
        <a href="/buyer/messages.html" class="relative flex items-center justify-center h-9 w-9 md:h-10 md:w-10 rounded-full hover:bg-blue-50 transition" title="Messages">
          <svg width="22" height="22" fill="none" stroke="currentColor" stroke-width="2.2" class="text-blue-600" viewBox="0 0 24 24"><rect x="4" y="6" width="16" height="14" rx="3"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>
          <span id="messages-badge" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full px-1 py-0.5 shadow hidden">0</span>
        </a>
        <!-- Delivery To Dropdown -->
        <div class="relative">
          <button id="delivery-btn" class="flex items-center gap-1 px-1 py-1 rounded-lg hover:bg-blue-50 transition text-xs md:text-sm font-semibold text-[#0e2038]">
            <svg width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" class="text-green-600" viewBox="0 0 24 24"><path d="M3 12l2-2 4 4 8-8 4 4"/></svg>
            <span id="delivery-label">Deliver to: <span class="font-bold">Choose</span></span>
            <svg width="12" height="12" fill="none" stroke="currentColor" stroke-width="2" class="ml-1 text-gray-400" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6"/></svg>
          </button>
          <div id="delivery-dropdown" class="dropdown-menu absolute right-0 mt-2 min-w-[260px] bg-white rounded-xl shadow-lg z-50 hidden p-4">
            <div class="mb-2 font-bold text-blue-700">Set Delivery Location</div>
            <div class="mb-2">
              <label class="block text-xs font-semibold mb-1">Country</label>
              <select id="country-select" class="w-full border rounded px-2 py-1 text-xs">
                <!-- Country options with flags will be injected here -->
              </select>
            </div>
            <div class="mb-2">
              <label class="block text-xs font-semibold mb-1">Add Manual Address</label>
              <input id="manual-address" type="text" class="w-full border rounded px-2 py-1 text-xs" placeholder="Street, City, etc." />
            </div>
            <div class="mb-2">
              <label class="block text-xs font-semibold mb-1">Zip/Postal Code</label>
              <input id="zip-code" type="text" class="w-full border rounded px-2 py-1 text-xs" placeholder="e.g. 10001" />
            </div>
            <button id="save-delivery" class="w-full bg-blue-600 text-white px-3 py-1 rounded-lg hover:bg-blue-700 transition mt-2 text-xs" data-i18n="save"></button>
          </div>
        </div>
        <!-- Money Icon Dropdown (Language/Currency) -->
        <div class="relative">
          <button id="money-btn" class="flex items-center gap-1 px-1 py-1 rounded-lg hover:bg-blue-50 transition text-xs md:text-sm font-semibold text-[#0e2038]">
            <svg width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" class="text-yellow-500" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"/><text x="12" y="16" text-anchor="middle" font-size="8" fill="#f59e42">&#8377;</text></svg>
            <span id="money-label">EN | RWF</span>
            <svg width="12" height="12" fill="none" stroke="currentColor" stroke-width="2" class="ml-1 text-gray-400" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6"/></svg>
          </button>
          <div id="money-dropdown" class="dropdown-menu absolute right-0 mt-2 min-w-[180px] bg-white rounded-xl shadow-lg z-50 hidden p-4">
            <div class="mb-2 font-bold text-blue-700 text-sm">Language & Currency</div>
            <div class="mb-2">
              <label class="block text-xs font-semibold mb-1">Language</label>
              <select id="lang-select" class="w-full border rounded px-2 py-1 text-xs">
                <option value="en">English</option>
                <option value="fr">Fran√ßais</option>
                <option value="rw">Kinyarwanda</option>
                <option value="sw">Swahili</option>
                <option value="ar">ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</option>
                <option value="ha">Hausa</option>
                <option value="yo">Yoruba</option>
              </select>
            </div>
            <div class="mb-2">
              <label class="block text-xs font-semibold mb-1">Currency</label>
              <select id="currency-select" class="w-full border rounded px-2 py-1 text-xs">
                <option value="RWF">RWF (Rwanda Franc)</option>
                <option value="KES">KES (Kenya Shilling)</option>
                <option value="NGN">NGN (Naira)</option>
                <option value="USD">USD (US Dollar)</option>
                <option value="EUR">EUR (Euro)</option>
              </select>
            </div>
            <button id="save-money" class="w-full bg-yellow-500 text-white px-3 py-1 rounded-lg hover:bg-yellow-600 transition mt-2 text-xs" data-i18n="save"></button>
          </div>
        </div>
        <!-- Order Icon -->
        <a href="/buyer/orders.html" class="flex items-center justify-center h-9 w-9 md:h-10 md:w-10 rounded-full hover:bg-blue-50 transition" title="Orders">
          <svg width="22" height="22" fill="none" stroke="currentColor" stroke-width="2.2" class="text-blue-600" viewBox="0 0 24 24"><rect x="4" y="6" width="16" height="14" rx="3"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>
        </a>
        <!-- Profile Icon Only Dropdown -->
        <div class="relative">
          <button id="profile-btn" class="flex items-center justify-center h-9 w-9 md:h-10 md:w-10 rounded-full hover:bg-blue-50 transition">
            <svg width="22" height="22" fill="none" stroke="currentColor" stroke-width="2.2" class="text-blue-600" viewBox="0 0 24 24"><circle cx="12" cy="8" r="4"/><path d="M4 20c0-4 8-4 8-4s8 0 8 4"/></svg>
          </button>
          <div id="profile-dropdown" class="dropdown-menu absolute right-0 mt-2 min-w-[180px] bg-white rounded-xl shadow-lg z-50 hidden p-4">
            <div class="mb-2 font-bold text-blue-700 text-sm" id="profile-greeting">Hello, User</div>
            <a href="/buyer/orders.html" class="block px-4 py-2 hover:bg-blue-50 text-xs">Orders</a>
            <a href="/buyer/messages.html" class="block px-4 py-2 hover:bg-blue-50 text-xs">Messages</a>
            <a href="/buyer/wishlist.html" class="block px-4 py-2 hover:bg-blue-50 text-xs">Favourites</a>
            <a href="/public/how-it-works.html" class="block px-4 py-2 hover:bg-blue-50 text-xs">How it works</a>
            <a href="/public/about.html" class="block px-4 py-2 hover:bg-blue-50 text-xs">About</a>
            <a href="/public/privacy-policy.html" class="block px-4 py-2 hover:bg-blue-50 text-xs">Privacy</a>
            <a href="/buyer/profile.html" class="block px-4 py-2 hover:bg-blue-50 text-xs">Account</a>
            <button id="signout-btn" class="w-full text-left px-4 py-2 text-red-600 hover:bg-red-50 text-xs" data-i18n="logout"></button>
          </div>
        </div>
      </div>
    </div>
  </header>
  
  <!-- Prominent Mode Switcher Banner -->
  <div class="bg-gradient-to-r from-blue-50 to-green-50 border-b border-gray-200">
    <div class="max-w-7xl mx-auto px-2 md:px-6 py-4">
      <div class="flex flex-col md:flex-row items-center justify-between gap-4">
        <div class="text-center md:text-left">
          <h2 class="text-lg font-bold text-gray-900 mb-1">üõçÔ∏è Physical Products Marketplace</h2>
          <p class="text-sm text-gray-600">Browse and buy products from trusted sellers worldwide</p>
        </div>
        
        <div class="flex items-center gap-4">
          <div class="text-center">
            <div class="text-xs text-gray-500 mb-1">Switch to</div>
            <a href="#" id="local-market-link-banner" class="flex items-center gap-3 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-6 py-3 rounded-2xl font-semibold transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105">
              <span class="text-2xl">üõí</span>
              <div class="text-left">
                <div class="text-sm font-bold">Local Market</div>
                <div class="text-xs opacity-90">Fast Delivery</div>
              </div>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <main class="flex-1 max-w-7xl mx-auto w-full px-2 md:px-6 py-8">
    <!-- Welcome Section -->
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold brand-text mb-4"><span data-i18n="welcome"></span></h1>
      <p class="text-lg text-gray-600 mb-6">Discover amazing products from trusted sellers</p>
    </div>

    <!-- Featured Products Section -->
    <div class="mb-8">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-900">Featured Products</h2>
        <a href="/buyer/product-list.html" class="text-blue-600 hover:text-blue-700 font-semibold">View All Products ‚Üí</a>
      </div>
      
      <!-- Products Grid -->
      <div id="products-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        <!-- Products will be loaded here -->
        <div class="animate-pulse">
          <div class="bg-gray-200 h-48 rounded-lg mb-4"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-3/4"></div>
        </div>
        <div class="animate-pulse">
          <div class="bg-gray-200 h-48 rounded-lg mb-4"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-3/4"></div>
        </div>
        <div class="animate-pulse">
          <div class="bg-gray-200 h-48 rounded-lg mb-4"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-3/4"></div>
        </div>
        <div class="animate-pulse">
          <div class="bg-gray-200 h-48 rounded-lg mb-4"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-3/4"></div>
        </div>
      </div>
      
      <!-- Load More Button -->
      <div class="text-center mt-8">
        <button id="load-more-btn" class="bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 transition font-semibold hidden">
          Load More Products
        </button>
      </div>
    </div>
  </main>
  <footer id="main-footer"></footer>
  <script src="/public/auth-check.js"></script>
  <script src="/buyer/shared-components.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // --- COUNTRY & CURRENCY STATE ---
    let countryList = [];
    let currencyRates = {};
    let selectedCountry = null;
    let selectedCurrency = null;
    let selectedCurrencySymbol = '$';
    let selectedCountryFlag = '';
    let selectedCountryName = '';
    const currencySymbols = { USD: '$', RWF: 'FRw', EUR: '‚Ç¨', CNY: '¬•', KES: 'Ksh', NGN: '‚Ç¶' };
    const supportedCurrencies = ['USD','RWF','EUR','CNY','KES','NGN'];

    // --- LOADING STATE HELPERS ---
    function showCountryLoading() {
      const countrySelect = document.getElementById('country-select');
      if (countrySelect) countrySelect.innerHTML = '<option>Loading countries...</option>';
    }
    function showCurrencyLoading() {
      const currencySelect = document.getElementById('currency-select');
      if (currencySelect) currencySelect.innerHTML = '<option>Loading rates...</option>';
    }
    function showCountryError() {
      const countrySelect = document.getElementById('country-select');
      if (countrySelect) countrySelect.innerHTML = '<option disabled selected>Error loading countries. Please contact support.</option>';
    }
    function showCurrencyError() {
      const currencySelect = document.getElementById('currency-select');
      if (currencySelect) currencySelect.innerHTML = '<option>Error loading rates</option>';
    }

    // --- DROPDOWN LOGIC ---
    function closeAllDropdowns() {
      document.querySelectorAll('.dropdown-menu').forEach(dd => dd.classList.add('hidden'));
    }
    function setupDropdowns() {
      // Profile
      const profileBtn = document.getElementById('profile-btn');
      const profileDropdown = document.getElementById('profile-dropdown');
      if (profileBtn && profileDropdown) {
        profileBtn.onclick = function(e) {
          e.stopPropagation();
          closeAllDropdowns();
          profileDropdown.classList.toggle('hidden');
          console.log('Profile dropdown toggled');
        };
      }
      // Delivery
      const deliveryBtn = document.getElementById('delivery-btn');
      const deliveryDropdown = document.getElementById('delivery-dropdown');
      if (deliveryBtn && deliveryDropdown) {
        deliveryBtn.onclick = function(e) {
          e.stopPropagation();
          closeAllDropdowns();
          deliveryDropdown.classList.toggle('hidden');
          console.log('Delivery dropdown toggled');
        };
      }
      // Money
      const moneyBtn = document.getElementById('money-btn');
      const moneyDropdown = document.getElementById('money-dropdown');
      if (moneyBtn && moneyDropdown) {
        moneyBtn.onclick = function(e) {
          e.stopPropagation();
          closeAllDropdowns();
          moneyDropdown.classList.toggle('hidden');
          console.log('Money dropdown toggled');
        };
      }
      // Close on outside click
      document.body.addEventListener('click', function() { closeAllDropdowns(); });
      // Prevent close on click inside dropdown
      document.querySelectorAll('.dropdown-menu').forEach(dd => {
        dd.onclick = e => e.stopPropagation();
      });
    }

    // --- FETCH COUNTRIES ---
    async function fetchCountries() {
      showCountryLoading();
      try {
        const res = await fetch('/public/countries.json');
        if (!res.ok) throw new Error('countries.json not found');
        const data = await res.json();
        countryList = data.sort((a,b)=>a.name.localeCompare(b.name));
        renderCountryDropdown();
      } catch (e) {
        showCountryError();
      }
    }
    function renderCountryDropdown() {
      const countrySelect = document.getElementById('country-select');
      if (!countrySelect) return;
      countrySelect.innerHTML = countryList.map(c => `<option value="${c.code}" data-flag="${c.flag}" data-name="${c.name}">${c.flag ? `<img src='${c.flag}' alt='' class='inline mr-1' style='width:24px;height:16px;display:inline-block;vertical-align:middle;'/>` : ''}${c.name}</option>`).join('');
      // Restore selection
      if (selectedCountry) countrySelect.value = selectedCountry;
    }
    // --- FETCH CURRENCY RATES ---
    async function fetchCurrencyRates() {
      showCurrencyLoading();
      try {
        const res = await fetch('https://v6.exchangerate-api.com/v6/c5f524e323378439dad2a43f/latest/USD');
        const data = await res.json();
        if (data && data.result === 'success') {
          currencyRates = data.conversion_rates;
          localStorage.setItem('currencyRates', JSON.stringify(currencyRates));
          // Populate all currencies in dropdown
          renderCurrencyDropdown(Object.keys(currencyRates));
          console.log('Fetched currency rates:', currencyRates);
        } else {
          throw new Error('API error');
        }
      } catch (e) {
        showCurrencyError();
        currencyRates = { USD: 1, RWF: 1200, EUR: 0.9, CNY: 7, KES: 130, NGN: 1500 };
        localStorage.setItem('currencyRates', JSON.stringify(currencyRates));
        renderCurrencyDropdown(Object.keys(currencyRates));
        console.log('Using fallback currency rates:', currencyRates);
      }
    }
    function renderCurrencyDropdown(currencyList) {
      const currencySelect = document.getElementById('currency-select');
      if (!currencySelect) return;
      // Use currencySymbols for common ones, else just code
      const currencySymbols = { USD: '$', RWF: 'FRw', EUR: '‚Ç¨', CNY: '¬•', KES: 'Ksh', NGN: '‚Ç¶' };
      currencySelect.innerHTML = (currencyList||[]).map(cur => `<option value="${cur}">${currencySymbols[cur]||cur} ${cur}</option>`).join('');
      // Restore selection
      if (selectedCurrency) currencySelect.value = selectedCurrency;
    }
    // --- PERSIST/RESTORE STATE ---
    function restoreSelections() {
      selectedCountry = localStorage.getItem('selectedCountry') || 'RW';
      selectedCountryFlag = localStorage.getItem('selectedCountryFlag') || '';
      selectedCountryName = localStorage.getItem('selectedCountryName') || 'Rwanda';
      selectedCurrency = localStorage.getItem('selectedCurrency') || 'USD';
      selectedCurrencySymbol = currencySymbols[selectedCurrency] || '$';
    }
    function persistSelections() {
      localStorage.setItem('selectedCountry', selectedCountry);
      localStorage.setItem('selectedCountryFlag', selectedCountryFlag);
      localStorage.setItem('selectedCountryName', selectedCountryName);
      localStorage.setItem('selectedCurrency', selectedCurrency);
    }
    // --- UPDATE NAVBAR UI ---
    function updateNavbarCountryCurrency() {
      // Country
      const deliveryLabel = document.getElementById('delivery-label');
      const navCountry = document.getElementById('nav-country');
      // Find selected country in countryList
      let countryObj = countryList.find(c => c.code === selectedCountry);
      let flagOrImg = (countryObj && countryObj.flag) ? `<img src='${countryObj.flag}' alt='' class='inline mr-1' style='width:24px;height:16px;display:inline-block;vertical-align:middle;'/>` : '';
      if (deliveryLabel) {
        deliveryLabel.innerHTML = `Deliver to: <span class='font-bold flex items-center gap-1'>${flagOrImg}${selectedCountryName}</span>`;
      }
      if (navCountry) {
        navCountry.innerHTML = `${flagOrImg}${selectedCountryName}`;
      }
      // Currency
      const moneyLabel = document.getElementById('money-label');
      const navCurrency = document.getElementById('nav-currency');
      if (moneyLabel) moneyLabel.textContent = `${selectedCurrency} | ${selectedCurrencySymbol}`;
      if (navCurrency) navCurrency.textContent = selectedCurrencySymbol;
    }
    // --- EVENT HANDLERS ---
    document.addEventListener('DOMContentLoaded', function() {
      // Add nav country/currency display
      let navCountry = document.getElementById('nav-country');
      if (!navCountry) {
        navCountry = document.createElement('span');
        navCountry.id = 'nav-country';
        navCountry.className = 'ml-2 flex items-center gap-1 text-xs md:text-sm font-semibold';
        document.getElementById('delivery-btn').parentNode.insertBefore(navCountry, document.getElementById('delivery-btn').nextSibling);
      }
      let navCurrency = document.getElementById('nav-currency');
      if (!navCurrency) {
        navCurrency = document.createElement('span');
        navCurrency.id = 'nav-currency';
        navCurrency.className = 'ml-2 text-xs md:text-sm font-semibold';
        document.getElementById('money-btn').parentNode.insertBefore(navCurrency, document.getElementById('money-btn').nextSibling);
      }
      restoreSelections();
      fetchCountries();
      fetchCurrencyRates();
      updateNavbarCountryCurrency();
      setupDropdowns();
      // Country select change
      const countrySelect = document.getElementById('country-select');
      if (countrySelect) {
        countrySelect.addEventListener('change', function(e) {
          const sel = e.target.options[e.target.selectedIndex];
          selectedCountry = sel.value;
          selectedCountryFlag = sel.getAttribute('data-flag') || '';
          selectedCountryName = sel.getAttribute('data-name') || sel.textContent;
          persistSelections();
          updateNavbarCountryCurrency();
          console.log('Selected country:', selectedCountry, selectedCountryName, selectedCountryFlag);
        });
      }
      // Delivery save
      const saveDeliveryBtn = document.getElementById('save-delivery');
      if (saveDeliveryBtn) {
        saveDeliveryBtn.onclick = function() {
          persistSelections();
          updateNavbarCountryCurrency();
          closeAllDropdowns();
        };
      }
      // Currency select change
      const currencySelect = document.getElementById('currency-select');
      if (currencySelect) {
        currencySelect.addEventListener('change', function(e) {
          selectedCurrency = e.target.value;
          selectedCurrencySymbol = currencySymbols[selectedCurrency] || selectedCurrency;
          persistSelections();
          updateNavbarCountryCurrency();
          updateProductPrices();
          console.log('Selected currency:', selectedCurrency, selectedCurrencySymbol);
        });
      }
      // Currency save
      const saveMoneyBtn = document.getElementById('save-money');
      if (saveMoneyBtn) {
        saveMoneyBtn.onclick = function() {
          persistSelections();
          updateNavbarCountryCurrency();
          updateProductPrices();
          closeAllDropdowns();
        };
      }
      // Initial product price update
      updateProductPrices();
      fetchAndRenderProductGrid();
      // Inject footer
      fetch('/buyer/components/footer.html')
        .then(res => res.text())
        .then(html => {
          document.getElementById('main-footer').innerHTML = html;
        });
    });
    // --- PRODUCT FETCHING AND DISPLAY ---
    let products = [];
    let currentPage = 1;
    let hasMoreProducts = true;

    async function fetchAndRenderProductGrid() {
      try {
        const params = new URLSearchParams({
          page: currentPage,
          limit: 8,
          sort: 'newest'
        });
        
        const res = await fetch(`/api/products?${params}`);
        const data = await res.json();
        
        if (data.success) {
          if (currentPage === 1) {
            products = data.products;
          } else {
            products = [...products, ...data.products];
          }
          
          hasMoreProducts = data.products.length === 8;
          renderProductGrid();
          updateLoadMoreButton();
        }
      } catch (error) {
        console.error('Error fetching products:', error);
        renderProductGrid(); // Show empty state
      }
    }

    function renderProductGrid() {
      const grid = document.getElementById('products-grid');
      
      if (products.length === 0) {
        grid.innerHTML = `
          <div class="col-span-full text-center py-12">
            <svg width="64" height="64" fill="none" stroke="currentColor" stroke-width="1" class="mx-auto text-gray-400 mb-4" viewBox="0 0 24 24">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
              <circle cx="8.5" cy="8.5" r="1.5"/>
              <path d="M21 15l-5-5L5 21"/>
            </svg>
            <h3 class="text-lg font-semibold text-gray-900 mb-2">No products found</h3>
            <p class="text-gray-600">Check back later for new products</p>
          </div>
        `;
        return;
      }
      
      grid.innerHTML = products.map(product => `
        <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
          <div class="relative">
            <img src="${product.main_image ? `/uploads/${product.main_image}` : '/public/images/placeholder.jpg'}" 
                 alt="${product.name}" 
                 class="w-full h-48 object-cover"
                 onerror="this.src='/public/images/logo.png'">
            ${product.discount_price ? `
              <div class="absolute top-2 right-2 bg-red-500 text-white text-xs px-2 py-1 rounded">
                ${Math.round(((product.price - product.discount_price) / product.price) * 100)}% OFF
              </div>
            ` : ''}
          </div>
          
          <div class="p-4">
            <h3 class="font-semibold text-gray-900 mb-2 line-clamp-2">${product.name}</h3>
            <p class="text-sm text-gray-600 mb-3 line-clamp-2">${product.description || 'No description available'}</p>
            
            <div class="flex items-center justify-between mb-3">
              <div class="flex items-center gap-2">
                <span class="text-lg font-bold text-gray-900" data-base-price="${product.discount_price || product.price}">
                  ${product.currency || 'USD'} ${product.discount_price || product.price}
                </span>
                ${product.discount_price ? `
                  <span class="text-sm text-gray-500 line-through">${product.currency || 'USD'} ${product.price}</span>
                ` : ''}
              </div>
              <span class="text-xs text-gray-500">${product.category_name || 'Uncategorized'}</span>
            </div>
            
            <div class="flex items-center justify-between">
              <span class="text-xs text-gray-500">Stock: ${product.stock || 0}</span>
              <a href="/buyer/product-detail.html?id=${product.id}" 
                 class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition text-sm font-semibold">
                View Details
              </a>
            </div>
          </div>
        </div>
      `).join('');
    }

    function updateLoadMoreButton() {
      const loadMoreBtn = document.getElementById('load-more-btn');
      if (hasMoreProducts) {
        loadMoreBtn.classList.remove('hidden');
        loadMoreBtn.onclick = () => {
          currentPage++;
          fetchAndRenderProductGrid();
        };
      } else {
        loadMoreBtn.classList.add('hidden');
      }
    }

    // --- PRODUCT PRICE CONVERSION ---
    function updateProductPrices() {
      // This function will be called after currency change
      // It should update all product prices on the page
      if (!currencyRates[selectedCurrency]) return;
      const priceEls = document.querySelectorAll('[data-base-price]');
      priceEls.forEach(el => {
        const base = parseFloat(el.getAttribute('data-base-price'));
        if (!isNaN(base)) {
          const converted = (base * currencyRates[selectedCurrency]).toFixed(2);
          el.textContent = `${selectedCurrencySymbol} ${converted}`;
        }
      });
    }
    // --- SEARCH FUNCTIONALITY ---
    const searchInput = document.getElementById('search-input');
    const searchBtn = document.getElementById('search-btn');
    
    // Search functionality
    function performSearch() {
      const query = searchInput.value.trim();
      if (query) {
        // Redirect to search results page with query parameter
        window.location.href = `/public/search-results.html?q=${encodeURIComponent(query)}`;
      }
    }
    
    // Search button click handler
    searchBtn.addEventListener('click', performSearch);
    
    // Enter key handler for search input
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        performSearch();
      }
    });
    
    // --- ANIMATED PLACEHOLDER FOR SEARCH ---
    const searchPlaceholders = [
      'What are you looking for?',
      'Search electronics, phones...',
      'Find suppliers or manufacturers',
      'Try "solar panels" or "shoes"',
      'Discover trending deals',
      'Type product, brand, or category'
    ];
    let phIndex = 0, phChar = 0, phTyping = true;
    
    function animatePlaceholder() {
      if (!searchInput) return;
      const current = searchPlaceholders[phIndex];
      if (phTyping) {
        searchInput.setAttribute('placeholder', current.slice(0, phChar + 1));
        phChar++;
        if (phChar === current.length) {
          phTyping = false;
          setTimeout(animatePlaceholder, 1500); // Pause at full text
          return;
        }
        setTimeout(animatePlaceholder, 60);
      } else {
        searchInput.setAttribute('placeholder', current.slice(0, phChar - 1));
        phChar--;
        if (phChar === 0) {
          phTyping = true;
          phIndex = (phIndex + 1) % searchPlaceholders.length;
          setTimeout(animatePlaceholder, 400);
          return;
        }
        setTimeout(animatePlaceholder, 30);
      }
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize navigation
      BuyerNavigation.inject('navigation-container', {
        currentPage: 'home',
        userName: 'Buyer',
        cartCount: 0
      });

      setTimeout(animatePlaceholder, 1200);
      setupLocalMarketNavigation();
    });

    // Setup authentication-based navigation for local market links
    function setupLocalMarketNavigation() {
      const token = localStorage.getItem('token');
      const isAuthenticated = token && token !== 'null' && token !== '';
      
      // Determine the correct local market URL based on authentication
      const localMarketUrl = isAuthenticated ? '/grocery/local-market-home-signed.html' : '/grocery/local-market-home.html';
      
      // Update all local market links
      const localMarketLinks = [
        document.getElementById('local-market-link-desktop'),
        document.getElementById('local-market-link-mobile'),
        document.getElementById('local-market-link-banner')
      ];
      
      localMarketLinks.forEach(link => {
        if (link) {
          link.href = localMarketUrl;
          link.addEventListener('click', function(e) {
            e.preventDefault();
            window.location.href = localMarketUrl;
          });
        }
      });
    }
  </script>
</body>
</html> 
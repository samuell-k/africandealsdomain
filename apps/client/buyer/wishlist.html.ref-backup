<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Wishlist | ADD Physical Products</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    .glass { backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); }
    .fade-in { animation: fadeIn 0.6s ease-in-out; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
    .slide-in { animation: slideIn 0.5s ease-out; }
    @keyframes slideIn { from { transform: translateX(-100%); } to { transform: translateX(0); } }
    .bounce-in { animation: bounceIn 0.8s ease-out; }
    @keyframes bounceIn { 0% { transform: scale(0.3); opacity: 0; } 50% { transform: scale(1.05); } 70% { transform: scale(0.9); } 100% { transform: scale(1); opacity: 1; } }
    .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
    .product-card { transition: all 0.3s ease; }
    .product-card:hover { transform: translateY(-4px); box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1); }
    .heart-animation { animation: heartBeat 1.5s ease-in-out infinite; }
    @keyframes heartBeat { 0% { transform: scale(1); } 14% { transform: scale(1.3); } 28% { transform: scale(1); } 42% { transform: scale(1.3); } 70% { transform: scale(1); } }
  </style>
  <script src="/shared/auth-utils.js"></script>
  <script src="/shared/mode-switcher.js"></script>
  <script src="/shared/buyer-navigation.js"></script>
</head>
<body class="flex flex-col min-h-screen bg-gray-50">
  <!-- Navigation Container -->
  <div id="navigation-container"></div>
  
  <!-- Mode Switcher -->
  <div class="mode-switcher-container" data-mode-switch="">
    <!-- Mode switcher will be inserted here by JavaScript -->
  </div>

  <!-- Main Content -->
  <main class="flex-1 max-w-7xl mx-auto w-full px-4 py-8 md:py-12 fade-in">
    <!-- Page Header -->
    <div class="mb-8">
      <div class="flex items-center gap-4 mb-4">
        <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
          <i class="fas fa-heart text-2xl text-red-500 heart-animation"></i>
        </div>
        <div>
          <h1 class="text-4xl md:text-5xl font-extrabold text-[#0e2038]">My Wishlist</h1>
          <p class="text-xl text-gray-600">Your favorite products saved for later</p>
        </div>
      </div>
    </div>

    <!-- Stats Cards -->
    <section class="mb-8">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div class="bg-white rounded-2xl p-6 shadow-lg border border-gray-100 text-center">
          <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="fas fa-heart text-2xl text-red-500"></i>
          </div>
          <h3 class="text-2xl font-bold text-gray-800 mb-2" id="totalItems">0</h3>
          <p class="text-gray-600">Total Items</p>
        </div>

        <div class="bg-white rounded-2xl p-6 shadow-lg border border-gray-100 text-center">
          <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="fas fa-tags text-2xl text-blue-500"></i>
          </div>
          <h3 class="text-2xl font-bold text-gray-800 mb-2" id="totalValue">$0</h3>
          <p class="text-gray-600">Total Value</p>
        </div>

        <div class="bg-white rounded-2xl p-6 shadow-lg border border-gray-100 text-center">
          <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="fas fa-shopping-cart text-2xl text-green-500"></i>
          </div>
          <h3 class="text-2xl font-bold text-gray-800 mb-2" id="inStock">0</h3>
          <p class="text-gray-600">In Stock</p>
        </div>
      </div>
    </section>

    <!-- Actions Bar -->
    <section class="mb-8">
      <div class="bg-white rounded-2xl shadow-lg p-6">
        <div class="flex flex-col md:flex-row gap-4 items-center justify-between">
          <div class="flex flex-col sm:flex-row gap-4 flex-1">
            <div class="relative">
              <input type="text" id="searchWishlist" placeholder="Search wishlist..." 
                     class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none transition-colors">
              <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
            </div>
            
            <select id="sortWishlist" class="px-4 py-3 border border-gray-300 rounded-lg focus:border-red-500 focus:outline-none transition-colors">
              <option value="recent">Most Recent</option>
              <option value="price-low">Price: Low to High</option>
              <option value="price-high">Price: High to Low</option>
              <option value="name">Name: A to Z</option>
            </select>
          </div>
          
          <div class="flex gap-2">
            <button id="moveAllToCart" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold">
              <i class="fas fa-shopping-cart mr-2"></i>Move All to Cart
            </button>
            <button id="clearWishlist" class="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors font-semibold">
              <i class="fas fa-trash mr-2"></i>Clear All
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Wishlist Items -->
    <section class="mb-8">
      <div id="wishlistContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        <!-- Wishlist items will be dynamically loaded here -->
      </div>
      
      <!-- Loading State -->
      <div id="loadingState" class="hidden text-center py-12">
        <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>
        <p class="mt-4 text-gray-600">Loading your wishlist...</p>
      </div>
      
      <!-- Empty State -->
      <div id="emptyState" class="hidden text-center py-12">
        <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <i class="fas fa-heart text-3xl text-gray-400"></i>
        </div>
        <h3 class="text-xl font-semibold text-gray-800 mb-2">Your wishlist is empty</h3>
        <p class="text-gray-600 mb-6">Start adding products to your wishlist to see them here</p>
        <a href="/buyer/buyers-home.html" class="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors font-semibold">
          <i class="fas fa-shopping-bag mr-2"></i>Browse Products
        </a>
      </div>
    </section>
  </main>

  <!-- Footer -->
  <footer class="bg-white/90 border-t border-gray-200 mt-12 pt-8 pb-4 px-2 md:px-6">
    <div class="max-w-7xl mx-auto grid grid-cols-2 md:grid-cols-4 gap-8 text-sm">
      <div>
        <h3 class="font-bold text-gray-800 mb-2 flex items-center gap-1">Support</h3>
        <ul class="space-y-1">
          <li><a href="/public/faq.html" class="hover:underline flex items-center gap-1">Help Center & FAQ</a></li>
          <li><a href="/public/contact.html" class="hover:underline flex items-center gap-1">Contact Us</a></li>
          <li><a href="/buyer/support.html" class="hover:underline flex items-center gap-1">Live Chat</a></li>
          <li><a href="/buyer/orders.html" class="hover:underline flex items-center gap-1">Check Order Status</a></li>
        </ul>
      </div>
      <div>
        <h3 class="font-bold text-gray-800 mb-2 flex items-center gap-1">Business</h3>
        <ul class="space-y-1">
          <li><a href="/seller/add-product.html" class="hover:underline flex items-center gap-1">Start Selling</a></li>
          <li><a href="/seller/profile.html" class="hover:underline flex items-center gap-1">Become a Verified Supplier</a></li>
          <li><a href="/public/how-it-works.html" class="hover:underline flex items-center gap-1">How It Works</a></li>
        </ul>
      </div>
      <div>
        <h3 class="font-bold text-gray-800 mb-2 flex items-center gap-1">Legal & Policies</h3>
        <ul class="space-y-1">
          <li><a href="/public/privacy-policy.html" class="hover:underline flex items-center gap-1">Privacy Policy</a></li>
          <li><a href="/public/terms-and-conditions.html" class="hover:underline flex items-center gap-1">Terms & Conditions</a></li>
          <li><a href="/public/shipping-policy.html" class="hover:underline flex items-center gap-1">Shipping Policy</a></li>
          <li><a href="/public/returns-policy.html" class="hover:underline flex items-center gap-1">Returns Policy</a></li>
        </ul>
      </div>
      <div>
        <h3 class="font-bold text-gray-800 mb-2 flex items-center gap-1">About & Connect</h3>
        <ul class="space-y-1">
          <li><a href="/public/about.html" class="hover:underline flex items-center gap-1">About Us</a></li>
          <li><a href="/public/contact.html" class="hover:underline flex items-center gap-1">Contact</a></li>
          <li><span class="flex items-center gap-1">Rwanda, Kenya, Nigeria</span></li>
          <li><span class="flex items-center gap-1">Kigali, Nairobi, Lagos</span></li>
        </ul>
      </div>
    </div>
    <div class="text-center text-xs text-gray-500 mt-4">&copy; 2025 African Deals Domain. All rights reserved.</div>
  </footer>

  <!-- Load auth-check.js -->
  <script src="/public/auth-check.js"></script>

  <script>
    let currentUser = null;
    let wishlistItems = [];

    // Get current user from localStorage using the proper auth system
    function getCurrentUser() {
      const user = Auth.getUser();
      if (user && user.id) {
        return user;
      }
      return null;
    }

    // Load wishlist from API
    async function loadWishlist() {
      const container = document.getElementById('wishlistContainer');
      const loadingState = document.getElementById('loadingState');
      const emptyState = document.getElementById('emptyState');

      if (!currentUser) {
        currentUser = getCurrentUser();
        if (!currentUser) {
          window.location.href = '/auth/auth-buyer.html';
          return;
        }
      }

      // Show loading
      container.innerHTML = '';
      loadingState.classList.remove('hidden');
      emptyState.classList.add('hidden');

      try {
        const response = await fetch(`/api/wishlist?userId=${currentUser.id}`);
        const data = await response.json();

        if (data.success) {
          wishlistItems = data.wishlist;
          renderWishlist();
          updateStats();
        } else {
          throw new Error(data.error || 'Failed to load wishlist');
        }
      } catch (error) {
        console.error('Error loading wishlist:', error);
        showError('Failed to load wishlist. Please try again.');
      } finally {
        loadingState.classList.add('hidden');
      }
    }

    // Render wishlist items
    function renderWishlist() {
      const container = document.getElementById('wishlistContainer');
      const emptyState = document.getElementById('emptyState');
      const searchTerm = document.getElementById('searchWishlist').value.toLowerCase();
      const sortBy = document.getElementById('sortWishlist').value;

      let filteredItems = wishlistItems.filter(item => {
        return item.product_name.toLowerCase().includes(searchTerm) ||
               item.product_description.toLowerCase().includes(searchTerm) ||
               item.category_name.toLowerCase().includes(searchTerm);
      });

      // Sort items
      filteredItems.sort((a, b) => {
        switch (sortBy) {
          case 'price-low':
            return parseFloat(a.product_price) - parseFloat(b.product_price);
          case 'price-high':
            return parseFloat(b.product_price) - parseFloat(a.product_price);
          case 'name':
            return a.product_name.localeCompare(b.product_name);
          case 'recent':
          default:
            return new Date(b.created_at) - new Date(a.created_at);
        }
      });

      if (filteredItems.length === 0) {
        container.innerHTML = '';
        emptyState.classList.remove('hidden');
        return;
      }

      emptyState.classList.add('hidden');
      container.innerHTML = '';

      filteredItems.forEach(item => {
        const itemCard = createWishlistCard(item);
        container.appendChild(itemCard);
      });
    }

    // Create wishlist item card
    function createWishlistCard(item) {
      const div = document.createElement('div');
      div.className = 'product-card bg-white rounded-xl shadow-lg overflow-hidden border border-gray-100';
      
      const isInStock = item.stock_quantity > 0;
      const price = parseFloat(item.product_price).toFixed(2);
      const date = new Date(item.created_at).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });

      div.innerHTML = `
        <div class="relative">
          <img src="${item.product_image || '/public/images/placeholder.jpg'}" 
               alt="${item.product_name}" 
               class="w-full h-48 object-cover">
          <div class="absolute top-3 right-3">
            <button onclick="removeFromWishlist(${item.id})" 
                    class="bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors">
              <i class="fas fa-heart-broken"></i>
            </button>
          </div>
          ${!isInStock ? '<div class="absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded text-xs">Out of Stock</div>' : ''}
        </div>
        
        <div class="p-4">
          <div class="flex items-start justify-between mb-2">
            <h3 class="font-semibold text-gray-800 text-lg line-clamp-2">${item.product_name}</h3>
          </div>
          
          <p class="text-gray-600 text-sm mb-3 line-clamp-2">${item.product_description}</p>
          
          <div class="flex items-center gap-2 mb-3">
            <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">${item.category_name}</span>
            ${isInStock ? '<span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded">In Stock</span>' : '<span class="bg-red-100 text-red-800 text-xs px-2 py-1 rounded">Out of Stock</span>'}
          </div>
          
          <div class="flex items-center justify-between mb-3">
            <span class="text-2xl font-bold text-gray-800">$${price}</span>
            <span class="text-xs text-gray-500">Added ${date}</span>
          </div>
          
          <div class="flex gap-2">
            <button onclick="moveToCart(${item.product_id})" 
                    class="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors font-semibold ${!isInStock ? 'opacity-50 cursor-not-allowed' : ''}"
                    ${!isInStock ? 'disabled' : ''}>
              <i class="fas fa-shopping-cart mr-2"></i>Add to Cart
            </button>
            <button onclick="viewProduct(${item.product_id})" 
                    class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors font-semibold">
              <i class="fas fa-eye"></i>
            </button>
          </div>
          
          <div class="mt-3 text-xs text-gray-500">
            <span>Seller: ${item.seller_name}</span>
          </div>
        </div>
      `;
      
      return div;
    }

    // Remove item from wishlist
    async function removeFromWishlist(wishlistId) {
      if (!confirm('Are you sure you want to remove this item from your wishlist?')) {
        return;
      }

      try {
        const response = await fetch(`/api/wishlist/${wishlistId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ user_id: currentUser.id })
        });

        const data = await response.json();

        if (data.success) {
          wishlistItems = wishlistItems.filter(item => item.id !== wishlistId);
          renderWishlist();
          updateStats();
          showSuccess('Item removed from wishlist');
        } else {
          throw new Error(data.error || 'Failed to remove item');
        }
      } catch (error) {
        console.error('Error removing item:', error);
        showError('Failed to remove item from wishlist.');
      }
    }

    // Move item to cart
    async function moveToCart(productId) {
      try {
        const response = await fetch(`/api/wishlist/move-to-cart/${productId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ user_id: currentUser.id, quantity: 1 })
        });

        const data = await response.json();

        if (data.success) {
          wishlistItems = wishlistItems.filter(item => item.product_id !== productId);
          renderWishlist();
          updateStats();
          showSuccess('Item moved to cart successfully');
        } else {
          throw new Error(data.error || 'Failed to move item to cart');
        }
      } catch (error) {
        console.error('Error moving to cart:', error);
        showError('Failed to move item to cart.');
      }
    }

    // View product details
    function viewProduct(productId) {
      window.location.href = `/buyer/product-detail.html?id=${productId}`;
    }

    // Move all items to cart
    async function moveAllToCart() {
      if (wishlistItems.length === 0) {
        showError('Your wishlist is empty');
        return;
      }

      if (!confirm(`Are you sure you want to move all ${wishlistItems.length} items to your cart?`)) {
        return;
      }

      try {
        let successCount = 0;
        for (const item of wishlistItems) {
          if (item.stock_quantity > 0) {
            const response = await fetch(`/api/wishlist/move-to-cart/${item.product_id}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ user_id: currentUser.id, quantity: 1 })
            });

            const data = await response.json();
            if (data.success) {
              successCount++;
            }
          }
        }

        if (successCount > 0) {
          await loadWishlist(); // Reload to update the list
          showSuccess(`${successCount} items moved to cart successfully`);
        } else {
          showError('No items could be moved to cart');
        }
      } catch (error) {
        console.error('Error moving all to cart:', error);
        showError('Failed to move items to cart.');
      }
    }

    // Clear all wishlist items
    async function clearWishlist() {
      if (wishlistItems.length === 0) {
        showError('Your wishlist is already empty');
        return;
      }

      if (!confirm(`Are you sure you want to remove all ${wishlistItems.length} items from your wishlist?`)) {
        return;
      }

      try {
        let successCount = 0;
        for (const item of wishlistItems) {
          const response = await fetch(`/api/wishlist/${item.id}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ user_id: currentUser.id })
          });

          const data = await response.json();
          if (data.success) {
            successCount++;
          }
        }

        if (successCount > 0) {
          wishlistItems = [];
          renderWishlist();
          updateStats();
          showSuccess(`${successCount} items removed from wishlist`);
        } else {
          showError('No items could be removed');
        }
      } catch (error) {
        console.error('Error clearing wishlist:', error);
        showError('Failed to clear wishlist.');
      }
    }

    // Update stats
    function updateStats() {
      const total = wishlistItems.length;
      const totalValue = wishlistItems.reduce((sum, item) => sum + parseFloat(item.product_price), 0);
      const inStock = wishlistItems.filter(item => item.stock_quantity > 0).length;

      document.getElementById('totalItems').textContent = total;
      document.getElementById('totalValue').textContent = `$${totalValue.toFixed(2)}`;
      document.getElementById('inStock').textContent = inStock;
    }

    // Show success message
    function showSuccess(message) {
      Auth.showToast(message, 'success');
    }

    // Show error message
    function showError(message) {
      Auth.showToast(message, 'error');
    }

    // Event listeners
    document.getElementById('searchWishlist').addEventListener('input', renderWishlist);
    document.getElementById('sortWishlist').addEventListener('change', renderWishlist);
    document.getElementById('moveAllToCart').addEventListener('click', moveAllToCart);
    document.getElementById('clearWishlist').addEventListener('click', clearWishlist);

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize navigation
      BuyerNavigation.inject('navigation-container', {
        currentPage: 'wishlist',
        userName: 'Buyer',
        cartCount: 0
      });

      // Check authentication first
      Auth.requireAuth('buyer').then(isAuthenticated => {
        if (isAuthenticated) {
          loadWishlist();
        }
      });
    });
  </script>
</body>
</html>

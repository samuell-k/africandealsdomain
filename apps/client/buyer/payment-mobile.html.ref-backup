<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Minimal Navigation System -->
  <script src="/shared/minimal-navigation-injector.js"></script>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Payment | African Deals Domain</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/shared/router.js"></script>
    <script src="/shared/mode-manager.js"></script>
<script src="/shared/navigation.js"></script>
  <link rel="icon" href="/public/images/logo.png">
  <script src="/shared/auth-helper.js"></script>
  <style>
    /* Mobile-first responsive design */
    @media (max-width: 640px) {
      .mobile-stack { flex-direction: column; }
      .mobile-full { width: 100%; }
      .mobile-text-sm { font-size: 0.875rem; }
      .mobile-p-4 { padding: 1rem; }
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen" data-page-type="buyer">
  
  <!-- Navigation preserved - each page has unique navigation -->

  
  <!-- Navigation preserved - each page has unique navigation -->

  
  
  
  <!-- Mobile Header -->
  <header class="bg-white shadow-sm border-b border-gray-200 fixed top-0 left-0 right-0 z-40">
    <div class="px-4 py-3">
      <div class="flex items-center justify-between">
        <button onclick="history.back()" class="p-2 -ml-2 text-gray-600 hover:text-gray-900">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        <h1 class="text-lg font-semibold text-gray-900">Payment</h1>
        <div class="w-10"></div>
      </div>
    </div>
  </header>

  <main class="pt-16 pb-8 px-4">
    <!-- Order Summary Card -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-4">
      <div class="p-4 border-b border-gray-100">
        <h2 class="font-semibold text-gray-900">Order Summary</h2>
      </div>
      <div id="mobile-order-summary" class="p-4">
        <!-- Order details will be loaded here -->
      </div>
    </div>

    <!-- Payment Methods Card -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-4">
      <div class="p-4 border-b border-gray-100">
        <h2 class="font-semibold text-gray-900">Payment Method</h2>
      </div>
      <div id="mobile-payment-methods" class="p-4">
        <!-- Payment methods will be loaded here -->
      </div>
    </div>

    <!-- Manual Payment Card -->
    <div id="mobile-manual-payment" class="bg-white rounded-lg shadow-sm border border-gray-200 mb-4 hidden">
      <div class="p-4 border-b border-gray-100">
        <h2 class="font-semibold text-gray-900">Manual Payment</h2>
      </div>
      <div class="p-4">
        <!-- Mobile payment instructions -->
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
          <h3 class="font-medium text-blue-900 mb-3 text-sm">Payment Instructions</h3>
          <div class="space-y-3 text-blue-800 text-sm">
            <div>
              <p class="font-medium">MTN MoMo (Rwanda):</p>
              <p class="font-mono bg-blue-100 p-2 rounded text-xs mt-1">*182*1*1*{PHONE}#</p>
            </div>
            <div>
              <p class="font-medium">MoMo Pay:</p>
              <p class="font-mono bg-blue-100 p-2 rounded text-xs mt-1">*182*8*1*{CODE}#</p>
            </div>
            <p class="text-xs"><strong>Payment Name:</strong> African Deals Domain</p>
          </div>
        </div>

        <form id="mobile-manual-form" class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Sender Name *</label>
            <input type="text" name="sender_name" required 
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Phone Number *</label>
            <input type="tel" name="sender_phone" required 
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Transaction ID *</label>
            <input type="text" name="transaction_id" required 
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Payment Screenshot *</label>
            <input type="file" name="screenshot" accept="image/*" required 
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm">
            <p class="text-xs text-gray-500 mt-1">Max 5MB</p>
          </div>

          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
            <div class="flex">
              <svg class="h-4 w-4 text-yellow-400 mt-0.5 mr-2 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
              <div>
                <h3 class="text-xs font-medium text-yellow-800">Manual Verification</h3>
                <p class="text-xs text-yellow-700 mt-1">Payment will be verified within 1-24 hours. You'll receive email confirmation.</p>
              </div>
            </div>
          </div>

          <button type="submit" class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium text-sm">
            Submit Payment Proof
          </button>
        </form>
      </div>
    </div>

    <!-- Coming Soon Card -->
    <div id="mobile-coming-soon" class="bg-white rounded-lg shadow-sm border border-gray-200 mb-4 text-center p-6 hidden">
      <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
      </svg>
      <h2 class="text-lg font-bold text-gray-900 mb-2">Payment Methods Coming Soon</h2>
      <p class="text-gray-600 text-sm mb-4">We're adding secure payment options. Use manual payment for now.</p>
      <button id="mobile-show-manual" class="bg-blue-600 text-white px-6 py-2 rounded-lg text-sm font-medium">
        Use Manual Payment
      </button>
    </div>
  </main>

  <!-- Mobile Loading Overlay -->
  <div id="mobile-loading" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen">
      <div class="bg-white rounded-lg p-6 text-center mx-4">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-3"></div>
        <p class="text-gray-600 text-sm">Processing...</p>
      </div>
    </div>
  </div>

  <script>
    // Mobile-specific payment handling
    let mobileOrder = null;
    let mobileTransaction = null;

    document.addEventListener('DOMContentLoaded', function() {
      // Detect if mobile and redirect if needed
      if (window.innerWidth >= 768) {
        window.location.href = window.location.href.replace('payment-mobile.html', 'payment-new.html');
        return;
      }
      
      loadMobileOrderDetails();
      loadMobilePaymentMethods();
      setupMobileEventListeners();
    });

    function setupMobileEventListeners() {
      document.getElementById('mobile-manual-form').addEventListener('submit', handleMobileManualPayment);
      document.getElementById('mobile-show-manual').addEventListener('click', showMobileManualPayment);
    }

    async function loadMobileOrderDetails() {
      try {
        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('orderId');
        
        if (!orderId) {
          showMobileNotification('No order ID provided', 'error');
          history.back();
          return;
        }

        const pendingOrder = localStorage.getItem('pendingOrder');
        if (pendingOrder) {
          mobileOrder = JSON.parse(pendingOrder);
          renderMobileOrderSummary(mobileOrder);
          await createMobilePaymentTransaction(orderId);
        }
      } catch (error) {
        console.error('Error loading mobile order:', error);
        showMobileNotification('Failed to load order', 'error');
      }
    }

    async function createMobilePaymentTransaction(orderId) {
      try {
        const data = await window.authHelper.post('/api/payment-transactions', {
          order_id: orderId,
          amount: mobileOrder.total_amount,
          currency: mobileOrder.currency || 'USD'
        });
        mobileTransaction = data.transaction;
      } catch (error) {
        console.error('Error creating mobile transaction:', error);
      }
    }

    function renderMobileOrderSummary(order) {
      const container = document.getElementById('mobile-order-summary');
      container.innerHTML = `
        <div class="space-y-3">
          <div class="flex justify-between text-sm">
            <span class="text-gray-600">Order #</span>
            <span class="font-medium">${order.order_number || order.id}</span>
          </div>
          <div class="flex justify-between text-lg font-semibold border-t pt-3">
            <span>Total</span>
            <span class="text-blue-600">$${order.total_amount}</span>
          </div>
        </div>
      `;
    }

    async function loadMobilePaymentMethods() {
      try {
        const data = await window.authHelper.get('/api/payment-methods?active_only=true');
        
        if (data.payment_methods.length === 0) {
          document.getElementById('mobile-coming-soon').classList.remove('hidden');
        } else {
          renderMobilePaymentMethods(data.payment_methods);
        }
      } catch (error) {
        console.error('Error loading mobile payment methods:', error);
        document.getElementById('mobile-coming-soon').classList.remove('hidden');
      }
    }

    function renderMobilePaymentMethods(methods) {
      const container = document.getElementById('mobile-payment-methods');
      
      container.innerHTML = `
        <div class="space-y-3">
          ${methods.map(method => `
            <label class="flex items-center p-3 border border-gray-200 rounded-lg cursor-pointer hover:border-blue-300">
              <input type="radio" name="mobile_payment_method" value="${method.id}" class="text-blue-600 mr-3">
              <div class="flex items-center flex-1">
                ${method.logo_url ? `
                  <img src="${method.logo_url}" loading="lazy" alt="${method.name}" class="h-6 w-6 object-contain mr-3">
                ` : `
                  <div class="h-6 w-6 bg-gray-200 rounded mr-3 flex items-center justify-center">
                    <span class="text-gray-500 text-xs">${method.name.charAt(0)}</span>
                  </div>
                `}
                <div>
                  <p class="font-medium text-sm">${method.name}</p>
                  ${method.description ? `<p class="text-xs text-gray-600">${method.description}</p>` : ''}
                </div>
              </div>
            </label>
          `).join('')}
          
          <button id="mobile-proceed-btn" class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium text-sm mt-4 disabled:bg-gray-400" disabled>
            Proceed with Payment
          </button>
          
          <button id="mobile-manual-btn" class="w-full text-blue-600 text-sm underline mt-2">
            Use manual payment instead
          </button>
        </div>
      `;

      // Add mobile event listeners
      const radios = container.querySelectorAll('input[type="radio"]');
      const proceedBtn = document.getElementById('mobile-proceed-btn');
      const manualBtn = document.getElementById('mobile-manual-btn');

      radios.forEach(radio => {
        radio.addEventListener('change', () => {
          proceedBtn.disabled = false;
        });
      });

      proceedBtn.addEventListener('click', () => {
        showMobileNotification('Automatic payment not yet available. Please use manual payment.', 'info');
        showMobileManualPayment();
      });

      manualBtn.addEventListener('click', showMobileManualPayment);
    }

    function showMobileManualPayment() {
      document.getElementById('mobile-coming-soon').classList.add('hidden');
      document.getElementById('mobile-payment-methods').parentElement.classList.add('hidden');
      document.getElementById('mobile-manual-payment').classList.remove('hidden');
    }

    async function handleMobileManualPayment(e) {
      e.preventDefault();
      
      if (!mobileTransaction) {
        showMobileNotification('Payment not initialized', 'error');
        return;
      }

      const formData = new FormData(e.target);
      const loading = document.getElementById('mobile-loading');
      
      try {
        loading.classList.remove('hidden');
        
        const response = await fetch(`/api/payment-transactions/${mobileTransaction.id}/manual-payment`, {
          method: 'POST',
          headers: window.authHelper.getAuthHeaders(),
          body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
          showMobileNotification('Payment submitted! Awaiting confirmation.', 'success');
          localStorage.removeItem('pendingOrder');
          
          setTimeout(() => {
            window.location.href = '/buyer/orders.html';
          }, 2000);
        } else {
          showMobileNotification(data.error || 'Submission failed', 'error');
        }
      } catch (error) {
        console.error('Mobile payment error:', error);
        showMobileNotification('Submission failed', 'error');
      } finally {
        loading.classList.add('hidden');
      }
    }

    function showMobileNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-20 left-4 right-4 z-50 px-4 py-3 rounded-lg text-white text-sm ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 'bg-blue-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 4000);
    }
  </script>

  <!-- Navigation utilities for this page -->
  <script>
    // Page-specific navigation setup
    document.addEventListener('DOMContentLoaded', function() {
      // Set page type and mode
      document.body.setAttribute('data-page-type', 'buyer');
      
      
      
      // Add navigation helpers to existing elements
      enhanceExistingNavigation();
      
      // Setup page-specific navigation
      setupPageNavigation();
    });
    
    function enhanceExistingNavigation() {
      // Add data-route attributes to links that don't have them
      const links = document.querySelectorAll('a[href]:not([data-route])');
      links.forEach(link => {
        const href = link.getAttribute('href');
        if (href && !href.startsWith('http') && !href.startsWith('mailto:') && !href.startsWith('tel:')) {
          const route = getRouteForHref(href);
          if (route) {
            link.setAttribute('data-route', route);
          }
        }
      });
      
      // Add journey actions to buttons
      const buttons = document.querySelectorAll('button, .btn, [role="button"]');
      buttons.forEach(button => {
        const text = button.textContent.toLowerCase();
        
        if (text.includes('add') && text.includes('cart')) {
          button.setAttribute('data-journey-action', 'add-to-cart');
        } else if (text.includes('checkout')) {
          button.setAttribute('data-journey-action', 'proceed-checkout');
        } else if (text.includes('place') && text.includes('order')) {
          button.setAttribute('data-journey-action', 'complete-payment');
        } else if (text.includes('login') || text.includes('sign in')) {
          button.setAttribute('data-quick-nav', 'login');
        } else if (text.includes('logout') || text.includes('sign out')) {
          button.setAttribute('data-quick-nav', 'logout');
        }
      });
    }
    
    function setupPageNavigation() {
      // Page-specific navigation setup
      const pageType = 'buyer';
      
      // Add mode indicators if they exist
      const modeIndicators = document.querySelectorAll('.mode-indicator');
      modeIndicators.forEach(indicator => {
        const currentMode = window.navUtils ? window.navUtils.getCurrentMode() : 'marketplace';
        indicator.className = `mode-indicator mode-${currentMode}`;
        indicator.textContent = currentMode === 'marketplace' ? 'Marketplace' : 'Local Market';
      });
      
      // Add quick navigation buttons if they exist
      const homeButtons = document.querySelectorAll('[data-nav="home"], .home-btn');
      homeButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'home'));
      
      const backButtons = document.querySelectorAll('[data-nav="back"], .back-btn');
      backButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'back'));
      
      const dashboardButtons = document.querySelectorAll('[data-nav="dashboard"], .dashboard-btn');
      dashboardButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'dashboard'));
    }
    
    function getRouteForHref(href) {
      // Basic route mapping
      const routeMap = {
        '/': 'home',
        '/public/index.html': 'home',
        '/public/about.html': 'public.about',
        '/public/contact.html': 'public.contact',
        '/public/product-list.html': 'public.product-list',
        '/public/product-detail.html': 'public.product-detail',
        '/buyer/buyers-home.html': 'buyer.dashboard',
        '/buyer/cart.html': 'buyer.cart',
        '/buyer/checkout.html': 'buyer.checkout',
        '/buyer/orders.html': 'buyer.orders',
        '/seller/dashboard.html': 'seller.dashboard',
        '/seller/add-product.html': 'seller.add-product',
        '/agent/dashboard.html': 'agent.dashboard',
        '/admin/dashboard.html': 'admin.dashboard',
        '/auth/auth-buyer.html': 'auth.login',
        '/auth/auth-seller.html': 'auth.login-seller',
        '/auth/auth-agent.html': 'auth.login-agent',
        '/grocery/local-market-home.html': 'local-market.home',
        '/grocery/cart.html': 'local-market.cart'
      };
      
      return routeMap[href] || null;
    }
    
    // Wait for flexible navigation system to be ready
    window.addEventListener('flexibleNavigationReady', function() {
      console.log('✅ Flexible navigation ready on buyer\payment-mobile.html');
      
      // Start appropriate journey if needed
      
    });
  </script>

</body>
</html>
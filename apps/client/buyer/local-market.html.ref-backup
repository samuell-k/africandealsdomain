<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Minimal Navigation System -->
  <script src="/shared/minimal-navigation-injector.js">
        // Delivery method selection
        let selectedDeliveryMethod = null;
        let deliveryFee = 0;
        
        function selectDeliveryMethod(method) {
            selectedDeliveryMethod = method;
            document.querySelector(`input[value="${method}"]`).checked = true;
            
            const deliveryDetails = document.getElementById('delivery-details');
            const pickupDetails = document.getElementById('pickup-details');
            const homeDetails = document.getElementById('home-details');
            
            deliveryDetails.classList.remove('hidden');
            
            if (method === 'pickup') {
                pickupDetails.classList.remove('hidden');
                homeDetails.classList.add('hidden');
                loadPickupLocations();
                deliveryFee = 0;
            } else if (method === 'home') {
                homeDetails.classList.remove('hidden');
                pickupDetails.classList.add('hidden');
                calculateDeliveryFee();
            }
        }
        
        function cancelDeliverySelection() {
            document.getElementById('delivery-method-selection').classList.add('hidden');
            selectedDeliveryMethod = null;
            deliveryFee = 0;
        }
        
        function confirmDeliveryMethod() {
            if (!selectedDeliveryMethod) {
                alert('Please select a delivery method');
                return;
            }
            
            if (selectedDeliveryMethod === 'pickup' && !document.getElementById('pickup-location').value) {
                alert('Please select a pickup location');
                return;
            }
            
            if (selectedDeliveryMethod === 'home' && !document.getElementById('delivery-address').value) {
                alert('Please enter a delivery address');
                return;
            }
            
            document.getElementById('delivery-method-selection').classList.add('hidden');
            updateCheckoutSummary();
        }
        
        async function loadPickupLocations() {
            try {
                const response = await fetch('/api/pickup-sites');
                if (response.ok) {
                    const data = await response.json();
                    const select = document.getElementById('pickup-location');
                    
                    select.innerHTML = '<option value="">Choose pickup location...</option>';
                    data.sites.forEach(site => {
                        select.innerHTML += `<option value="${site.id}">${site.name} - ${site.address}</option>`;
                    });
                }
            } catch (error) {
                console.error('Error loading pickup locations:', error);
            }
        }
        
        async function calculateDeliveryFee() {
            const address = document.getElementById('delivery-address').value;
            const timeWindow = document.getElementById('delivery-time').value;
            
            if (!address) {
                document.getElementById('delivery-fee').textContent = 'Enter address first';
                return;
            }
            
            try {
                const response = await fetch('/api/local-market/calculate-delivery', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        address: address,
                        timeWindow: timeWindow,
                        items: cart
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    deliveryFee = data.fee;
                    document.getElementById('delivery-fee').textContent = `${deliveryFee.toFixed(2)}`;
                } else {
                    document.getElementById('delivery-fee').textContent = 'Unable to calculate';
                }
            } catch (error) {
                console.error('Error calculating delivery fee:', error);
                document.getElementById('delivery-fee').textContent = 'Unable to calculate';
            }
        }
        
        function updateCheckoutSummary() {
            const checkoutSection = document.getElementById('checkout-section');
            if (checkoutSection) {
                const deliveryInfo = document.createElement('div');
                deliveryInfo.className = 'mb-4 p-3 bg-blue-50 rounded-lg';
                deliveryInfo.innerHTML = `
                    <h4 class="font-semibold text-blue-900">Delivery Method: ${selectedDeliveryMethod === 'pickup' ? 'Pickup' : 'Home Delivery'}</h4>
                    <p class="text-blue-700">Fee: ${deliveryFee.toFixed(2)}</p>
                `;
                
                const existingInfo = checkoutSection.querySelector('.delivery-info');
                if (existingInfo) {
                    existingInfo.remove();
                }
                
                deliveryInfo.classList.add('delivery-info');
                checkoutSection.insertBefore(deliveryInfo, checkoutSection.firstChild);
            }
        }
        
        // Add event listeners for delivery address and time changes
        document.addEventListener('DOMContentLoaded', function() {
            const deliveryAddress = document.getElementById('delivery-address');
            const deliveryTime = document.getElementById('delivery-time');
            
            if (deliveryAddress) {
                deliveryAddress.addEventListener('blur', calculateDeliveryFee);
            }
            
            if (deliveryTime) {
                deliveryTime.addEventListener('change', calculateDeliveryFee);
            }
        });
    </script>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Local Market - Fast Deliveries | ADD Physical Products</title>
  <script src="../shared/auth-helper.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/shared/router.js"></script>
    <script src="/shared/mode-manager.js"></script>
<script src="/shared/navigation.js"></script>
  <link rel="icon" href="/public/images/logo.png">
  
  <!-- Leaflet CSS for maps -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  
  <style>
    .glass { backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); }
    .fade-in { animation: fadeIn 0.6s ease-in-out; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
    .slide-in { animation: slideIn 0.5s ease-out; }
    @keyframes slideIn { from { transform: translateX(-100%); } to { transform: translateX(0); } }
    .bounce-in { animation: bounceIn 0.8s ease-out; }
    @keyframes bounceIn { 0% { transform: scale(0.3); opacity: 0; } 50% { transform: scale(1.05); } 70% { transform: scale(0.9); } 100% { transform: scale(1); opacity: 1; } }
    .gradient-bg { background: linear-gradient(135deg, #10b981 0%, #059669 100%); }
    .product-card { transition: all 0.3s ease; }
    .product-card:hover { transform: translateY(-4px); box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1); }
    .category-card { transition: all 0.3s ease; }
    .category-card:hover { transform: scale(1.05); }
    .cart-badge { animation: pulse 2s infinite; }
    @keyframes pulse { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.1); } }
    .sticky-cart { position: sticky; top: 100px; }
    #map { height: 300px; width: 100%; }
  </style>
</head>
<body class="flex flex-col min-h-screen bg-gray-50" data-page-type="buyer">
  
  <!-- Navigation preserved - each page has unique navigation -->

  
  <!-- Navigation preserved - each page has unique navigation -->

  
  
  
  <!-- Header Component -->
  <div id="buyer-header"></div>
  
  <script src="shared-components.js"></script>

  <!-- Main Content -->
  <main class="flex-1 max-w-7xl mx-auto w-full px-4 py-8 md:py-12 fade-in pt-16">
    <!-- Page Header -->
    <div class="text-center mb-8">
      <div class="inline-flex items-center gap-3 mb-4">
        <span class="text-4xl">ðŸ›’</span>
        <h1 class="text-4xl md:text-5xl font-extrabold text-[#0e2038]">Local Market</h1>
        <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-semibold">Fast Delivery</span>
      </div>
      <p class="text-xl text-gray-600 mb-6">Fresh groceries and local products delivered to your door</p>
      
      <!-- Quick Stats -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-2xl mx-auto">
        <div class="bg-white rounded-lg p-4 shadow-sm">
          <div class="text-2xl font-bold text-green-600">15min</div>
          <div class="text-sm text-gray-600">Avg Delivery</div>
        </div>
        <div class="bg-white rounded-lg p-4 shadow-sm">
          <div class="text-2xl font-bold text-blue-600">500+</div>
          <div class="text-sm text-gray-600">Products</div>
        </div>
        <div class="bg-white rounded-lg p-4 shadow-sm">
          <div class="text-2xl font-bold text-purple-600">50+</div>
          <div class="text-sm text-gray-600">Local Sellers</div>
        </div>
        <div class="bg-white rounded-lg p-4 shadow-sm">
          <div class="text-2xl font-bold text-orange-600">24/7</div>
          <div class="text-sm text-gray-600">Available</div>
        </div>
      </div>
    </div>

    <!-- Location Selection -->
    <section class="mb-8">
      <div class="bg-white rounded-2xl shadow-lg p-6">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
          <h3 class="text-lg font-semibold">Delivery Location</h3>
        </div>
        
        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-700 mb-2">Enter your address</label>
              <input type="text" id="deliveryAddress" placeholder="Street, District, City..." 
                     class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none transition-colors">
            </div>
            
            <div class="flex gap-4">
              <button id="useCurrentLocation" class="flex-1 bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold">
                <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                </svg>
                Use Current Location
              </button>
              <button id="confirmLocation" class="flex-1 bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors font-semibold">
                Confirm Location
              </button>
            </div>
          </div>
          
          <div>
            <div id="map" class="rounded-lg border border-gray-300"></div>
          </div>
        </div>
        
        <div id="locationStatus" class="mt-4 p-3 rounded-lg bg-gray-100 text-gray-600 text-sm hidden">
          <span id="locationText">Please set your delivery location to see available products</span>
        </div>
      </div>
    </section>

    <!-- Categories Section -->
    <section class="mb-8">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-900">Shop by Category</h2>
        <button id="viewAllCategories" class="text-green-600 hover:text-green-700 font-semibold">View All â†’</button>
      </div>
      
      <div id="categoriesGrid" class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4">
        <!-- Categories will be loaded here -->
        <div class="animate-pulse">
          <div class="bg-gray-200 h-24 rounded-lg mb-2"></div>
          <div class="h-4 bg-gray-200 rounded"></div>
        </div>
        <div class="animate-pulse">
          <div class="bg-gray-200 h-24 rounded-lg mb-2"></div>
          <div class="h-4 bg-gray-200 rounded"></div>
        </div>
        <div class="animate-pulse">
          <div class="bg-gray-200 h-24 rounded-lg mb-2"></div>
          <div class="h-4 bg-gray-200 rounded"></div>
        </div>
        <div class="animate-pulse">
          <div class="bg-gray-200 h-24 rounded-lg mb-2"></div>
          <div class="h-4 bg-gray-200 rounded"></div>
        </div>
        <div class="animate-pulse">
          <div class="bg-gray-200 h-24 rounded-lg mb-2"></div>
          <div class="h-4 bg-gray-200 rounded"></div>
        </div>
      </div>
    </section>

    <!-- Filters and Search -->
    <section class="mb-8">
      <div class="bg-white rounded-2xl shadow-lg p-6">
        <div class="flex flex-col lg:flex-row gap-4 items-center justify-between">
          <div class="flex flex-col sm:flex-row gap-4 flex-1">
            <div class="relative flex-1">
              <input type="text" id="searchProducts" placeholder="Search for products..." 
                     class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none transition-colors">
              <svg class="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            
            <select id="categoryFilter" class="px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none transition-colors">
              <option value="">All Categories</option>
            </select>
            
            <select id="unitTypeFilter" class="px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none transition-colors">
              <option value="">All Units</option>
              <option value="kg">Per Kg</option>
              <option value="lt">Per Liter</option>
              <option value="piece">Per Piece</option>
              <option value="pack">Per Pack</option>
            </select>
            
            <select id="sortBy" class="px-4 py-3 border border-gray-300 rounded-lg focus:border-green-500 focus:outline-none transition-colors">
              <option value="newest">Newest First</option>
              <option value="price_low">Price: Low to High</option>
              <option value="price_high">Price: High to Low</option>
              <option value="rating">Highest Rated</option>
            </select>
          </div>
          
          <div class="flex gap-2">
            <button id="clearFilters" class="px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              Clear Filters
            </button>
            <button id="applyFilters" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold">
              Apply Filters
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Main Content Grid -->
    <div class="grid lg:grid-cols-4 gap-8">
      <!-- Products Section -->
      <div class="lg:col-span-3">
        <!-- Products Grid -->
        <div id="productsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          <!-- Products will be loaded here -->
        </div>
        
        <!-- Loading State -->
        <div id="loadingState" class="text-center py-12">
          <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
          <p class="mt-4 text-gray-600">Loading fresh products...</p>
        </div>
        
        <!-- Empty State -->
        <div id="emptyState" class="hidden text-center py-12">
          <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No products found</h3>
          <p class="text-gray-600 mb-6">Try adjusting your filters or search terms</p>
          <button id="resetSearch" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold">
            Reset Search
          </button>
        </div>
        
        <!-- Pagination -->
        <div id="pagination" class="flex items-center justify-center gap-2 mt-8">
          <!-- Pagination will be dynamically generated -->
        </div>
      </div>

      <!-- Cart Sidebar -->
      <div class="lg:col-span-1">
        <div class="sticky-cart">
          <div class="bg-white rounded-2xl shadow-lg p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-semibold">Your Cart</h3>
              <div class="relative">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2-2v4.01"></path>
                </svg>
                <span id="cartBadge" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center cart-badge hidden">0</span>
              </div>
            </div>
            
            <div id="cartItems" class="space-y-3 mb-4">
              <div class="text-center text-gray-500 py-8">
                <svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2-2v4.01"></path>
                </svg>
                <p>Your cart is empty</p>
                <p class="text-sm">Add some fresh products!</p>
              </div>
            </div>
            
            <!-- Cart Summary -->
            <div id="cartSummary" class="hidden border-t pt-4">
              <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                  <span>Subtotal:</span>
                  <span id="subtotal">0 FRw</span>
                </div>
                <div class="flex justify-between">
                  <span>Platform Fee (1%):</span>
                  <span id="platformFee">0 FRw</span>
                </div>
                <div class="flex justify-between">
                  <span>Delivery Fee:</span>
                  <span id="deliveryFee">Calculating...</span>
                </div>
                <div class="flex justify-between font-semibold text-lg border-t pt-2">
                  <span>Total:</span>
                  <span id="totalAmount">0 FRw</span>
                </div>
              </div>
              
              <button id="proceedToCheckout" class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold mt-4" data-journey-action="proceedToCheckout">
                Proceed to Checkout
              </button>
              
              <button id="clearCart" class="w-full border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors mt-2">
                Clear Cart
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Footer -->
  <footer class="bg-white/90 border-t border-gray-200 mt-12 pt-8 pb-4 px-2 md:px-6">
    <div class="max-w-7xl mx-auto grid grid-cols-2 md:grid-cols-4 gap-8 text-sm">
      <div>
        <h3 class="font-bold text-gray-800 mb-2">Local Market</h3>
        <ul class="space-y-1">
          <li><a href="/buyer/local-market.html" class="hover:underline">Browse Products</a></li>
          <li><a href="/buyer/grocery-orders.html" class="hover:underline">My Grocery Orders</a></li>
          <li><a href="/buyer/delivery-tracking.html" class="hover:underline">Track Delivery</a></li>
        </ul>
      </div>
      <div>
        <h3 class="font-bold text-gray-800 mb-2">Support</h3>
        <ul class="space-y-1">
          <li><a href="/public/faq.html" class="hover:underline" data-route="public.faq">Help Center</a></li>
          <li><a href="/public/contact.html" d data-route="public.contact"ata-route="public.contact" class="hover:underline">Contact Us</a></li>
          <li><a href="/buyer/support.html" class="hover:underline" data-route="buyer.support">Live Chat</a></li>
        </ul>
      </div>
      <div>
        <h3 class="font-bold text-gray-800 mb-2">Business</h3>
        <ul class="space-y-1">
          <li><a href="/seller/grocery-products.html" class="hover:underline">Sell Groceries</a></li>
          <li><a href="/agent/delivery-jobs.html" class="hover:underline">Become Delivery Agent</a></li>
        </ul>
      </div>
      <div>
        <h3 class="font-bold text-gray-800 mb-2">About</h3>
        <ul class="space-y-1">
          <li><a href="/public/about.html" d data-route="public.about"ata-route="public.about" class="hover:underline">About Us</a></li>
          <li><a href="/public/privacy-policy.html" class="hover:underline" data-route="public.privacy-policy">Privacy Policy</a></li>
          <li><span>Rwanda, Kenya, Nigeria</span></li>
        </ul>
      </div>
    </div>
    <div class="text-center text-xs text-gray-500 mt-4">&copy; 2025 African Deals Domain. All rights reserved.</div>
  </footer>

  <!-- Product Detail Modal -->
  <div id="productModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-start mb-4">
            <h3 id="modalProductName" class="text-xl font-bold"></h3>
            <button id="closeModal" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <img id="modalProductImage" src="" alt="" class="w-full h-64 object-cover rounded-lg">
            </div>
            
            <div>
              <div class="mb-4">
                <div class="flex items-center gap-2 mb-2">
                  <span id="modalProductPrice" class="text-2xl font-bold text-green-600"></span>
                  <span id="modalProductUnit" class="text-gray-600"></span>
                </div>
                <div class="text-sm text-gray-600">
                  <span id="modalProductStock"></span> available
                </div>
              </div>
              
              <div class="mb-4">
                <p id="modalProductDescription" class="text-gray-700"></p>
              </div>
              
              <div class="mb-4">
                <div class="text-sm text-gray-600">
                  <div>Seller: <span id="modalSellerName" class="font-semibold"></span></div>
                  <div>Location: <span id="modalSellerLocation"></span></div>
                  <div>Minimum Order: <span id="modalMinOrder"></span></div>
                </div>
              </div>
              
              <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Quantity</label>
                <div class="flex items-center gap-3">
                  <button id="decreaseQty" class="w-10 h-10 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50">-</button>
                  <input type="number" id="modalQuantity" value="1" min="1" class="w-20 text-center border border-gray-300 rounded-lg py-2">
                  <button id="increaseQty" class="w-10 h-10 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50">+</button>
                  <span id="modalUnitType" class="text-gray-600"></span>
                </div>
              </div>
              
              <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Notes (Optional)</label>
                <textarea id="modalNotes" rows="2" class="w-full border border-gray-300 rounded-lg px-3 py-2" placeholder="Any special instructions..."></textarea>
              </div>
              
              <button id="addToCartModal" class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold" data-journey-action="addToCart">
                Add to Cart
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // --- GLOBAL STATE ---
    let products = [];
    let categories = [];
    let cart = [];
    let currentLocation = null;
    let map = null;
    let selectedCurrency = localStorage.getItem('selectedCurrency') || 'RWF';
    let selectedCurrencySymbol = { USD: '$', RWF: 'FRw', EUR: 'â‚¬', KES: 'Ksh', NGN: 'â‚¦' }[selectedCurrency] || 'FRw';
    let currentPage = 1;
    let totalPages = 1;
    let isLoading = false;

    // --- LOAD HEADER COMPONENT ---
    fetch('/buyer/components/header.html')
      .then(res => res.text())
      .then(html => {
        document.getElementById('buyer-header').innerHTML = html;
      });

    // --- INITIALIZE MAP ---
    function initializeMap() {
      // Default to Kigali coordinates
      const defaultLat = -1.9441;
      const defaultLng = 30.0619;
      
      map = L.map('map').setView([defaultLat, defaultLng], 13);
      
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Â© OpenStreetMap contributors'
      }).addTo(map);
      
      // Add click handler for map
      map.on('click', function(e) {
        updateLocationMarker(e.latlng.lat, e.latlng.lng);
      });
    }

    // --- UPDATE LOCATION MARKER ---
    let locationMarker = null;
    function updateLocationMarker(lat, lng) {
      if (locationMarker) {
        map.removeLayer(locationMarker);
      }
      
      locationMarker = L.marker([lat, lng]).addTo(map);
      currentLocation = { lat, lng };
      
      // Reverse geocoding (simplified)
      document.getElementById('deliveryAddress').value = `Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}`;
      
      showLocationStatus('Location selected. Click "Confirm Location" to continue.', 'success');
    }

    // --- SHOW LOCATION STATUS ---
    function showLocationStatus(message, type = 'info') {
      const statusEl = document.getElementById('locationStatus');
      const textEl = document.getElementById('locationText');
      
      statusEl.classList.remove('hidden', 'bg-gray-100', 'bg-green-100', 'bg-red-100');
      statusEl.classList.add(
        type === 'success' ? 'bg-green-100' : 
        type === 'error' ? 'bg-red-100' : 'bg-gray-100'
      );
      
      textEl.textContent = message;
    }

    // --- USE CURRENT LOCATION ---
    document.getElementById('useCurrentLocation').addEventListener('click', function() {
      if (navigator.geolocation) {
        showLocationStatus('Getting your location...', 'info');
        
        navigator.geolocation.getCurrentPosition(
          function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            map.setView([lat, lng], 15);
            updateLocationMarker(lat, lng);
          },
          function(error) {
            showLocationStatus('Unable to get your location. Please enter manually.', 'error');
          }
        );
      } else {
        showLocationStatus('Geolocation is not supported by this browser.', 'error');
      }
    });

    // --- CONFIRM LOCATION ---
    document.getElementById('confirmLocation').addEventListener('click', function() {
      if (!currentLocation) {
        showLocationStatus('Please select a location first.', 'error');
        return;
      }
      
      showLocationStatus('Location confirmed! Loading products...', 'success');
      loadProducts();
      loadCategories();
    });

    // --- LOAD CATEGORIES ---
    async function loadCategories() {
      try {
        const response = await fetch('/api/grocery/categories');
        const data = await response.json();
        
        if (data.success) {
          categories = data.categories;
          renderCategories();
          populateCategoryFilter();
        }
      } catch (error) {
        console.error('Error loading categories:', error);
      }
    }

    // --- RENDER CATEGORIES ---
    function renderCategories() {
      const grid = document.getElementById('categoriesGrid');
      
      grid.innerHTML = categories.slice(0, 10).map(category => `
        <div class="category-card bg-white rounded-xl p-4 shadow-sm hover:shadow-md cursor-pointer text-center" 
             onclick="filterByCategory('${category.slug}')">
          <div class="text-3xl mb-2">${category.icon || 'ðŸ“¦'}</div>
          <div class="font-semibold text-sm">${category.name}</div>
          <div class="text-xs text-gray-500">${category.children?.length || 0} items</div>
        </div>
      `).join('');
    }

    // --- POPULATE CATEGORY FILTER ---
    function populateCategoryFilter() {
      const select = document.getElementById('categoryFilter');
      select.innerHTML = '<option value="">All Categories</option>' +
        categories.map(cat => `<option value="${cat.slug}">${cat.name}</option>`).join('');
    }

    // --- FILTER BY CATEGORY ---
    function filterByCategory(categorySlug) {
      document.getElementById('categoryFilter').value = categorySlug;
      loadProducts();
    }

    // --- LOAD PRODUCTS ---
    async function loadProducts(page = 1) {
      if (isLoading) return;
      
      isLoading = true;
      const loadingState = document.getElementById('loadingState');
      const emptyState = document.getElementById('emptyState');
      const productsGrid = document.getElementById('productsGrid');
      
      if (page === 1) {
        loadingState.classList.remove('hidden');
        emptyState.classList.add('hidden');
        productsGrid.innerHTML = '';
      }

      try {
        const params = new URLSearchParams({
          page: page,
          limit: 12,
          category: document.getElementById('categoryFilter').value,
          unitType: document.getElementById('unitTypeFilter').value,
          search: document.getElementById('searchProducts').value
        });

        const response = await fetch(`/api/grocery/products?${params}`);
        const data = await response.json();
        
        if (data.success) {
          products = page === 1 ? data.products : [...products, ...data.products];
          currentPage = data.pagination.page;
          totalPages = data.pagination.pages;
          
          renderProducts();
          renderPagination();
        } else {
          throw new Error(data.message);
        }
      } catch (error) {
        console.error('Error loading products:', error);
        showLocationStatus('Error loading products. Please try again.', 'error');
      } finally {
        isLoading = false;
        loadingState.classList.add('hidden');
        
        if (products.length === 0) {
          emptyState.classList.remove('hidden');
        }
      }
    }

    // --- RENDER PRODUCTS ---
    function renderProducts() {
      const grid = document.getElementById('productsGrid');
      
      grid.innerHTML = products.map(product => `
        <div class="product-card bg-white rounded-xl shadow-sm hover:shadow-lg overflow-hidden cursor-pointer"
             onclick="openProductModal(${product.id})">
          <div class="relative">
            <img src="${product.main_image || " loading="lazy"/public/images/placeholder-product.jpg'}" 
                 alt="${product.product_name}" 
                 class="w-full h-48 object-cover">
            <div class="absolute top-2 right-2 bg-white rounded-full px-2 py-1 text-xs font-semibold">
              ${product.available_stock} ${product.unit_type}
            </div>
            ${product.is_organic ? '<div class="absolute top-2 left-2 bg-green-500 text-white rounded-full px-2 py-1 text-xs">Organic</div>' : ''}
          </div>
          
          <div class="p-4">
            <h3 class="font-semibold text-lg mb-2 line-clamp-2">${product.product_name}</h3>
            
            <div class="flex items-center justify-between mb-2">
              <div class="text-2xl font-bold text-green-600">
                ${product.unit_price} ${selectedCurrencySymbol}
              </div>
              <div class="text-sm text-gray-600">
                per ${product.unit_type}
              </div>
            </div>
            
            <div class="text-sm text-gray-600 mb-3">
              <div class="flex items-center gap-1">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                </svg>
                ${product.seller_name} â€¢ ${product.seller_city}
              </div>
              <div class="mt-1">Min order: ${product.minimum_order} ${product.unit_type}</div>
            </div>
            
            <button onclick="event.stopPropagation(); quickAddToCart(${product.id})" 
                    class="w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors font-semibold" data-journey-action="addToCart">
              Quick Add to Cart
            </button>
          </div>
        </div>
      `).join('');
    }

    // --- RENDER PAGINATION ---
    function renderPagination() {
      const pagination = document.getElementById('pagination');
      
      if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
      }
      
      let paginationHTML = '';
      
      // Previous button
      if (currentPage > 1) {
        paginationHTML += `<button onclick="loadProducts(${currentPage - 1})" class="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">Previous</button>`;
      }
      
      // Page numbers
      for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
        paginationHTML += `
          <button onclick="loadProducts(${i})" 
                  class="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 ${i === currentPage ? 'bg-green-600 text-white border-green-600' : ''}">
            ${i}
          </button>
        `;
      }
      
      // Next button
      if (currentPage < totalPages) {
        paginationHTML += `<button onclick="loadProducts(${currentPage + 1})" class="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">Next</button>`;
      }
      
      pagination.innerHTML = paginationHTML;
    }

    // --- QUICK ADD TO CART ---
    async function quickAddToCart(productId) {
      const product = products.find(p => p.id === productId);
      if (!product) return;
      
      try {
        const response = await fetch('/api/grocery/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          },
          body: JSON.stringify({
            grocery_product_id: productId,
            quantity: product.minimum_order,
            notes: ''
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          loadCart();
          showNotification('Product added to cart!', 'success');
        } else {
          showNotification(data.message, 'error');
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        showNotification('Error adding to cart', 'error');
      }
    }

    // --- LOAD CART ---
    async function loadCart() {
      try {
        const response = await fetch('/api/grocery/cart', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });
        
        const data = await response.json();
        
        if (data.success) {
          cart = data.cartItems;
          renderCart();
          updateCartSummary(data.totals);
        }
      } catch (error) {
        console.error('Error loading cart:', error);
      }
    }

    // --- RENDER CART ---
    function renderCart() {
      const cartItems = document.getElementById('cartItems');
      const cartBadge = document.getElementById('cartBadge');
      const cartSummary = document.getElementById('cartSummary');
      
      if (cart.length === 0) {
        cartItems.innerHTML = `
          <div class="text-center text-gray-500 py-8">
            <svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2-2v4.01"></path>
            </svg>
            <p>Your cart is empty</p>
            <p class="text-sm">Add some fresh products!</p>
          </div>
        `;
        cartBadge.classList.add('hidden');
        cartSummary.classList.add('hidden');
        return;
      }
      
      cartBadge.classList.remove('hidden');
      cartBadge.textContent = cart.length;
      cartSummary.classList.remove('hidden');
      
      cartItems.innerHTML = cart.map(item => `
        <div class="flex items-center gap-3 p-3 border border-gray-200 rounded-lg">
          <img src="${item.main_image || " loading="lazy"/public/images/placeholder-product.jpg'}" 
               alt="${item.product_name}" 
               class="w-12 h-12 object-cover rounded">
          
          <div class="flex-1 min-w-0">
            <div class="font-semibold text-sm truncate">${item.product_name}</div>
            <div class="text-xs text-gray-600">${item.unit_price} ${selectedCurrencySymbol}/${item.unit_type}</div>
            <div class="text-xs text-gray-600">${item.seller_name}</div>
          </div>
          
          <div class="flex items-center gap-1">
            <button onclick="updateCartQuantity(${item.grocery_product_id}, ${item.quantity - 1})" 
                    class="w-6 h-6 rounded-full border border-gray-300 flex items-center justify-center text-xs hover:bg-gray-50">-</button>
            <span class="text-sm font-semibold w-8 text-center">${item.quantity}</span>
            <button onclick="updateCartQuantity(${item.grocery_product_id}, ${item.quantity + 1})" 
                    class="w-6 h-6 rounded-full border border-gray-300 flex items-center justify-center text-xs hover:bg-gray-50">+</button>
          </div>
          
          <button onclick="removeFromCart(${item.grocery_product_id})" 
                  class="text-red-500 hover:text-red-700">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      `).join('');
    }

    // --- UPDATE CART SUMMARY ---
    function updateCartSummary(totals) {
      document.getElementById('subtotal').textContent = `${totals.subtotal} ${selectedCurrencySymbol}`;
      document.getElementById('platformFee').textContent = `${totals.platformCommission} ${selectedCurrencySymbol}`;
      document.getElementById('deliveryFee').textContent = `${totals.estimatedDeliveryFee} ${selectedCurrencySymbol}`;
      document.getElementById('totalAmount').textContent = `${totals.total} ${selectedCurrencySymbol}`;
    }

    // --- UPDATE CART QUANTITY ---
    async function updateCartQuantity(productId, newQuantity) {
      try {
        const response = await fetch('/api/grocery/cart/update', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          },
          body: JSON.stringify({
            grocery_product_id: productId,
            quantity: newQuantity
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          loadCart();
        } else {
          showNotification(data.message, 'error');
        }
      } catch (error) {
        console.error('Error updating cart:', error);
        showNotification('Error updating cart', 'error');
      }
    }

    // --- REMOVE FROM CART ---
    async function removeFromCart(productId) {
      await updateCartQuantity(productId, 0);
    }

    // --- CLEAR CART ---
    document.getElementById('clearCart').addEventListener('click', async function() {
      if (!confirm('Are you sure you want to clear your cart?')) return;
      
      try {
        const response = await fetch('/api/grocery/cart/clear', {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });
        
        const data = await response.json();
        
        if (data.success) {
          loadCart();
          showNotification('Cart cleared', 'success');
        }
      } catch (error) {
        console.error('Error clearing cart:', error);
        showNotification('Error clearing cart', 'error');
      }
    });

    // --- PROCEED TO CHECKOUT ---
    document.getElementById('proceedToCheckout').addEventListener('click', function() {
      if (cart.length === 0) {
        showNotification('Your cart is empty', 'error');
        return;
      }
      
      if (!currentLocation) {
        showNotification('Please set your delivery location first', 'error');
        return;
      }
      
      // Redirect to checkout page
      window.location.href = '/buyer/grocery-checkout.html';
    });

    // --- SHOW NOTIFICATION ---
    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white font-semibold ${
        type === 'success' ? 'bg-green-600' : 
        type === 'error' ? 'bg-red-600' : 'bg-blue-600'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // --- SEARCH AND FILTER HANDLERS ---
    document.getElementById('searchProducts').addEventListener('input', debounce(function() {
      currentPage = 1;
      loadProducts();
    }, 500));

    document.getElementById('applyFilters').addEventListener('click', function() {
      currentPage = 1;
      loadProducts();
    });

    document.getElementById('clearFilters').addEventListener('click', function() {
      document.getElementById('searchProducts').value = '';
      document.getElementById('categoryFilter').value = '';
      document.getElementById('unitTypeFilter').value = '';
      document.getElementById('sortBy').value = 'newest';
      currentPage = 1;
      loadProducts();
    });

    document.getElementById('resetSearch').addEventListener('click', function() {
      document.getElementById('clearFilters').click();
    });

    // --- DEBOUNCE UTILITY ---
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // --- PRODUCT MODAL FUNCTIONS ---
    function openProductModal(productId) {
      const product = products.find(p => p.id === productId);
      if (!product) return;
      
      // Populate modal
      document.getElementById('modalProductName').textContent = product.product_name;
      document.getElementById('modalProductImage').src = product.main_image || '/public/images/placeholder-product.jpg';
      document.getElementById('modalProductPrice').textContent = `${product.unit_price} ${selectedCurrencySymbol}`;
      document.getElementById('modalProductUnit').textContent = `per ${product.unit_type}`;
      document.getElementById('modalProductStock').textContent = `${product.available_stock} ${product.unit_type}`;
      document.getElementById('modalProductDescription').textContent = product.product_description || 'No description available';
      document.getElementById('modalSellerName').textContent = product.seller_name;
      document.getElementById('modalSellerLocation').textContent = product.seller_city;
      document.getElementById('modalMinOrder').textContent = `${product.minimum_order} ${product.unit_type}`;
      document.getElementById('modalQuantity').value = product.minimum_order;
      document.getElementById('modalQuantity').min = product.minimum_order;
      document.getElementById('modalQuantity').max = product.available_stock;
      document.getElementById('modalUnitType').textContent = product.unit_type;
      
      // Store product ID for add to cart
      document.getElementById('addToCartModal').dataset.productId = productId;
      
      // Show modal
      document.getElementById('productModal').classList.remove('hidden');
    }

    // Modal event listeners
    document.getElementById('closeModal').addEventListener('click', function() {
      document.getElementById('productModal').classList.add('hidden');
    });

    document.getElementById('productModal').addEventListener('click', function(e) {
      if (e.target === this) {
        this.classList.add('hidden');
      }
    });

    document.getElementById('decreaseQty').addEventListener('click', function() {
      const input = document.getElementById('modalQuantity');
      const min = parseInt(input.min);
      const current = parseInt(input.value);
      if (current > min) {
        input.value = current - 1;
      }
    });

    document.getElementById('increaseQty').addEventListener('click', function() {
      const input = document.getElementById('modalQuantity');
      const max = parseInt(input.max);
      const current = parseInt(input.value);
      if (current < max) {
        input.value = current + 1;
      }
    });

    document.getElementById('addToCartModal').addEventListener('click', async function() {
      const productId = this.dataset.productId;
      const quantity = document.getElementById('modalQuantity').value;
      const notes = document.getElementById('modalNotes').value;
      
      try {
        const response = await fetch('/api/grocery/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          },
          body: JSON.stringify({
            grocery_product_id: parseInt(productId),
            quantity: parseFloat(quantity),
            notes: notes
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          loadCart();
          document.getElementById('productModal').classList.add('hidden');
          showNotification('Product added to cart!', 'success');
        } else {
          showNotification(data.message, 'error');
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        showNotification('Error adding to cart', 'error');
      }
    });

    // --- INITIALIZE ---
    document.addEventListener('DOMContentLoaded', function() {
      // Check authentication
      const token = localStorage.getItem('authToken');
      if (!token) {
        window.location.href = '/auth/auth-buyer.html';
        return;
      }
      
      initializeMap();
      loadCart();
      
      // Show initial message
      showLocationStatus('Please set your delivery location to see available products', 'info');
    });
  </script>

  <!-- Navigation utilities for this page -->
  <script>
    // Page-specific navigation setup
    document.addEventListener('DOMContentLoaded', function() {
      // Set page type and mode
      document.body.setAttribute('data-page-type', 'buyer');
      
      
      // Switch to local market mode for this page
      if (window.navUtils) {
        localStorage.setItem('currentMode', 'local-market');
      }
      
      
      // Add navigation helpers to existing elements
      enhanceExistingNavigation();
      
      // Setup page-specific navigation
      setupPageNavigation();
    });
    
    function enhanceExistingNavigation() {
      // Add data-route attributes to links that don't have them
      const links = document.querySelectorAll('a[href]:not([data-route])');
      links.forEach(link => {
        const href = link.getAttribute('href');
        if (href && !href.startsWith('http') && !href.startsWith('mailto:') && !href.startsWith('tel:')) {
          const route = getRouteForHref(href);
          if (route) {
            link.setAttribute('data-route', route);
          }
        }
      });
      
      // Add journey actions to buttons
      const buttons = document.querySelectorAll('button, .btn, [role="button"]');
      buttons.forEach(button => {
        const text = button.textContent.toLowerCase();
        
        if (text.includes('add') && text.includes('cart')) {
          button.setAttribute('data-journey-action', 'add-to-cart');
        } else if (text.includes('checkout')) {
          button.setAttribute('data-journey-action', 'proceed-checkout');
        } else if (text.includes('place') && text.includes('order')) {
          button.setAttribute('data-journey-action', 'complete-payment');
        } else if (text.includes('login') || text.includes('sign in')) {
          button.setAttribute('data-quick-nav', 'login');
        } else if (text.includes('logout') || text.includes('sign out')) {
          button.setAttribute('data-quick-nav', 'logout');
        }
      });
    }
    
    function setupPageNavigation() {
      // Page-specific navigation setup
      const pageType = 'buyer';
      
      // Add mode indicators if they exist
      const modeIndicators = document.querySelectorAll('.mode-indicator');
      modeIndicators.forEach(indicator => {
        const currentMode = window.navUtils ? window.navUtils.getCurrentMode() : 'marketplace';
        indicator.className = `mode-indicator mode-${currentMode}`;
        indicator.textContent = currentMode === 'marketplace' ? 'Marketplace' : 'Local Market';
      });
      
      // Add quick navigation buttons if they exist
      const homeButtons = document.querySelectorAll('[data-nav="home"], .home-btn');
      homeButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'home'));
      
      const backButtons = document.querySelectorAll('[data-nav="back"], .back-btn');
      backButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'back'));
      
      const dashboardButtons = document.querySelectorAll('[data-nav="dashboard"], .dashboard-btn');
      dashboardButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'dashboard'));
    }
    
    function getRouteForHref(href) {
      // Basic route mapping
      const routeMap = {
        '/': 'home',
        '/public/index.html': 'home',
        '/public/about.html': 'public.about',
        '/public/contact.html': 'public.contact',
        '/public/product-list.html': 'public.product-list',
        '/public/product-detail.html': 'public.product-detail',
        '/buyer/buyers-home.html': 'buyer.dashboard',
        '/buyer/cart.html': 'buyer.cart',
        '/buyer/checkout.html': 'buyer.checkout',
        '/buyer/orders.html': 'buyer.orders',
        '/seller/dashboard.html': 'seller.dashboard',
        '/seller/add-product.html': 'seller.add-product',
        '/agent/dashboard.html': 'agent.dashboard',
        '/admin/dashboard.html': 'admin.dashboard',
        '/auth/auth-buyer.html': 'auth.login',
        '/auth/auth-seller.html': 'auth.login-seller',
        '/auth/auth-agent.html': 'auth.login-agent',
        '/grocery/local-market-home.html': 'local-market.home',
        '/grocery/cart.html': 'local-market.cart'
      };
      
      return routeMap[href] || null;
    }
    
    // Wait for flexible navigation system to be ready
    window.addEventListener('flexibleNavigationReady', function() {
      console.log('âœ… Flexible navigation ready on buyer\local-market.html');
      
      // Start appropriate journey if needed
      
    });
  </script>

</body>
</html>
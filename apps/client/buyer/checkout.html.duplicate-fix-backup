<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout | ADD Physical Products</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    .glass-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    .payment-option {
      transition: all 0.3s ease;
      cursor: pointer;
    }
    .payment-option:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    .payment-option.selected {
      border-color: #3b82f6;
      background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
  </style>
</head>
<body class="bg-gradient-to-br from-blue-50 via-white to-green-50 min-h-screen">
  
  <!-- Header -->
  <header class="bg-white shadow-sm border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        <!-- Logo -->
        <div class="flex items-center">
          <img src="/uploads/logo.png" alt="ADD Physical Products" class="h-8 w-auto">
          <span class="ml-2 text-xl font-bold text-gray-900">ADD Physical Products</span>
        </div>
        
        <!-- Navigation -->
        <nav class="hidden md:flex space-x-8">
          <a href="/buyer/buyers-home.html" class="text-gray-700 hover:text-blue-600 font-medium">Home</a>
          <a href="/buyer/products.html" class="text-gray-700 hover:text-blue-600 font-medium">Products</a>
          <a href="/buyer/orders.html" class="text-gray-700 hover:text-blue-600 font-medium">Orders</a>
          <a href="/buyer/cart.html" class="text-gray-700 hover:text-blue-600 font-medium">Cart</a>
        </nav>
        
        <!-- User Profile -->
        <div class="relative">
          <button id="profile-btn" class="flex items-center space-x-2 text-gray-700 hover:text-blue-600 transition-colors">
            <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
              <i class="fas fa-user text-white text-sm"></i>
            </div>
            <span id="profile-name" class="font-medium">User</span>
            <i class="fas fa-chevron-down text-sm"></i>
          </button>
          
          <div id="profile-dropdown" class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border hidden z-50">
            <a href="/buyer/buyers-home.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-50">
              <i class="fas fa-home mr-2"></i>Dashboard
            </a>
            <a href="/buyer/orders.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-50">
              <i class="fas fa-shopping-bag mr-2"></i>My Orders
            </a>
            <hr class="my-1">
            <button id="signout-btn" class="w-full text-left px-4 py-2 text-red-600 hover:bg-red-50">
              <i class="fas fa-sign-out-alt mr-2"></i>Sign Out
            </button>
          </div>
        </div>
      </div>
    </div>
  </header>

  <!-- Progress Bar -->
  <div class="bg-white border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
      <div class="flex items-center justify-center space-x-8">
        <div class="flex items-center text-green-600">
          <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
            <i class="fas fa-check"></i>
          </div>
          <span class="ml-2 font-medium">Cart</span>
        </div>
        <div class="w-16 h-1 bg-green-600 rounded"></div>
        <div class="flex items-center text-green-600">
          <div class="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
            <i class="fas fa-check"></i>
          </div>
          <span class="ml-2 font-medium">Delivery</span>
        </div>
        <div class="w-16 h-1 bg-green-600 rounded"></div>
        <div class="flex items-center text-blue-600">
          <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-bold">3</div>
          <span class="ml-2 font-medium">Checkout</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

    <!-- Checkout Content -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Left Column - Checkout Form -->
      <div class="lg:col-span-2 space-y-6">
        
        <!-- Delivery Method Summary -->
        <div class="glass-card rounded-2xl p-6">
          <h2 class="text-xl font-bold text-gray-900 mb-4 flex items-center">
            <i class="fas fa-truck text-green-600 mr-3"></i>
            Selected Delivery Method
          </h2>
          <div id="delivery-method-display" class="bg-gray-50 rounded-lg p-4 mb-4">
            <!-- Delivery method details will be loaded here -->
          </div>
          <button type="button" id="change-delivery-method" class="text-blue-600 hover:text-blue-700 text-sm font-medium transition-colors">
            <i class="fas fa-edit mr-1"></i>
            Change Delivery Method
          </button>
        </div>
        
        <!-- Contact Information -->
        <div class="glass-card rounded-2xl p-6">
          <h2 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
            <i class="fas fa-user text-blue-600 mr-3"></i>
            Contact Information
          </h2>
          
          <form id="checkout-form" class="space-y-6">
            <!-- Personal Information -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="firstName" class="block text-sm font-medium text-gray-700 mb-1">First Name *</label>
                <input type="text" id="firstName" name="firstName" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              </div>
              <div>
                <label for="lastName" class="block text-sm font-medium text-gray-700 mb-1">Last Name *</label>
                <input type="text" id="lastName" name="lastName" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              </div>
            </div>
            
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address *</label>
              <input type="email" id="email" name="email" required 
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
            </div>
            
            <div>
              <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number *</label>
              <input type="tel" id="phone" name="phone" required 
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
            </div>
            
            <!-- Additional Notes -->
            <div>
              <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">Order Notes (Optional)</label>
              <textarea id="notes" name="notes" rows="3" 
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                        placeholder="Any special instructions for your order..."></textarea>
            </div>
          </form>
        </div>

        <!-- Payment Method -->
        <div class="glass-card rounded-2xl p-6">
          <h2 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
            <i class="fas fa-credit-card text-green-600 mr-3"></i>
            Payment Method
          </h2>
          
          <div class="space-y-4">
            <!-- Credit Card -->
            <div class="payment-option border-2 border-gray-200 rounded-lg p-4" data-payment="credit_card">
              <div class="flex items-center">
                <input type="radio" id="creditCard" name="paymentMethod" value="credit_card" 
                       class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <label for="creditCard" class="ml-3 flex-1 cursor-pointer">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center">
                      <i class="fas fa-credit-card text-blue-600 mr-2"></i>
                      <span class="font-medium text-gray-900">Credit/Debit Card</span>
                    </div>
                    <div class="flex space-x-1">
                      <i class="fab fa-cc-visa text-blue-600"></i>
                      <i class="fab fa-cc-mastercard text-red-500"></i>
                    </div>
                  </div>
                  <p class="text-sm text-gray-600 mt-1">Secure payment with your card</p>
                </label>
              </div>
            </div>
            
            <!-- Mobile Money -->
            <div class="payment-option border-2 border-gray-200 rounded-lg p-4" data-payment="mobile_money">
              <div class="flex items-center">
                <input type="radio" id="mobileMoney" name="paymentMethod" value="mobile_money" 
                       class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <label for="mobileMoney" class="ml-3 flex-1 cursor-pointer">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center">
                      <i class="fas fa-mobile-alt text-green-600 mr-2"></i>
                      <span class="font-medium text-gray-900">Mobile Money</span>
                    </div>
                    <span class="text-sm text-green-600 font-medium">Popular</span>
                  </div>
                  <p class="text-sm text-gray-600 mt-1">Pay with MTN, Airtel, or other mobile money</p>
                </label>
              </div>
            </div>
            
            <!-- Bank Transfer -->
            <div class="payment-option border-2 border-gray-200 rounded-lg p-4" data-payment="bank_transfer">
              <div class="flex items-center">
                <input type="radio" id="bankTransfer" name="paymentMethod" value="bank_transfer" 
                       class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <label for="bankTransfer" class="ml-3 flex-1 cursor-pointer">
                  <div class="flex items-center">
                    <i class="fas fa-university text-purple-600 mr-2"></i>
                    <span class="font-medium text-gray-900">Bank Transfer</span>
                  </div>
                  <p class="text-sm text-gray-600 mt-1">Direct bank transfer</p>
                </label>
              </div>
            </div>
            
            <!-- Escrow Payment -->
            <div class="payment-option border-2 border-gray-200 rounded-lg p-4" data-payment="escrow_fallback">
              <div class="flex items-center">
                <input type="radio" id="escrowPayment" name="paymentMethod" value="escrow_fallback" 
                       class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <label for="escrowPayment" class="ml-3 flex-1 cursor-pointer">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center">
                      <i class="fas fa-shield-alt text-orange-600 mr-2"></i>
                      <span class="font-medium text-gray-900">Escrow Protection</span>
                    </div>
                    <span class="text-sm bg-orange-100 text-orange-800 px-2 py-1 rounded-full font-medium">Secure</span>
                  </div>
                  <p class="text-sm text-gray-600 mt-1">Your money is protected until delivery</p>
                </label>
              </div>
            </div>
          </div>
          
          <!-- Payment Fields -->
          <div id="payment-fields" class="mt-6">
            <!-- Credit Card Fields -->
            <div id="creditCardFields" class="space-y-4 hidden">
              <div>
                <label for="cardNumber" class="block text-sm font-medium text-gray-700 mb-1">Card Number *</label>
                <input type="text" id="cardNumber" name="cardNumber" placeholder="1234 5678 9012 3456" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              </div>
              
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label for="expiryDate" class="block text-sm font-medium text-gray-700 mb-1">Expiry Date *</label>
                  <input type="text" id="expiryDate" name="expiryDate" placeholder="MM/YY" 
                         class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                </div>
                <div>
                  <label for="cvv" class="block text-sm font-medium text-gray-700 mb-1">CVV *</label>
                  <input type="text" id="cvv" name="cvv" placeholder="123" 
                         class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                </div>
              </div>
            </div>
            
            <!-- Mobile Money Fields -->
            <div id="mobileMoneyFields" class="space-y-4 hidden">
              <div>
                <label for="mobileNumber" class="block text-sm font-medium text-gray-700 mb-1">Mobile Number *</label>
                <input type="tel" id="mobileNumber" name="mobileNumber" placeholder="+250 788 123 456" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              </div>
              <div>
                <label for="mobileProvider" class="block text-sm font-medium text-gray-700 mb-1">Provider *</label>
                <select id="mobileProvider" name="mobileProvider" 
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                  <option value="">Select Provider</option>
                  <option value="mtn">MTN Mobile Money</option>
                  <option value="airtel">Airtel Money</option>
                  <option value="tigo">Tigo Cash</option>
                </select>
              </div>
            </div>
            
            <!-- Bank Transfer Fields -->
            <div id="bankTransferFields" class="space-y-4 hidden">
              <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 class="font-semibold text-blue-900 mb-2">Bank Transfer Details</h4>
                <div class="text-sm text-blue-800 space-y-1">
                  <p><strong>Bank:</strong> Bank of Kigali</p>
                  <p><strong>Account Name:</strong> ADD Physical Products</p>
                  <p><strong>Account Number:</strong> 123456789</p>
                  <p><strong>Reference:</strong> Use your order number</p>
                </div>
              </div>
            </div>
            
            <!-- Escrow Payment Fields -->
            <div id="escrowPaymentFields" class="space-y-4 hidden">
              <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                <h4 class="font-semibold text-green-900 mb-3">🛡️ Secure Escrow Payment</h4>
                <div class="text-sm text-green-800 space-y-2">
                  <p><strong>✅ Your money is protected!</strong> We hold your payment securely until you receive your order.</p>
                  <p><strong>📱 Mobile Money:</strong> <span id="escrow-mobile-number" class="font-mono bg-white px-2 py-1 rounded">+250 788 123 456</span></p>
                  <p><strong>💳 Reference Code:</strong> <span id="escrow-momo-code" class="font-mono bg-white px-2 py-1 rounded">ADD2024</span></p>
                  <p><strong>💰 Amount:</strong> <span id="escrow-amount" class="font-semibold">FRw 0</span></p>
                </div>
              </div>
              
              <div>
                <label for="paymentProof" class="block text-sm font-medium text-gray-700 mb-2">Upload Payment Screenshot *</label>
                <input type="file" id="paymentProof" accept="image/*" 
                       class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                <div class="text-xs text-gray-500 mt-1">
                  Upload screenshot showing successful payment
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Column - Order Summary -->
      <div class="lg:col-span-1">
        <div class="glass-card rounded-2xl p-6 sticky top-20">
          <h2 class="text-xl font-bold text-gray-900 mb-4 flex items-center">
            <i class="fas fa-receipt text-purple-600 mr-3"></i>
            Order Summary
          </h2>
          
          <div id="order-items" class="space-y-3 mb-6">
            <!-- Order items will be loaded here -->
          </div>
          
          <div class="border-t pt-4 space-y-3">
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Subtotal:</span>
              <span id="subtotal" class="font-medium">FRw 0</span>
            </div>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Delivery Fee:</span>
              <span id="shipping" class="font-medium">FRw 0</span>
            </div>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Tax:</span>
              <span id="tax" class="font-medium">FRw 0</span>
            </div>
            <div id="free-shipping-notice" class="text-sm text-green-600 font-medium hidden">
              🎉 Free delivery applied!
            </div>
            <hr class="my-3">
            <div class="flex justify-between text-lg font-bold">
              <span>Total:</span>
              <span id="total" class="text-green-600">FRw 0</span>
            </div>
          </div>
          
          <button id="place-order-btn" class="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white py-3 rounded-lg font-bold transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none">
            <i class="fas fa-shopping-cart mr-2"></i>
            Place Order
          </button>
          
          <div class="mt-4 flex justify-between text-center">
            <a href="/buyer/cart.html" class="text-blue-600 hover:text-blue-700 text-sm font-medium transition-colors">
              <i class="fas fa-arrow-left mr-1"></i>Back to Cart
            </a>
            <a href="/buyer/delivery-method-selection.html" class="text-blue-600 hover:text-blue-700 text-sm font-medium transition-colors">
              <i class="fas fa-truck mr-1"></i>Change Delivery
            </a>
          </div>
          
          <!-- Security Notice -->
          <div class="mt-6 p-3 bg-green-50 border border-green-200 rounded-lg">
            <div class="flex items-center text-green-700 text-sm">
              <i class="fas fa-shield-alt mr-2"></i>
              <span>Your payment is secured with 256-bit SSL encryption</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
      </div>
    </div>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-6 text-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
      <p class="text-gray-600 font-medium">Processing your order...</p>
      <p class="text-gray-500 text-sm mt-2">Please don't close this window</p>
    </div>
  </div>

  <script>
    class CheckoutManager {
      constructor() {
        this.deliveryData = null;
        this.cartItems = [];
        this.userInfo = {};
        this.selectedPaymentMethod = null;
        this.subtotal = 0;
        this.deliveryFee = 0;
        this.tax = 0;
        this.total = 0;
        this.init();
      }

      async init() {
        try {
          // Check authentication
          this.checkAuthentication();
          
          // Load delivery method data from delivery selection
          this.loadDeliveryData();
          
          // Load real cart data from backend
          await this.loadCartData();
          
          // Load user information
          await this.loadUserInfo();
          
          // Calculate order totals
          this.calculateOrderTotals();
          
          // Setup event listeners
          this.setupEventListeners();
          
          // Setup profile dropdown
          this.setupProfileDropdown();
          
          // Render order summary
          this.renderOrderSummary();
          
          // Display delivery method
          this.displayDeliveryMethod();
        } catch (error) {
          console.error('Error initializing checkout:', error);
          this.showNotification('Failed to load checkout data', 'error');
        }
      }

      checkAuthentication() {
        const token = localStorage.getItem('authToken');
        const userData = localStorage.getItem('userData');
        
        if (!token || !userData) {
          window.location.href = '/auth/auth-buyer.html';
          return;
        }
        
        try {
          const user = JSON.parse(userData);
          const profileName = document.getElementById('profile-name');
          if (profileName) {
            profileName.textContent = user.username || 'User';
          }
        } catch (error) {
          console.error('Error parsing user data:', error);
        }
      }

      loadDeliveryData() {
        const checkoutData = localStorage.getItem('checkoutData');
        if (!checkoutData) {
          alert('Please select a delivery method first.');
          window.location.href = '/buyer/delivery-method-selection.html';
          return;
        }

        try {
          this.checkoutData = JSON.parse(checkoutData);
          console.log('📦 Checkout data loaded:', this.checkoutData);
          
          // Extract delivery information
          this.deliveryData = {
            method: this.checkoutData.deliveryType,
            calculation: this.checkoutData.calculation,
            pickupSiteId: this.checkoutData.pickupSiteId,
            deliveryAddress: this.checkoutData.deliveryAddress
          };
          
          console.log('🚚 Delivery data extracted:', this.deliveryData);
        } catch (error) {
          console.error('Error loading checkout data:', error);
          window.location.href = '/buyer/delivery-method-selection.html';
        }
      }

      async loadCartData() {
        try {
          // Use cart data from checkout data (already loaded from delivery selection)
          if (this.checkoutData && this.checkoutData.items) {
            this.cartItems = this.checkoutData.items;
            console.log('🛒 Cart data loaded from checkout data:', this.cartItems);
            
            if (this.cartItems.length === 0) {
              alert('Your cart is empty. Please add items to your cart first.');
              window.location.href = '/buyer/products.html';
              return;
            }
            return;
          }

          // Fallback: Load from backend if not available in checkout data
          const token = localStorage.getItem('authToken');
          const response = await fetch('/api/cart', {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });

          if (response.ok) {
            const data = await response.json();
            this.cartItems = data.items || [];
            console.log('🛒 Cart data loaded from backend:', this.cartItems);
            
            if (this.cartItems.length === 0) {
              alert('Your cart is empty. Please add items to your cart first.');
              window.location.href = '/buyer/products.html';
              return;
            }
          } else {
            throw new Error('Failed to load cart data');
          }
        } catch (error) {
          console.error('Error loading cart data:', error);
          alert('Failed to load cart data. Please try again.');
          window.location.href = '/buyer/cart.html';
        }
      }

      calculateOrderTotals() {
        if (!this.cartItems || this.cartItems.length === 0) {
          return;
        }

        // Use subtotal from checkout data if available, otherwise calculate
        if (this.checkoutData && this.checkoutData.subtotal) {
          this.subtotal = this.checkoutData.subtotal;
        } else {
          this.subtotal = this.cartItems.reduce((total, item) => {
            return total + (parseFloat(item.price) * parseInt(item.quantity));
          }, 0);
        }

        // Get delivery fee and tax from delivery calculation
        if (this.checkoutData && this.checkoutData.calculation) {
          this.deliveryFee = this.checkoutData.calculation.deliveryFee || 0;
          this.tax = this.checkoutData.calculation.taxAmount || 0;
          this.total = this.checkoutData.calculation.total || (this.subtotal + this.deliveryFee + this.tax);
        } else {
          // Fallback calculation
          this.deliveryFee = this.deliveryData?.deliveryFee || 0;
          this.tax = 0;
          this.total = this.subtotal + this.deliveryFee + this.tax;
        }

        console.log('💰 Order totals calculated:', {
          subtotal: this.subtotal,
          deliveryFee: this.deliveryFee,
          tax: this.tax,
          total: this.total
        });
      }

      async loadUserInfo() {
        try {
          const token = localStorage.getItem('authToken');
          const response = await fetch('/api/auth/profile', {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (response.ok) {
            const data = await response.json();
            this.userInfo = data.user || {};
            this.populateUserInfo();
          }
        } catch (error) {
          console.error('Error loading user info:', error);
        }
      }

      populateUserInfo() {
        if (this.userInfo.name) {
          const nameParts = this.userInfo.name.split(' ');
          document.getElementById('firstName').value = nameParts[0] || '';
          document.getElementById('lastName').value = nameParts.slice(1).join(' ') || '';
        }
        if (this.userInfo.email) {
          document.getElementById('email').value = this.userInfo.email;
        }
        if (this.userInfo.phone) {
          document.getElementById('phone').value = this.userInfo.phone;
        }
      }

      displayDeliveryMethod() {
        const displayElement = document.getElementById('delivery-method-display');
        
        if (this.deliveryData.method === 'pickup') {
          displayElement.innerHTML = `
            <div class="flex items-start space-x-3">
              <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                <i class="fas fa-store text-green-600"></i>
              </div>
              <div class="flex-1">
                <h3 class="font-semibold text-gray-900">Pickup Delivery</h3>
                <p class="text-sm text-gray-600 mt-1">Your order will be collected from a pickup location</p>
                <div class="mt-2 p-2 bg-blue-50 rounded-lg">
                  <p class="text-sm font-medium text-blue-900">Pickup Site:</p>
                  <p class="text-sm text-blue-700">${this.deliveryData.pickupSite?.name || 'Default Location'}</p>
                  <p class="text-sm text-blue-600">${this.deliveryData.pickupSite?.address_line1 || ''}</p>
                </div>
                <div class="mt-2 flex items-center space-x-4 text-sm">
                  <span class="text-green-600 font-semibold">
                    <i class="fas fa-check mr-1"></i>
                    FREE Delivery
                  </span>
                </div>
              </div>
            </div>
          `;
        } else if (this.deliveryData.method === 'home') {
          const address = this.deliveryData.deliveryAddress;
          displayElement.innerHTML = `
            <div class="flex items-start space-x-3">
              <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                <i class="fas fa-home text-blue-600"></i>
              </div>
              <div class="flex-1">
                <h3 class="font-semibold text-gray-900">Home Delivery</h3>
                <p class="text-sm text-gray-600 mt-1">Your order will be delivered to your home</p>
                <div class="mt-2 p-2 bg-blue-50 rounded-lg">
                  <p class="text-sm font-medium text-blue-900">Delivery Address:</p>
                  <p class="text-sm text-blue-700">
                    ${address.street || address.display_name}<br>
                    ${address.city || ''}, ${address.state || ''}
                  </p>
                </div>
                <div class="mt-2 flex items-center space-x-4 text-sm">
                  <span class="text-blue-600 font-semibold">
                    <i class="fas fa-truck mr-1"></i>
                    Delivery Fee: FRw ${this.deliveryFee.toLocaleString()}
                  </span>
                </div>
              </div>
            </div>
          `;
        }
      }

      renderOrderSummary() {
        const container = document.getElementById('order-items');
        
        if (!this.cartItems || this.cartItems.length === 0) {
          container.innerHTML = '<p class="text-gray-500 text-center py-4">No items in cart</p>';
          return;
        }
        
        container.innerHTML = this.cartItems.map(item => `
          <div class="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
            <img src="${item.main_image ? `/uploads/${item.main_image}` : '/uploads/logo.png'}" 
                 alt="${item.name}" 
                 class="w-12 h-12 object-cover rounded-lg"
                 onerror="this.src='/uploads/logo.png'">
            <div class="flex-1">
              <h4 class="font-medium text-gray-900 text-sm">${item.name}</h4>
              <p class="text-gray-600 text-xs">Qty: ${item.quantity}</p>
              <p class="text-gray-500 text-xs">FRw ${parseFloat(item.price).toLocaleString()} each</p>
            </div>
            <div class="text-right">
              <p class="font-semibold text-gray-900 text-sm">FRw ${(parseFloat(item.price) * parseInt(item.quantity)).toLocaleString()}</p>
            </div>
          </div>
        `).join('');
        
        this.updateOrderSummary();
      }

      updateOrderSummary() {
        document.getElementById('subtotal').textContent = `FRw ${this.subtotal.toLocaleString()}`;
        document.getElementById('shipping').textContent = this.deliveryFee === 0 ? 'FREE' : `FRw ${this.deliveryFee.toLocaleString()}`;
        document.getElementById('tax').textContent = `FRw ${this.tax.toLocaleString()}`;
        document.getElementById('total').textContent = `FRw ${this.total.toLocaleString()}`;
        
        // Show free shipping notice if applicable
        const freeShippingNotice = document.getElementById('free-shipping-notice');
        if (this.deliveryFee === 0) {
          freeShippingNotice.classList.remove('hidden');
        } else {
          freeShippingNotice.classList.add('hidden');
        }
        
        // Update escrow amount if visible
        const escrowAmount = document.getElementById('escrow-amount');
        if (escrowAmount) {
          escrowAmount.textContent = `FRw ${this.total.toLocaleString()}`;
        }
      }

      setupEventListeners() {
        // Change delivery method
        document.getElementById('change-delivery-method').addEventListener('click', () => {
          if (confirm('Are you sure you want to change your delivery method? This will take you back to the delivery selection page.')) {
            window.location.href = '/buyer/delivery-method-selection.html';
          }
        });

        // Payment method selection
        const paymentOptions = document.querySelectorAll('.payment-option');
        const paymentRadios = document.querySelectorAll('input[name="paymentMethod"]');
        
        paymentOptions.forEach(option => {
          option.addEventListener('click', () => {
            const radio = option.querySelector('input[type="radio"]');
            radio.checked = true;
            this.handlePaymentMethodChange(radio.value);
            this.updatePaymentOptionStyles();
          });
        });

        paymentRadios.forEach(radio => {
          radio.addEventListener('change', () => {
            this.handlePaymentMethodChange(radio.value);
            this.updatePaymentOptionStyles();
          });
        });

        // Place order button
        document.getElementById('place-order-btn').addEventListener('click', () => {
          this.placeOrder();
        });
      }

      updatePaymentOptionStyles() {
        const paymentOptions = document.querySelectorAll('.payment-option');
        paymentOptions.forEach(option => {
          const radio = option.querySelector('input[type="radio"]');
          if (radio.checked) {
            option.classList.add('selected');
          } else {
            option.classList.remove('selected');
          }
        });
      }

      async handlePaymentMethodChange(method) {
        this.selectedPaymentMethod = method;
        
        // Hide all payment fields
        document.getElementById('creditCardFields').classList.add('hidden');
        document.getElementById('mobileMoneyFields').classList.add('hidden');
        document.getElementById('bankTransferFields').classList.add('hidden');
        document.getElementById('escrowPaymentFields').classList.add('hidden');
        
        // Show relevant fields based on admin configuration
        const paymentConfig = await this.loadPaymentConfiguration();
        
        switch (method) {
          case 'credit_card':
            if (paymentConfig.credit_card_enabled && paymentConfig.credit_card_api) {
              document.getElementById('creditCardFields').classList.remove('hidden');
            } else {
              this.showManualPaymentFallback();
            }
            break;
          case 'mobile_money':
            if (paymentConfig.mobile_money_enabled && paymentConfig.mobile_money_api) {
              document.getElementById('mobileMoneyFields').classList.remove('hidden');
            } else {
              this.showManualPaymentFallback();
            }
            break;
          case 'bank_transfer':
            if (paymentConfig.bank_transfer_enabled && paymentConfig.bank_transfer_api) {
              document.getElementById('bankTransferFields').classList.remove('hidden');
            } else {
              this.showManualPaymentFallback();
            }
            break;
          case 'escrow_fallback':
            this.showManualPaymentFallback();
            break;
        }
      }

      async loadPaymentConfiguration() {
        // Return buyer-accessible payment configuration (no admin access needed)
        // This eliminates the 403 errors from trying to access admin endpoints
        return {
          credit_card_enabled: false,
          mobile_money_enabled: true,
          bank_transfer_enabled: true,
          manual_payment_enabled: true,
          add_mobile_number: '+250 788 123 456',
          add_momo_code: 'ADD2024',
          // Bank details for manual payments
          bank_details: {
            bank_name: 'Bank of Kigali',
            account_name: 'African Deals Domain',
            account_number: '123456789',
            swift_code: 'BKGLRWRW'
          }
        };
      }

      showManualPaymentFallback() {
        document.getElementById('escrowPaymentFields').classList.remove('hidden');
        this.loadEscrowPaymentDetails();
      }

      async loadEscrowPaymentDetails() {
        const paymentConfig = await this.loadPaymentConfiguration();
        
        document.getElementById('escrow-mobile-number').textContent = 
          paymentConfig.add_mobile_number || '+250 788 123 456';
        document.getElementById('escrow-momo-code').textContent = 
          paymentConfig.add_momo_code || 'ADD2024';
        document.getElementById('escrow-amount').textContent = 
          `FRw ${this.total.toLocaleString()}`;
      }

      setupProfileDropdown() {
        const profileBtn = document.getElementById('profile-btn');
        const profileDropdown = document.getElementById('profile-dropdown');
        const signoutBtn = document.getElementById('signout-btn');

        profileBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          profileDropdown.classList.toggle('hidden');
        });

        document.addEventListener('click', () => {
          profileDropdown.classList.add('hidden');
        });

        signoutBtn.addEventListener('click', () => {
          localStorage.removeItem('authToken');
          localStorage.removeItem('userData');
          localStorage.removeItem('checkoutData');
          window.location.href = '/auth/auth-buyer.html';
        });
      }

      async placeOrder() {
        if (!this.validateForm()) {
          return;
        }

        const loadingOverlay = document.getElementById('loading-overlay');
        loadingOverlay.classList.remove('hidden');

        try {
          // Prepare order data with validation
          const formData = new FormData(document.getElementById('checkout-form'));
          
          // Validate cart items
          if (!this.cartItems || this.cartItems.length === 0) {
            this.showNotification('No items in cart to order', 'error');
            loadingOverlay.classList.add('hidden');
            return;
          }
          
          // Validate delivery data
          if (!this.deliveryData || !this.deliveryData.method) {
            this.showNotification('Please select a delivery method first', 'error');
            loadingOverlay.classList.add('hidden');
            return;
          }
          
          const orderData = {
            items: this.cartItems.map(item => {
              const productId = item.product_id || item.id;
              const quantity = parseInt(item.quantity) || 1;
              const price = parseFloat(item.price) || 0;
              
              if (!productId || quantity <= 0 || price <= 0) {
                throw new Error(`Invalid item data: ${item.name || 'Unknown item'}`);
              }
              
              return {
                product_id: productId,
                quantity: quantity,
                unit_price: price,
                total_price: price * quantity
              };
            }),
            shipping: {
              firstName: formData.get('firstName')?.trim() || '',
              lastName: formData.get('lastName')?.trim() || '',
              email: formData.get('email')?.trim() || '',
              phone: formData.get('phone')?.trim() || '',
              notes: formData.get('notes')?.trim() || ''
            },
            payment: {
              method: this.selectedPaymentMethod || 'escrow_fallback'
            },
            total: this.total || 0,
            delivery_method: this.deliveryData.method,
            pickup_site_id: this.deliveryData.pickupSiteId || null,
            delivery_address: this.deliveryData.deliveryAddress || null,
            marketplace_type: 'physical'
          };
          
          // Additional validation
          if (!orderData.shipping.firstName || !orderData.shipping.lastName || 
              !orderData.shipping.email || !orderData.shipping.phone) {
            this.showNotification('Please fill in all required contact information', 'error');
            loadingOverlay.classList.add('hidden');
            return;
          }
          
          console.log('📦 Prepared order data:', orderData);

          // Handle payment proof upload for manual payments
          if (this.selectedPaymentMethod === 'escrow_fallback' || !this.selectedPaymentMethod) {
            const paymentProofFile = document.getElementById('paymentProof').files[0];
            if (!paymentProofFile) {
              this.showNotification('Please upload payment screenshot for manual payment', 'error');
              loadingOverlay.classList.add('hidden');
              return;
            }

            // Upload payment proof first
            const uploadFormData = new FormData();
            uploadFormData.append('paymentProof', paymentProofFile);

            const uploadResponse = await fetch('/api/upload/payment-proof', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
              },
              body: uploadFormData
            });

            if (uploadResponse.ok) {
              const uploadData = await uploadResponse.json();
              orderData.payment.payment_proof = uploadData.fileUrl;
            } else {
              this.showNotification('Failed to upload payment proof', 'error');
              loadingOverlay.classList.add('hidden');
              return;
            }
          }

          // Create the order
          const token = localStorage.getItem('authToken');
          const userData = localStorage.getItem('userData');
          
          // Debug logging
          console.log('🔍 Debug - Token exists:', !!token);
          console.log('🔍 Debug - User data exists:', !!userData);
          if (userData) {
            try {
              const user = JSON.parse(userData);
              console.log('🔍 Debug - User role:', user.role);
              console.log('🔍 Debug - User ID:', user.id);
            } catch (e) {
              console.error('🔍 Debug - Failed to parse user data:', e);
            }
          }
          
          const response = await fetch('/api/orders', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(orderData)
          });

          if (response.ok) {
            const data = await response.json();
            this.showNotification('Order placed successfully!', 'success');

            // Clear checkout data
            localStorage.removeItem('checkoutData');

            // Clear cart and show success inline instead of redirecting to payment-mobile
            setTimeout(() => {
              // Clear cart completely
              localStorage.removeItem('cart');
              
              // Show order success inline - no more payment-mobile redirect
              this.showOrderSuccess(data.order);
            }, 2000);
          } else {
            const errorData = await response.json();
            console.error('🔍 Debug - Order creation failed:', errorData);
            console.error('🔍 Debug - Response status:', response.status);
            
            let errorMessage = 'Failed to place order. Please try again.';
            if (errorData.error) {
              // Handle specific error messages
              if (errorData.error.includes('Only buyers')) {
                errorMessage = 'Access denied. Please ensure you are logged in as a buyer or authorized agent.';
              } else if (errorData.error.includes('Invalid user account')) {
                errorMessage = 'Account verification failed. Please log in again.';
              } else if (errorData.error.includes('payment')) {
                errorMessage = 'Payment information is invalid. Please check your payment details.';
              } else if (errorData.error.includes('delivery')) {
                errorMessage = 'Delivery information is invalid. Please select a valid delivery method.';
              } else {
                errorMessage = errorData.error;
              }
            }
            
            this.showNotification(errorMessage, 'error');
            
            // If authentication error, redirect to login
            if (response.status === 401 || response.status === 403) {
              setTimeout(() => {
                localStorage.clear();
                window.location.href = '/auth/auth-buyer.html';
              }, 3000);
            }
          }
        } catch (error) {
          console.error('Error placing order:', error);
          this.showNotification('Failed to place order. Please try again.', 'error');
        } finally {
          loadingOverlay.classList.add('hidden');
        }
      }

      validateForm() {
        const requiredFields = ['firstName', 'lastName', 'email', 'phone'];
        let isValid = true;

        requiredFields.forEach(field => {
          const element = document.getElementById(field);
          if (!element.value.trim()) {
            element.classList.add('border-red-500');
            isValid = false;
          } else {
            element.classList.remove('border-red-500');
          }
        });

        // Validate payment method selection
        if (!this.selectedPaymentMethod) {
          this.showNotification('Please select a payment method', 'error');
          return false;
        }

        // Validate payment proof for manual payments
        if (this.selectedPaymentMethod === 'escrow_fallback' || !this.selectedPaymentMethod) {
          const paymentProofFile = document.getElementById('paymentProof').files[0];
          if (!paymentProofFile) {
            this.showNotification('Please upload payment screenshot', 'error');
            return false;
          }
        }

        if (!isValid) {
          this.showNotification('Please fill in all required fields', 'error');
        }

        return isValid;
      }

      async clearCart() {
        try {
          const token = localStorage.getItem('authToken');
          await fetch('/api/cart/clear', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
        } catch (error) {
          console.error('Error clearing cart:', error);
          // Don't block the flow if cart clearing fails
        }
      }

      showOrderSuccess(order) {
        // Hide loading overlay
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) loadingOverlay.classList.add('hidden');
        
        // Replace the entire checkout content with success message
        const mainContent = document.querySelector('.max-w-6xl.mx-auto');
        if (mainContent) {
          mainContent.innerHTML = `
            <div class="text-center py-12">
              <div class="success-animation">
                <div class="text-6xl mb-6">🎉</div>
                <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">Order Placed Successfully!</h1>
                <p class="text-xl text-gray-600 mb-8">Thank you for your purchase</p>
                
                <div class="bg-white rounded-2xl shadow-lg p-8 mb-8 max-w-2xl mx-auto">
                  <h2 class="text-xl font-semibold text-gray-900 mb-6">Order Details</h2>
                  <div class="space-y-3 text-left">
                    <div class="flex justify-between">
                      <span class="text-gray-600">Order Number:</span>
                      <span class="font-semibold">#${order.order_number}</span>
                    </div>
                    <div class="flex justify-between">
                      <span class="text-gray-600">Total Amount:</span>
                      <span class="font-semibold text-green-600">${this.formatCurrency(order.total_amount)}</span>
                    </div>
                    <div class="flex justify-between">
                      <span class="text-gray-600">Status:</span>
                      <span class="font-semibold text-blue-600">${order.status}</span>
                    </div>
                    <div class="flex justify-between">
                      <span class="text-gray-600">Payment Status:</span>
                      <span class="font-semibold text-orange-600">${order.payment_status || 'Processing'}</span>
                    </div>
                  </div>
                </div>
                
                <div class="bg-blue-50 border border-blue-200 rounded-xl p-6 mb-8 max-w-2xl mx-auto">
                  <h3 class="font-semibold text-blue-900 mb-3">📧 What's Next?</h3>
                  <div class="text-blue-800 text-sm space-y-2 text-left">
                    <p>• You'll receive an order confirmation email shortly</p>
                    <p>• Track your order status in your orders page</p>
                    <p>• Our team will process your payment and notify you</p>
                    <p>• Delivery will begin once payment is confirmed</p>
                  </div>
                </div>
                
                <div class="flex flex-col sm:flex-row gap-4 justify-center">
                  <a href="/buyer/orders.html" class="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-xl font-semibold transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105">
                    Track Order
                  </a>
                  <a href="/buyer/buyers-home.html" class="bg-white hover:bg-gray-50 text-gray-800 border-2 border-gray-300 px-8 py-3 rounded-xl font-semibold transition-all duration-300">
                    Continue Shopping
                  </a>
                </div>
              </div>
            </div>
            
            <style>
              .success-animation {
                animation: slideInUp 0.8s ease-out;
              }
              
              @keyframes slideInUp {
                from {
                  transform: translateY(30px);
                  opacity: 0;
                }
                to {
                  transform: translateY(0);
                  opacity: 1;
                }
              }
            </style>
          `;
        }
      }

      formatCurrency(amount) {
        const currency = localStorage.getItem('selectedCurrency') || 'RWF';
        const currencySymbol = {
          'USD': '$',
          'RWF': 'FRw',
          'EUR': '€',
          'CNY': '¥',
          'KES': 'Ksh',
          'NGN': '₦'
        }[currency] || 'FRw';
        
        return `${currencySymbol} ${parseFloat(amount || 0).toLocaleString()}`;
      }

      showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-medium shadow-lg transform transition-all duration-300 ${
          type === 'success' ? 'bg-green-500' : 
          type === 'error' ? 'bg-red-500' : 'bg-blue-500'
        }`;
        notification.textContent = message;

        document.body.appendChild(notification);

        // Animate in
        setTimeout(() => {
          notification.style.transform = 'translateX(0)';
        }, 100);

        // Remove after 5 seconds
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => {
            notification.remove();
          }, 300);
        }, 5000);
      }
    }

    // Initialize the checkout manager when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      new CheckoutManager();
    });
  </script>
</body>
</html>
     
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Track Order - Buyer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .glass-morphism {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        #trackingMap { 
            height: 500px; 
            width: 100%; 
            border-radius: 0.75rem;
        }
        .leaflet-container { 
            border-radius: 0.75rem; 
        }
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        .status-pending { background-color: #fef3c7; color: #92400e; }
        .status-assigned { background-color: #dbeafe; color: #1e40af; }
        .status-picked_up { background-color: #fde68a; color: #92400e; }
        .status-in_transit { background-color: #c7d2fe; color: #3730a3; }
        .status-delivered { background-color: #d1fae5; color: #065f46; }
        .status-cancelled { background-color: #fecaca; color: #991b1b; }
        .status-delivery_issue { background-color: #fecaca; color: #991b1b; }
    </style>
    <script src="/shared/auth-utils.js"></script>
    <script src="/shared/mode-switcher.js"></script>
    <script src="/shared/buyer-navigation.js"></script>
</head>
<body class="min-h-screen gradient-bg">
    <!-- Navigation Container -->
    <div id="navigation-container"></div>
    
    <!-- Mode Switcher -->
    <div class="mode-switcher-container" data-mode-switch="">
        <!-- Mode switcher will be inserted here by JavaScript -->
    </div>
                    </button>
                    <h1 class="text-2xl font-bold text-white">Track Your Order</h1>
                </div>
                <div class="flex items-center space-x-4">
                    <button onclick="refreshTracking()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </header>

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Order Info Card -->
        <div class="glass-morphism rounded-xl p-6 mb-8">
            <div class="flex items-center justify-between">
                <div id="orderInfo">
                    <div class="flex items-center space-x-4">
                        <div class="p-3 bg-blue-500 rounded-lg">
                            <i class="fas fa-box text-white text-xl"></i>
                        </div>
                        <div>
                            <h2 class="text-xl font-semibold text-white">Loading order...</h2>
                            <p class="text-gray-300">Please wait</p>
                        </div>
                    </div>
                </div>
                <div id="orderStatus" class="status-badge status-pending">
                    Loading...
                </div>
            </div>
        </div>

        <!-- Map and Details Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Map Section -->
            <div class="lg:col-span-2">
                <div class="glass-morphism rounded-xl p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-white">Live Tracking</h3>
                        <div class="flex items-center space-x-2">
                            <div id="connectionStatus" class="flex items-center space-x-2">
                                <div class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
                                <span class="text-sm text-gray-300">Connecting...</span>
                            </div>
                        </div>
                    </div>
                    <div id="trackingMap" class="rounded-lg overflow-hidden border border-white/20"></div>
                    
                    <!-- Map Controls -->
                    <div class="flex justify-between items-center mt-4">
                        <div class="flex space-x-2">
                            <button onclick="centerOnAgent()" class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm">
                                <i class="fas fa-crosshairs mr-1"></i>Center on Agent
                            </button>
                            <button onclick="showRoute()" class="bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-lg text-sm">
                                <i class="fas fa-route mr-1"></i>Show Route
                            </button>
                        </div>
                        <div class="text-sm text-gray-300">
                            <i class="fas fa-clock mr-1"></i>
                            <span id="lastUpdate">Never</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Details Section -->
            <div class="space-y-6">
                <!-- Product Details -->
                <div class="glass-morphism rounded-xl p-6">
                    <h3 class="text-lg font-semibold text-white mb-4">Product Details</h3>
                    <div id="productDetails" class="space-y-4">
                        <div class="animate-pulse">
                            <div class="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
                            <div class="h-4 bg-gray-300 rounded w-1/2"></div>
                        </div>
                    </div>
                </div>

                <!-- Locations -->
                <div class="glass-morphism rounded-xl p-6">
                    <h3 class="text-lg font-semibold text-white mb-4">Locations</h3>
                    <div id="locationDetails" class="space-y-4">
                        <!-- Seller Location -->
                        <div class="flex items-start space-x-3">
                            <div class="p-2 bg-orange-500 rounded-lg">
                                <i class="fas fa-store text-white text-sm"></i>
                            </div>
                            <div class="flex-1">
                                <h4 class="font-medium text-white">Pickup Location</h4>
                                <p id="sellerLocation" class="text-gray-300 text-sm">Loading...</p>
                            </div>
                        </div>

                        <!-- Buyer Location -->
                        <div class="flex items-start space-x-3">
                            <div class="p-2 bg-green-500 rounded-lg">
                                <i class="fas fa-home text-white text-sm"></i>
                            </div>
                            <div class="flex-1">
                                <h4 class="font-medium text-white">Delivery Location</h4>
                                <p id="buyerLocation" class="text-gray-300 text-sm">Loading...</p>
                            </div>
                        </div>

                        <!-- Agent Location -->
                        <div class="flex items-start space-x-3">
                            <div class="p-2 bg-blue-500 rounded-lg">
                                <i class="fas fa-motorcycle text-white text-sm"></i>
                            </div>
                            <div class="flex-1">
                                <h4 class="font-medium text-white">Agent Location</h4>
                                <p id="agentLocation" class="text-gray-300 text-sm">Loading...</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Chat -->
                <div class="glass-morphism rounded-xl p-6">
                    <h3 class="text-lg font-semibold text-white mb-4"><i class="fas fa-comments mr-2"></i>Chat with Agent</h3>
                    <div id="chatMessages" class="h-64 overflow-y-auto space-y-4 p-4 bg-black/20 rounded-lg mb-4">
                        <div class="text-center text-gray-400 py-4">
                            <i class="fas fa-spinner fa-spin text-2xl mb-2"></i>
                            <p>Loading chat history...</p>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <input type="text" id="chatInput" placeholder="Type your message..." class="flex-1 bg-white/10 border border-white/20 rounded-lg text-white px-4 py-2 focus:outline-none focus:border-blue-400 placeholder-gray-400">
                        <button onclick="sendChatMessage()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>

                <!-- Tracking History -->
                <div class="glass-morphism rounded-xl p-6">
                    <h3 class="text-lg font-semibold text-white mb-4">Tracking History</h3>
                    <div id="trackingHistory" class="space-y-3">
                        <div class="animate-pulse">
                            <div class="h-3 bg-gray-300 rounded w-full mb-2"></div>
                            <div class="h-3 bg-gray-300 rounded w-2/3"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Loading order details...</p>
        </div>
    </div>

    <!-- Notification Toast -->
    <div id="notification-toast" class="fixed top-4 right-4 z-50 hidden">
        <div class="bg-white text-gray-800 px-6 py-4 rounded-lg shadow-lg border-l-4 border-green-500">
            <div class="flex items-center">
                <i class="fas fa-check-circle text-green-500 mr-3"></i>
                <span id="notification-message">Success!</span>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <script>
        // Global variables
        const authToken = localStorage.getItem('authToken');
        const userData = JSON.parse(localStorage.getItem('userData') || '{}');
        
        if (!authToken || userData.role !== 'buyer') {
            window.location.href = '/auth/auth-buyer.html';
        }

        let map = null;
        let socket = null;
        let routeControl = null;
        let markers = {
            agent: null,
            seller: null,
            buyer: null
        };
        let currentOrder = null;
        let orderId = null;

        // Get order ID from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        orderId = urlParams.get('id');

        if (!orderId) {
            showNotification('No order ID provided', 'error');
            setTimeout(() => goBack(), 2000);
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeSocket();
            loadOrderDetails();
            initializeMap();
            loadChatMessages();

            // Add event listener for Enter key on chat input
            const chatInput = document.getElementById('chatInput');
            if (chatInput) {
                chatInput.addEventListener('keypress', function (e) {
                    if (e.key === 'Enter') sendChatMessage();
                });
            }
        });

        // --- SOCKET INITIALIZATION ---
        function initializeSocket() {
            socket = io();
            
            socket.on('connect', () => {
                updateConnectionStatus('connected');
                socket.emit('user:login', userData);
                // Join the chat room for this order
                socket.emit('chat:join', { orderId });
            });

            socket.on('disconnect', () => {
                updateConnectionStatus('disconnected');
            });

            // Listen for new chat messages
            socket.on('chat:new_message', (data) => {
                // Check if the message is for this order and not from the current user
                if (data.orderId == orderId && data.sender_id != userData.id) {
                    displayChatMessage(data, 'incoming');
                }
            });

            socket.on('order_status_update', (data) => {
                if (data.orderId == orderId) {
                    loadOrderDetails();
                }
            });

            socket.on('agent:location_update', (data) => {
                if (data.orderId == orderId) {
                    updateAgentLocation(data.location);
                }
            });
        }

        // --- CHAT FUNCTIONS ---
        async function loadChatMessages() {
            const chatMessagesDiv = document.getElementById('chatMessages');
            try {
                const response = await fetch(`/api/chat/${orderId}`, {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                if (!response.ok) throw new Error('Failed to load chat messages');
                
                const data = await response.json();
                if (data.success && data.messages.length > 0) {
                    chatMessagesDiv.innerHTML = '';
                    data.messages.forEach(msg => {
                        const type = msg.sender_id === userData.id ? 'outgoing' : 'incoming';
                        displayChatMessage(msg, type);
                    });
                } else {
                    chatMessagesDiv.innerHTML = `
                        <div class="text-center text-gray-400 py-4">
                            <i class="fas fa-comments text-2xl mb-2"></i>
                            <p>No messages yet. Start the conversation!</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading chat messages:', error);
                chatMessagesDiv.innerHTML = `<p class="text-red-400 text-center">Could not load chat.</p>`;
            }
        }

        function displayChatMessage(msg, type) {
            const chatMessagesDiv = document.getElementById('chatMessages');
            const messageEl = document.createElement('div');
            
            const senderName = type === 'outgoing' ? 'You' : msg.sender_name || 'User';
            const messageTime = new Date(msg.created_at || Date.now()).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            if (type === 'outgoing') {
                messageEl.className = 'flex flex-col items-end';
                messageEl.innerHTML = `
                    <div class="text-xs text-gray-300 mb-1">${senderName}</div>
                    <div class="bg-blue-500 text-white px-4 py-2 rounded-2xl max-w-xs">
                        <p>${msg.message}</p>
                    </div>
                    <div class="text-xs text-gray-400 mt-1">${messageTime}</div>
                `;
            } else {
                messageEl.className = 'flex flex-col items-start';
                messageEl.innerHTML = `
                    <div class="text-xs text-gray-300 mb-1">${senderName}</div>
                    <div class="bg-gray-200 text-gray-800 px-4 py-2 rounded-2xl max-w-xs">
                        <p>${msg.message}</p>
                    </div>
                    <div class="text-xs text-gray-400 mt-1">${messageTime}</div>
                `;
            }
            chatMessagesDiv.appendChild(messageEl);
            chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight; // Scroll to bottom
        }

        async function sendChatMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();

            if (!message) return;

            const optimisticMessageData = {
                message: message,
                sender_id: userData.id,
                sender_name: userData.name,
                created_at: new Date().toISOString()
            };

            // Optimistically display message
            displayChatMessage(optimisticMessageData, 'outgoing');
            input.value = '';

            try {
                // Send message to server, which will save and broadcast it
                await fetch(`/api/chat/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ message })
                });

            } catch (error) {
                console.error('Error sending message:', error);
                showNotification('Failed to send message', 'error');
            }
        }

        // --- LOAD ORDER DETAILS ---
        async function loadOrderDetails() {
            try {
                const response = await fetch(`/api/orders/${orderId}`, {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });

                if (!response.ok) {
                    throw new Error('Failed to load order details');
                }

                const data = await response.json();
                currentOrder = data.order;
                
                updateOrderInfo(currentOrder);
                updateProductDetails(currentOrder);
                updateLocationDetails(currentOrder);
                loadTrackingHistory();
                
                if (map && currentOrder) {
                    updateMapMarkers(currentOrder);
                }

                hideLoadingOverlay();
            } catch (error) {
                console.error('Error loading order details:', error);
                showNotification('Failed to load order details', 'error');
                hideLoadingOverlay();
            }
        }

        // --- MAP INITIALIZATION ---
        function initializeMap() {
            map = L.map('trackingMap').setView([-1.9441, 30.0619], 13); // Default to Kigali
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
        }

        // --- UPDATE FUNCTIONS ---
        function updateOrderInfo(order) {
            const orderInfo = document.getElementById('orderInfo');
            const orderStatus = document.getElementById('orderStatus');
            
            orderInfo.innerHTML = `
                <div class="flex items-center space-x-4">
                    <div class="p-3 bg-blue-500 rounded-lg">
                        <i class="fas fa-box text-white text-xl"></i>
                    </div>
                    <div>
                        <h2 class="text-xl font-semibold text-white">Order #${order.id}</h2>
                        <p class="text-gray-300">Seller: ${order.seller_name || 'Unknown'}</p>
                        <p class="text-gray-300">Total: $${order.total_amount}</p>
                    </div>
                </div>
            `;
            
            orderStatus.className = `status-badge status-${order.tracking_status || order.status}`;
            orderStatus.textContent = getStatusText(order.tracking_status || order.status);
        }

        function updateProductDetails(order) {
            const productDetails = document.getElementById('productDetails');
            
            if (order.items && order.items.length > 0) {
                productDetails.innerHTML = order.items.map(item => `
                    <div class="flex items-start space-x-3 p-3 bg-white/10 rounded-lg">
                        <img src="${item.product_image || '/public/images/placeholder.jpg'}" 
                             alt="${item.product_name}" 
                             class="w-12 h-12 object-cover rounded-lg">
                        <div class="flex-1">
                            <h4 class="font-medium text-white">${item.product_name}</h4>
                            <p class="text-gray-300 text-sm">Quantity: ${item.quantity}</p>
                            <p class="text-gray-300 text-sm">Price: $${item.unit_price}</p>
                        </div>
                    </div>
                `).join('');
            } else {
                productDetails.innerHTML = `
                    <div class="text-center text-gray-300 py-4">
                        <i class="fas fa-box-open text-2xl mb-2"></i>
                        <p>No product details available</p>
                    </div>
                `;
            }
        }

        function updateLocationDetails(order) {
            const sellerLocation = document.getElementById('sellerLocation');
            const buyerLocation = document.getElementById('buyerLocation');
            const agentLocation = document.getElementById('agentLocation');
            
            // Parse locations if they're JSON strings
            let pickupLoc = order.pickup_location;
            let deliveryLoc = order.delivery_location;
            
            if (typeof pickupLoc === 'string') {
                try { pickupLoc = JSON.parse(pickupLoc); } catch (e) { pickupLoc = null; }
            }
            if (typeof deliveryLoc === 'string') {
                try { deliveryLoc = JSON.parse(deliveryLoc); } catch (e) { deliveryLoc = null; }
            }
            
            sellerLocation.textContent = pickupLoc?.address || 'Address not available';
            buyerLocation.textContent = deliveryLoc?.address || order.delivery_address || 'Address not available';
            agentLocation.textContent = 'Waiting for agent location...';
        }

        function updateMapMarkers(order) {
            if (!map) return;
            
            // Clear existing markers
            Object.values(markers).forEach(marker => {
                if (marker) map.removeLayer(marker);
            });
            
            // Parse locations
            let pickupLoc = order.pickup_location;
            let deliveryLoc = order.delivery_location;
            
            if (typeof pickupLoc === 'string') {
                try { pickupLoc = JSON.parse(pickupLoc); } catch (e) { pickupLoc = null; }
            }
            if (typeof deliveryLoc === 'string') {
                try { deliveryLoc = JSON.parse(deliveryLoc); } catch (e) { deliveryLoc = null; }
            }
            
            // Add seller marker
            if (pickupLoc && pickupLoc.lat && pickupLoc.lng) {
                markers.seller = L.marker([pickupLoc.lat, pickupLoc.lng], {
                    icon: L.icon({
                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/190/190411.png',
                        iconSize: [32, 32],
                        iconAnchor: [16, 32]
                    })
                }).addTo(map).bindPopup(`
                    <div class="text-center">
                        <strong>Pickup Location</strong><br>
                        ${pickupLoc.address || 'Seller Location'}
                    </div>
                `);
            }
            
            // Add buyer marker
            if (deliveryLoc && deliveryLoc.lat && deliveryLoc.lng) {
                markers.buyer = L.marker([deliveryLoc.lat, deliveryLoc.lng], {
                    icon: L.icon({
                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/25/25694.png',
                        iconSize: [32, 32],
                        iconAnchor: [16, 32]
                    })
                }).addTo(map).bindPopup(`
                    <div class="text-center">
                        <strong>Delivery Location</strong><br>
                        ${deliveryLoc.address || order.delivery_address || 'Your Location'}
                    </div>
                `);
            }
            
            // Fit map to show all markers
            const group = new L.featureGroup(Object.values(markers).filter(m => m));
            if (group.getLayers().length > 0) {
                map.fitBounds(group.getBounds().pad(0.1));
            }
        }

        function updateAgentLocation(location) {
            if (!map || !location) return;
            
            // Remove existing agent marker
            if (markers.agent) {
                map.removeLayer(markers.agent);
            }
            
            // Add new agent marker
            markers.agent = L.marker([location.lat, location.lng], {
                icon: L.icon({
                    iconUrl: 'https://cdn-icons-png.flaticon.com/512/3448/3448339.png',
                    iconSize: [32, 32],
                    iconAnchor: [16, 32]
                })
            }).addTo(map).bindPopup(`
                <div class="text-center">
                    <strong>Agent Location</strong>
                </div>
            `);
            
            // Update location text
            document.getElementById('agentLocation').textContent = 'Agent is on the way!';
            document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
        }

        async function loadTrackingHistory() {
            try {
                const response = await fetch(`/api/orders/${orderId}/tracking`, {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });

                if (response.ok) {
                    const data = await response.json();
                    const trackingHistory = document.getElementById('trackingHistory');
                    
                    if (data.order && data.order.tracking && data.order.tracking.length > 0) {
                        trackingHistory.innerHTML = data.order.tracking.map(track => `
                            <div class="flex items-start space-x-3 p-3 bg-white/10 rounded-lg">
                                <div class="p-2 bg-blue-500 rounded-lg">
                                    <i class="fas fa-clock text-white text-xs"></i>
                                </div>
                                <div class="flex-1">
                                    <p class="text-white text-sm font-medium">${getStatusText(track.status)}</p>
                                    <p class="text-gray-300 text-xs">${track.notes || 'Status updated'}</p>
                                    <p class="text-gray-400 text-xs">${new Date(track.created_at).toLocaleString()}</p>
                                </div>
                            </div>
                        `).join('');
                    } else {
                        trackingHistory.innerHTML = `
                            <div class="text-center text-gray-400 py-4">
                                <i class="fas fa-history text-2xl mb-2"></i>
                                <p>No tracking history available</p>
                            </div>
                        `;
                    }
                }
            } catch (error) {
                console.error('Error loading tracking history:', error);
            }
        }

        function centerOnAgent() {
            if (markers.agent && map) {
                map.setView(markers.agent.getLatLng(), 16);
            }
        }

        function showRoute() {
            if (!map || !markers.seller || !markers.buyer) {
                showNotification('Route cannot be displayed - missing location data', 'error');
                return;
            }
            
            // Remove existing route
            if (routeControl) {
                map.removeControl(routeControl);
            }
            
            // Create new route
            const waypoints = [markers.seller.getLatLng()];
            if (markers.agent) {
                waypoints.push(markers.agent.getLatLng());
            }
            waypoints.push(markers.buyer.getLatLng());
            
            routeControl = L.Routing.control({
                waypoints: waypoints,
                routeWhileDragging: false,
                addWaypoints: false,
                createMarker: () => null // Don't create additional markers
            }).addTo(map);
        }

        function refreshTracking() {
            loadOrderDetails();
        }

        function goBack() {
            window.history.back();
        }

        // --- UTILITY FUNCTIONS ---
        function getStatusText(status) {
            const statusMap = {
                'pending': 'Pending',
                'assigned': 'Assigned',
                'picked_up': 'Picked Up',
                'in_transit': 'In Transit',
        'delivery_issue': 'Delivery Issue',
                'delivered': 'Delivered',
                'cancelled': 'Cancelled'
            };
            return statusMap[status] || status;
        }

        function updateConnectionStatus(status) {
            const connectionStatus = document.getElementById('connectionStatus');
            
            if (status === 'connected') {
                connectionStatus.innerHTML = `
                    <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span class="text-sm text-gray-300">Connected</span>
                `;
            } else {
                connectionStatus.innerHTML = `
                    <div class="w-2 h-2 bg-red-500 rounded-full"></div>
                    <span class="text-sm text-gray-300">Disconnected</span>
                `;
            }
        }

        function showNotification(message, type = 'success') {
            const toast = document.getElementById('notification-toast');
            const messageEl = document.getElementById('notification-message');
            
            messageEl.textContent = message;
            
            // Update colors based on type
            const toastDiv = toast.querySelector('div');
            if (type === 'error') {
                toastDiv.className = 'bg-white text-gray-800 px-6 py-4 rounded-lg shadow-lg border-l-4 border-red-500';
                toastDiv.querySelector('i').className = 'fas fa-exclamation-circle text-red-500 mr-3';
            } else {
                toastDiv.className = 'bg-white text-gray-800 px-6 py-4 rounded-lg shadow-lg border-l-4 border-green-500';
                toastDiv.querySelector('i').className = 'fas fa-check-circle text-green-500 mr-3';
            }
            
            toast.classList.remove('hidden');
            
            setTimeout(() => {
                toast.classList.add('hidden');
            }, 3000);
        }

        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').classList.add('hidden');
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (socket) {
                socket.disconnect();
            }
        });

        // Initialize navigation and page
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize navigation
            BuyerNavigation.inject('navigation-container', {
                currentPage: 'orders',
                userName: 'Buyer',
                cartCount: 0
            });

            // Initialize page
            initializeTracking();
        });
    </script>
</body>
</html>
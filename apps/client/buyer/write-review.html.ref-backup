<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Minimal Navigation System -->
  <script src="/shared/minimal-navigation-injector.js"></script>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Write Review | ADD Physical Products</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/shared/router.js"></script>
    <script src="/shared/mode-manager.js"></script>
<script src="/shared/navigation.js"></script>
  <script src="/shared/auth-helper.js"></script>
  <link rel="icon" href="/public/images/logo.png">
  <style>
    .glass { backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); }
    .fade-in { animation: fadeIn 0.6s ease-in-out; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
    .star-rating { display: inline-flex; }
    .star-rating input { display: none; }
    .star-rating label { cursor: pointer; font-size: 2rem; color: #d1d5db; transition: color 0.2s; }
    .star-rating input:checked ~ label { color: #fbbf24; }
    .star-rating label:hover, .star-rating label:hover ~ label { color: #fbbf24; }
    .star-rating input:checked ~ label:hover, .star-rating input:checked ~ label:hover ~ label { color: #f59e0b; }
  </style>
</head>
<body class="bg-gray-50 min-h-screen" data-page-type="buyer">
  
  <!-- Navigation preserved - each page has unique navigation -->

  
  <!-- Navigation preserved - each page has unique navigation -->

  
  
  
  <!-- Header Component -->
  <div id="buyer-header"></div>
  
  <script src="shared-components.js"></script>

  <!-- Main Content -->
  <main class="max-w-4xl mx-auto px-4 py-8 pt-20">
    <div class="bg-white rounded-2xl shadow-lg p-8 fade-in">
      <!-- Page Header -->
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Write a Review</h1>
        <p class="text-gray-600">Share your experience with this product</p>
      </div>

      <!-- Product Info -->
      <div id="product-info" class="bg-gray-50 rounded-lg p-6 mb-8">
        <div class="flex items-center gap-4">
          <img id="product-image" src="" alt="Product" class="w-20 h-20 object-cover rounded-lg">
          <div>
            <h3 id="product-name" class="text-lg font-semibold text-gray-900"></h3>
            <p id="product-price" class="text-gray-600"></p>
            <p id="order-date" class="text-sm text-gray-500"></p>
          </div>
        </div>
      </div>

      <!-- Review Form -->
      <form id="review-form" class="space-y-6">
        <!-- Rating -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-3">Rating</label>
          <div class="star-rating">
            <input type="radio" name="rating" value="5" id="star5">
            <label for="star5">★</label>
            <input type="radio" name="rating" value="4" id="star4">
            <label for="star4">★</label>
            <input type="radio" name="rating" value="3" id="star3">
            <label for="star3">★</label>
            <input type="radio" name="rating" value="2" id="star2">
            <label for="star2">★</label>
            <input type="radio" name="rating" value="1" id="star1">
            <label for="star1">★</label>
          </div>
          <p class="text-sm text-gray-500 mt-2">Click on a star to rate this product</p>
        </div>

        <!-- Title -->
        <div>
          <label for="review-title" class="block text-sm font-medium text-gray-700 mb-2">Review Title</label>
          <input type="text" id="review-title" name="title" required
                 class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                 placeholder="Summarize your experience in a few words">
        </div>

        <!-- Comment -->
        <div>
          <label for="review-comment" class="block text-sm font-medium text-gray-700 mb-2">Review Comment</label>
          <textarea id="review-comment" name="comment" rows="6" required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Share your detailed experience with this product..."></textarea>
        </div>

        <!-- Image Upload -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Add Photos (Optional)</label>
          <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
            <input type="file" id="review-images" multiple accept="image/*" class="hidden">
            <label for="review-images" class="cursor-pointer">
              <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              <p class="mt-2 text-sm text-gray-600">Click to upload images</p>
              <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
            </label>
          </div>
          <div id="image-preview" class="mt-4 grid grid-cols-4 gap-2"></div>
        </div>

        <!-- Submit Button -->
        <div class="flex gap-4 pt-6">
          <button type="submit" 
                  class="flex-1 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-semibold">
            Submit Review
          </button>
          <button type="button" onclick="history.back()" 
                  class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </main>

  <script>
    // Get URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('product_id');
    const orderId = urlParams.get('order_id');

    // Load product information
    async function loadProductInfo() {
      try {
        const response = await fetch(`/api/products/${productId}`);
        const data = await response.json();
        
        if (data.success) {
          const product = data.product;
          document.getElementById('product-image').src = `/uploads/${product.main_image}`;
          document.getElementById('product-name').textContent = product.name;
          document.getElementById('product-price').textContent = `$${product.price}`;
          
          // Load order information if available
          if (orderId) {
            const orderResponse = await fetch(`/api/orders/${orderId}`);
            const orderData = await orderResponse.json();
            if (orderData.success) {
              const order = orderData.order;
              document.getElementById('order-date').textContent = `Ordered on ${new Date(order.created_at).toLocaleDateString()}`;
            }
          }
        }
      } catch (error) {
        console.error('Error loading product info:', error);
      }
    }

    // Handle image upload
    document.getElementById('review-images').addEventListener('change', function(e) {
      const files = Array.from(e.target.files);
      const preview = document.getElementById('image-preview');
      preview.innerHTML = '';
      
      files.forEach((file, index) => {
        if (file.type.startsWith('image/')) {
          const reader = new FileReader();
          reader.onload = function(e) {
            const img = document.createElement('img');
            img.src = e.target.result;
            img.className = 'w-full h-20 object-cover rounded-lg';
            preview.appendChild(img);
          };
          reader.readAsDataURL(file);
        }
      });
    });

    // Handle form submission
    document.getElementById('review-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const rating = formData.get('rating');
      const title = formData.get('title');
      const comment = formData.get('comment');
      
      if (!rating) {
        alert('Please select a rating');
        return;
      }
      
      try {
        const response = await fetch('/api/reviews', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          },
          body: JSON.stringify({
            product_id: productId,
            rating: parseInt(rating),
            title: title,
            comment: comment,
            images: [] // TODO: Implement image upload
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Review submitted successfully!');
          window.location.href = `/buyer/product-detail.html?id=${productId}`;
        } else {
          alert(data.error || 'Failed to submit review');
        }
      } catch (error) {
        console.error('Error submitting review:', error);
        alert('Failed to submit review. Please try again.');
      }
    });

    // Initialize page
    if (productId) {
      loadProductInfo();
    } else {
      alert('Product ID is required');
      window.location.href = '/buyer/orders.html';
    }
  </script>

  <!-- Navigation utilities for this page -->
  <script>
    // Page-specific navigation setup
    document.addEventListener('DOMContentLoaded', function() {
      // Set page type and mode
      document.body.setAttribute('data-page-type', 'buyer');
      
      
      
      // Add navigation helpers to existing elements
      enhanceExistingNavigation();
      
      // Setup page-specific navigation
      setupPageNavigation();
    });
    
    function enhanceExistingNavigation() {
      // Add data-route attributes to links that don't have them
      const links = document.querySelectorAll('a[href]:not([data-route])');
      links.forEach(link => {
        const href = link.getAttribute('href');
        if (href && !href.startsWith('http') && !href.startsWith('mailto:') && !href.startsWith('tel:')) {
          const route = getRouteForHref(href);
          if (route) {
            link.setAttribute('data-route', route);
          }
        }
      });
      
      // Add journey actions to buttons
      const buttons = document.querySelectorAll('button, .btn, [role="button"]');
      buttons.forEach(button => {
        const text = button.textContent.toLowerCase();
        
        if (text.includes('add') && text.includes('cart')) {
          button.setAttribute('data-journey-action', 'add-to-cart');
        } else if (text.includes('checkout')) {
          button.setAttribute('data-journey-action', 'proceed-checkout');
        } else if (text.includes('place') && text.includes('order')) {
          button.setAttribute('data-journey-action', 'complete-payment');
        } else if (text.includes('login') || text.includes('sign in')) {
          button.setAttribute('data-quick-nav', 'login');
        } else if (text.includes('logout') || text.includes('sign out')) {
          button.setAttribute('data-quick-nav', 'logout');
        }
      });
    }
    
    function setupPageNavigation() {
      // Page-specific navigation setup
      const pageType = 'buyer';
      
      // Add mode indicators if they exist
      const modeIndicators = document.querySelectorAll('.mode-indicator');
      modeIndicators.forEach(indicator => {
        const currentMode = window.navUtils ? window.navUtils.getCurrentMode() : 'marketplace';
        indicator.className = `mode-indicator mode-${currentMode}`;
        indicator.textContent = currentMode === 'marketplace' ? 'Marketplace' : 'Local Market';
      });
      
      // Add quick navigation buttons if they exist
      const homeButtons = document.querySelectorAll('[data-nav="home"], .home-btn');
      homeButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'home'));
      
      const backButtons = document.querySelectorAll('[data-nav="back"], .back-btn');
      backButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'back'));
      
      const dashboardButtons = document.querySelectorAll('[data-nav="dashboard"], .dashboard-btn');
      dashboardButtons.forEach(btn => btn.setAttribute('data-quick-nav', 'dashboard'));
    }
    
    function getRouteForHref(href) {
      // Basic route mapping
      const routeMap = {
        '/': 'home',
        '/public/index.html': 'home',
        '/public/about.html': 'public.about',
        '/public/contact.html': 'public.contact',
        '/public/product-list.html': 'public.product-list',
        '/public/product-detail.html': 'public.product-detail',
        '/buyer/buyers-home.html': 'buyer.dashboard',
        '/buyer/cart.html': 'buyer.cart',
        '/buyer/checkout.html': 'buyer.checkout',
        '/buyer/orders.html': 'buyer.orders',
        '/seller/dashboard.html': 'seller.dashboard',
        '/seller/add-product.html': 'seller.add-product',
        '/agent/dashboard.html': 'agent.dashboard',
        '/admin/dashboard.html': 'admin.dashboard',
        '/auth/auth-buyer.html': 'auth.login',
        '/auth/auth-seller.html': 'auth.login-seller',
        '/auth/auth-agent.html': 'auth.login-agent',
        '/grocery/local-market-home.html': 'local-market.home',
        '/grocery/cart.html': 'local-market.cart'
      };
      
      return routeMap[href] || null;
    }
    
    // Wait for flexible navigation system to be ready
    window.addEventListener('flexibleNavigationReady', function() {
      console.log('✅ Flexible navigation ready on buyer\write-review.html');
      
      // Start appropriate journey if needed
      
    });
  </script>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Track Your Order - ADD Physical Products</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="anonymous">
    <!-- Leaflet Routing Machine CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css" />
    <style>
        .animate-fade-in { animation: fadeIn 0.5s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        #map { height: 450px; width: 100%; border-radius: 1rem; z-index: 10; }
        .timeline-item::before { content: ''; position: absolute; left: 12px; top: 32px; bottom: -8px; width: 2px; background-color: #e5e7eb; }
        .timeline-item:last-child::before { display: none; }
        .pulse-marker { animation: pulse 1.5s infinite; }
        @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7); } 70% { box-shadow: 0 0 0 20px rgba(59, 130, 246, 0); } 100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); } }
    </style>
    <script src="/shared/auth-utils.js"></script>
    <script src="/shared/mode-switcher.js"></script>
    <script src="/shared/buyer-navigation.js"></script>
</head>
<body class="bg-gray-50">
    <!-- Navigation Container -->
    <div id="navigation-container"></div>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 py-8 pt-24">
        <div id="loading-state" class="text-center py-16">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Loading your order tracking details...</p>
        </div>

        <div id="content-container" class="hidden animate-fade-in">
            <!-- Order Header -->
            <div class="mb-8">
                <a href="/buyer/orders.html" class="text-blue-600 hover:text-blue-800 mb-4 inline-block"><i class="fas fa-arrow-left mr-2"></i>Back to My Orders</a>
                <h1 class="text-3xl font-bold text-gray-800">Track Order <span id="order-number" class="text-blue-600"></span></h1>
                <p class="text-gray-500">Order placed on <span id="order-date"></span></p>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- Left Column: Map and Agent Info -->
                <div class="lg:col-span-2 bg-white p-6 rounded-2xl shadow-lg">
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Live Delivery Map</h2>
                    <div id="map" class="bg-gray-200"></div>
                    <div id="agent-info" class="mt-6 p-4 bg-gray-50 rounded-lg hidden">
                        <div class="flex items-center gap-4">
                            <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-truck-fast text-2xl text-blue-600"></i>
                            </div>
                            <div>
                                <p class="font-semibold text-gray-800" id="agent-name">Agent Not Assigned</p>
                                <p class="text-sm text-gray-500" id="agent-phone">---</p>
                            </div>
                            <div class="ml-auto text-right">
                                <p class="font-semibold text-gray-800" id="agent-status" >Offline</p>
                                <p class="text-sm text-gray-500">Status</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column: Order Details & Timeline -->
                <div class="space-y-8">
                    <!-- Order Summary -->
                    <div class="bg-white p-6 rounded-2xl shadow-lg">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Order Summary</h2>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-600">Status</span>
                                <span id="order-status" class="font-semibold text-blue-600">Loading...</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Total Amount</span>
                                <span id="total-amount" class="font-semibold text-gray-800">$0.00</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Items</span>
                                <span id="item-count" class="font-semibold text-gray-800">0</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Est. Arrival</span>
                                <span id="order-eta" class="font-semibold text-gray-800">-- min</span>
                            </div>
                        </div>
                    </div>

                    <!-- Tracking Timeline -->
                    <div class="bg-white p-6 rounded-2xl shadow-lg">
                        <h2 class="text-xl font-bold text-gray-800 mb-6">Delivery Timeline</h2>
                        <div id="tracking-timeline" class="space-y-6">
                            <!-- Timeline items will be injected here -->
                            <p class="text-gray-500">No tracking updates yet.</p>
                        </div>
                    </div>

                    <!-- Agent Rating Section (conditionally shown) -->
                    <div id="rating-section" class="bg-white p-6 rounded-2xl shadow-lg hidden">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Rate Your Delivery</h2>
                        <p class="text-gray-600 mb-4">Your feedback helps us improve. Please rate your experience with the delivery agent.</p>
                        <div id="rating-stars" class="flex justify-center text-3xl text-gray-300 mb-4">
                            <i class="fas fa-star cursor-pointer" data-value="1"></i>
                            <i class="fas fa-star cursor-pointer" data-value="2"></i>
                            <i class="fas fa-star cursor-pointer" data-value="3"></i>
                            <i class="fas fa-star cursor-pointer" data-value="4"></i>
                            <i class="fas fa-star cursor-pointer" data-value="5"></i>
                        </div>
                        <form id="rating-form">
                            <textarea id="rating-comment" rows="3" placeholder="Add a comment (optional)..." class="w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                            <button type="submit" class="mt-4 w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 font-semibold">Submit Review</button>
                        </form>
                        <div id="rating-thanks" class="hidden text-center py-4">
                            <i class="fas fa-check-circle text-3xl text-green-500 mb-2"></i>
                            <p class="font-semibold text-gray-800">Thank you for your feedback!</p>
                        </div>
                    </div>

                    <!-- Chat with Agent -->
                    <div class="bg-white p-6 rounded-2xl shadow-lg">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Chat with Agent</h2>
                        <div id="chat-box" class="h-48 overflow-y-auto bg-gray-50 p-3 rounded-lg mb-4 space-y-3">
                            <!-- Chat messages will appear here -->
                            <p class="text-center text-sm text-gray-400">No messages yet.</p>
                        </div>
                        <form id="chat-form" class="flex gap-2">
                            <input type="text" id="chat-input" placeholder="Type your message..." class="flex-grow border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 font-semibold">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div id="error-state" class="hidden text-center py-16">
            <i class="fas fa-exclamation-triangle text-4xl text-red-400 mb-4"></i>
            <h2 class="text-2xl font-bold text-gray-800 mb-2">Could not load tracking details</h2>
            <p id="error-message" class="text-gray-600 mb-6">There was a problem fetching the order information.</p>
            <a href="/buyer/orders.html" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-semibold">
                Back to My Orders
            </a>
        </div>
    </main>

    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
    <!-- Socket.io client -->
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    
    <script src="/public/auth-check.js"></script>
    <script>
        let currentOrder = null;
        let map = null;
        let agentMarker = null;
        let buyerMarker = null;
        let sellerMarker = null;
        let myLiveLocationMarker = null;
        let agentPathPolyline = null;
        let socket = null;

        const agentIcon = L.divIcon({
            html: '<i class="fas fa-truck-fast text-2xl text-blue-600"></i>',
            className: 'bg-white rounded-full p-2 shadow-lg pulse-marker',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
        });

        const buyerIcon = L.divIcon({
            html: '<i class="fas fa-home text-2xl text-green-600"></i>',
            className: 'bg-white rounded-full p-2 shadow-lg',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
        });

        const sellerIcon = L.divIcon({
            html: '<i class="fas fa-store text-2xl text-orange-600"></i>',
            className: 'bg-white rounded-full p-2 shadow-lg',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
        });

        const myLiveLocationIcon = L.divIcon({
            html: '<i class="fas fa-user-circle text-2xl text-purple-600"></i>',
            className: 'bg-white rounded-full p-2 shadow-lg',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
        });

        document.addEventListener('DOMContentLoaded', async () => {
            // Load header
            fetch('/buyer/components/header.html')
                .then(res => res.text())
                .then(html => document.getElementById('buyer-header').innerHTML = html);

            // Auth check
            const isAuthenticated = await Auth.requireAuth('buyer');
            if (!isAuthenticated) return;

            await loadOrderTracking();
            await loadChatHistory();
            requestBuyerLocation(); // Request buyer's live location
        });

        async function loadOrderTracking() {
            const loadingState = document.getElementById('loading-state');
            const contentContainer = document.getElementById('content-container');
            const errorState = document.getElementById('error-state');

            try {
                const urlParams = new URLSearchParams(window.location.search);
                const orderId = urlParams.get('orderId');

                if (!orderId) {
                    throw new Error("No order ID provided in the URL.");
                }

                const token = Auth.getToken();
                const response = await fetch(`/api/location/order/${orderId}/tracking`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (!response.ok) {
                    const errData = await response.json();
                    throw new Error(errData.error || `Failed to fetch order data. Status: ${response.status}`);
                }

                currentOrder = await response.json();
                
                updateOrderDisplay();
                initializeMap();
                setupSocket();

                loadingState.classList.add('hidden');
                contentContainer.classList.remove('hidden');

                if (map) {
                    // Use requestAnimationFrame to ensure the map resizes after the DOM is painted
                    requestAnimationFrame(() => {
                        map.invalidateSize(true);
                    });
                }

            } catch (error) {
                console.error('Error loading order tracking:', error);
                loadingState.classList.add('hidden');
                errorState.classList.remove('hidden');
                document.getElementById('error-message').textContent = error.message;
            }
        }

        function updateOrderDisplay() {
            if (!currentOrder) return;

            document.getElementById('order-number').textContent = `#${currentOrder.order_number}`;
            document.getElementById('order-date').textContent = new Date(currentOrder.created_at).toLocaleDateString();
            
            // ** FIX: Parse total_amount to a number before using toFixed() **
            const total = parseFloat(currentOrder.total_amount || 0).toFixed(2);
            document.getElementById('total-amount').textContent = `$${total}`;

            document.getElementById('item-count').textContent = currentOrder.items?.length || 0;
            
            updateStatus(currentOrder.status, currentOrder.tracking_status);
            updateTimeline(currentOrder.tracking_history);

            if (currentOrder.agent_name) {
                document.getElementById('agent-info').classList.remove('hidden');
                document.getElementById('agent-name').textContent = currentOrder.agent_name;
                document.getElementById('agent-phone').textContent = currentOrder.agent_phone || 'Not available';
            }

            if (currentOrder.status === 'delivered') {
                document.getElementById('rating-section').classList.remove('hidden');
                setupRating();
            }
        }

        function updateStatus(orderStatus, trackingStatus) {
            const statusEl = document.getElementById('order-status');
            let statusText = (trackingStatus || orderStatus).replace(/_/g, ' ');
            statusText = statusText.charAt(0).toUpperCase() + statusText.slice(1);
            statusEl.textContent = statusText;
        }

        function updateTimeline(history) {
            const timelineContainer = document.getElementById('tracking-timeline');
            if (!history || history.length === 0) {
                timelineContainer.innerHTML = '<p class="text-gray-500">No tracking updates yet.</p>';
                return;
            }

            timelineContainer.innerHTML = history.map(item => {
                const statusText = item.status.replace(/_/g, ' ');
                const notes = item.notes || '';
                return `
                    <div class="relative timeline-item pb-6">
                        <div class="flex items-center">
                            <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white z-10">
                                <i class="fas fa-check text-xs"></i>
                            </div>
                            <div class="ml-4">
                                <p class="font-semibold text-gray-800 capitalize">${statusText}</p>
                                <p class="text-sm text-gray-600">${notes}</p>
                                <p class="text-xs text-gray-500">${new Date(item.timestamp).toLocaleString()}</p>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function initializeMap() {
            if (map) { // If map already exists, remove it before re-initializing
                map.remove();
                map = null;
            }
            map = L.map('map').setView([0, 0], 2);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            const bounds = [];

            // Buyer Location
            if (currentOrder.buyer_location?.lat && currentOrder.buyer_location?.lng) {
                const loc = currentOrder.buyer_location;
                buyerMarker = L.marker([loc.lat, loc.lng], { icon: buyerIcon })
                    .addTo(map)
                    .bindPopup('<b>Your Delivery Location</b>');
                bounds.push([loc.lat, loc.lng]);
            }

            // Seller/Product Location (use first item)
            const firstItem = currentOrder.items?.[0];
            if (firstItem?.product_lat && firstItem?.product_lng) {
                sellerMarker = L.marker([firstItem.product_lat, firstItem.product_lng], { icon: sellerIcon })
                    .addTo(map)
                    .bindPopup(`<b>Pickup:</b> ${firstItem.product_name}`);
                bounds.push([firstItem.product_lat, firstItem.product_lng]);
            }

            // Agent Location
            if (currentOrder.agent_location?.lat && currentOrder.agent_location?.lng) {
                const loc = currentOrder.agent_location;
                agentMarker = L.marker([loc.lat, loc.lng], { icon: agentIcon })
                    .addTo(map)
                    .bindPopup('<b>Agent Location</b>');
                bounds.push([loc.lat, loc.lng]);
            }

            // Agent Path
            if (currentOrder.gps_history && currentOrder.gps_history.length > 1) {
                const pathPoints = currentOrder.gps_history.map(p => [p.lat, p.lng]);
                agentPathPolyline = L.polyline(pathPoints, { color: 'blue', weight: 3 }).addTo(map);
                bounds.push(...pathPoints);
            }

            if (bounds.length > 1) {
                map.fitBounds(bounds, { padding: [50, 50] });
            } else if (bounds.length === 1) {
                map.setView(bounds[0], 15); // Zoom in on the single point
            }
        }

        async function loadChatHistory() {
            const chatBox = document.getElementById('chat-box');
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const orderId = urlParams.get('orderId');
                if (!orderId) return;

                const token = Auth.getToken();
                const response = await fetch(`/api/chat/${orderId}`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (!response.ok) throw new Error('Failed to load chat history');

                const data = await response.json();
                if (data.success && data.messages.length > 0) {
                    chatBox.innerHTML = ''; // Clear placeholder
                    data.messages.forEach(msg => appendChatMessage(msg, false));
                }
            } catch (error) {
                console.error('Error loading chat history:', error);
                chatBox.innerHTML = '<p class="text-center text-sm text-red-500">Could not load chat history.</p>';
            }
        }

        function setupSocket() {
            const user = Auth.getUser();
            if (!user) return;

            socket = io({ auth: { token: Auth.getToken() } });

            socket.on('connect', () => {
                console.log('Connected to tracking server with ID:', socket.id);
                socket.emit('user:login', user);
                if (currentOrder) {
                    socket.emit('chat:join', { orderId: currentOrder.id });
                }
            });

            socket.on('agent_location_update', (data) => {
                if (currentOrder && data.agentId === currentOrder.agent_id) {
                    console.log('Agent location update received:', data);
                    updateAgentOnMap(data.location);
                    if (data.eta !== null) {
                        document.getElementById('order-eta').textContent = `${data.eta} min`;
                    }
                }
            });

            socket.on('order_status_update', (data) => {
                if (currentOrder && data.orderId == currentOrder.id) {
                    console.log('Order status update received:', data);
                    currentOrder.status = data.status;
                    currentOrder.tracking_status = data.tracking_status;
                    updateStatus(data.status, data.tracking_status);
                    // Potentially add to timeline as well
                }
            });

            socket.on('chat:new_message', (data) => {
                if (currentOrder && data.orderId == currentOrder.id) {
                    appendChatMessage(data, false); // Don't show own message twice
                }
            });

            socket.on('disconnect', () => {
                console.log('Disconnected from tracking server.');
            });

            const chatForm = document.getElementById('chat-form');
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault();
                sendChatMessage();
            });
        }

        async function sendChatMessage() {
            const user = Auth.getUser();
            const input = document.getElementById('chat-input');
            const message = input.value.trim();

            if (message && currentOrder) {
                // Optimistically display the message
                const optimisticMessageData = {
                    senderId: user.id,
                    senderName: user.name,
                    message: message,
                    timestamp: new Date().toISOString()
                };
                appendChatMessage(optimisticMessageData, true);
                input.value = '';

                // Send to server
                await fetch(`/api/chat/${currentOrder.id}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${Auth.getToken()}` },
                    body: JSON.stringify({ message })
                });
                // The server will broadcast via socket to other clients
            }
        }

        function updateAgentOnMap(location) {
            if (!map) return;
            const latLng = [location.lat, location.lng];

            if (agentMarker) {
                agentMarker.setLatLng(latLng);
            } else {
                agentMarker = L.marker(latLng, { icon: agentIcon }).addTo(map).bindPopup('<b>Agent Location</b>');
            }

            if (agentPathPolyline) {
                agentPathPolyline.addLatLng(latLng);
            } else {
                agentPathPolyline = L.polyline([latLng], { color: 'blue', weight: 3 }).addTo(map);
            }

            map.panTo(latLng);
        }

        function appendChatMessage(data, isOptimistic = false) {
            const chatBox = document.getElementById('chat-box');
            const user = Auth.getUser();

            const isOwnMessage = data.senderId === user.id;

            // If it's not an optimistic update and it's our own message, don't append again.
            if (!isOptimistic && isOwnMessage) return;

            // Remove "No messages" placeholder
            const placeholder = chatBox.querySelector('p');
            if (placeholder) {
                placeholder.remove();
            }

            const messageEl = document.createElement('div');
            messageEl.className = `flex flex-col ${isOwnMessage ? 'items-end' : 'items-start'}`;
            
            messageEl.innerHTML = `
                <div class="text-xs text-gray-500 mb-1">${data.senderName}</div>
                <div class="max-w-xs px-4 py-2 rounded-2xl ${isOwnMessage ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}">
                    ${data.message}
                </div>
                <div class="text-xs text-gray-400 mt-1">${new Date(data.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
            `;

            chatBox.appendChild(messageEl);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function setupRating() {
            const stars = document.querySelectorAll('#rating-stars .fa-star');
            let currentRating = 0;

            stars.forEach(star => {
                star.addEventListener('mouseover', () => {
                    const value = parseInt(star.dataset.value);
                    stars.forEach((s, i) => {
                        s.classList.toggle('text-yellow-400', i < value);
                        s.classList.toggle('text-gray-300', i >= value);
                    });
                });

                star.addEventListener('mouseout', () => {
                    stars.forEach((s, i) => {
                        s.classList.toggle('text-yellow-400', i < currentRating);
                        s.classList.toggle('text-gray-300', i >= currentRating);
                    });
                });

                star.addEventListener('click', () => {
                    currentRating = parseInt(star.dataset.value);
                });
            });

            const ratingForm = document.getElementById('rating-form');
            ratingForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (currentRating === 0) {
                    alert('Please select a star rating.');
                    return;
                }

                const comment = document.getElementById('rating-comment').value;

                try {
                    const response = await fetch('/api/agents/reviews', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${Auth.getToken()}` },
                        body: JSON.stringify({
                            order_id: currentOrder.id,
                            agent_id: currentOrder.agent_id,
                            rating: currentRating,
                            comment: comment
                        })
                    });

                    if (!response.ok) {
                        const err = await response.json();
                        throw new Error(err.error || 'Failed to submit review.');
                    }

                    document.getElementById('rating-form').classList.add('hidden');
                    document.getElementById('rating-stars').classList.add('hidden');
                    document.getElementById('rating-thanks').classList.remove('hidden');

                } catch (error) {
                    alert(`Error: ${error.message}`);
                }
            });
        }

        window.onbeforeunload = () => {
            if (socket) {
                socket.disconnect();
            }
        };

        // Initialize navigation
        document.addEventListener('DOMContentLoaded', function() {
            BuyerNavigation.inject('navigation-container', {
                currentPage: 'orders',
                userName: 'Account'
            });
        });
    </script>
</body>
</html>
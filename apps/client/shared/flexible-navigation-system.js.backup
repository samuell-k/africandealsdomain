/**
 * Flexible Navigation System
 * Provides routing and journey management without imposing navigation templates
 * Each page can have completely unique navigation while benefiting from the system
 */

class FlexibleNavigationSystem {
  constructor() {
    this.router = null;
    this.journeyManager = null;
    this.pageValidator = null;
    this.currentMode = 'marketplace';
    this.currentUser = null;
    this.init();
  }

  init() {
    console.log('🔧 Flexible Navigation System initializing...');
    
    // Initialize core systems without UI templates
    this.initializeRouter();
    this.initializeJourneyManager();
    this.initializePageValidator();
    this.initializeUserManagement();
    this.setupEventListeners();
    
    console.log('✅ Flexible Navigation System ready');
  }

  initializeRouter() {
    this.router = {
      currentRoute: null,
      mode: 'marketplace',
      
      navigate: (route, data = {}) => {
        console.log(`🧭 Navigating to: ${route}`);
        
        const url = this.routeToUrl(route);
        if (url) {
          // Store navigation data
          if (data && Object.keys(data).length > 0) {
            sessionStorage.setItem('navigationData', JSON.stringify(data));
          }
          
          // Navigate
          window.location.href = url;
        } else {
          console.warn(`Route not found: ${route}`);
        }
      },
      
      switchMode: (mode) => {
        console.log(`🔄 Switching to ${mode} mode`);
        this.currentMode = mode;
        localStorage.setItem('currentMode', mode);
        
        // Dispatch mode change event
        window.dispatchEvent(new CustomEvent('modechange', {
          detail: { mode, previousMode: this.mode }
        }));
        
        this.mode = mode;
      },
      
      getMode: () => this.currentMode,
      
      getCurrentRoute: () => {
        const path = window.location.pathname;
        return this.urlToRoute(path);
      },
      
      getNavigationData: () => {
        try {
          const data = sessionStorage.getItem('navigationData');
          return data ? JSON.parse(data) : {};
        } catch {
          return {};
        }
      },
      
      clearNavigationData: () => {
        sessionStorage.removeItem('navigationData');
      }
    };
    
    // Load saved mode
    const savedMode = localStorage.getItem('currentMode');
    if (savedMode) {
      this.currentMode = savedMode;
      this.router.mode = savedMode;
    }
    
    window.flexibleRouter = this.router;
  }

  initializeJourneyManager() {
    this.journeyManager = {
      currentJourney: null,
      journeyState: {},
      
      startJourney: (journeyId, data = {}) => {
        console.log(`🛤️ Starting journey: ${journeyId}`);
        
        this.journeyManager.currentJourney = journeyId;
        this.journeyManager.journeyState = {
          journeyId,
          startTime: Date.now(),
          currentStep: 0,
          completedSteps: [],
          data: data
        };
        
        this.saveJourneyState();
        
        // Dispatch journey start event
        window.dispatchEvent(new CustomEvent('journeystart', {
          detail: { journeyId, data }
        }));
        
        return true;
      },
      
      completeStep: (stepData = {}) => {
        if (!this.journeyManager.currentJourney) return false;
        
        console.log('✅ Completing journey step');
        
        this.journeyManager.journeyState.completedSteps.push({
          stepId: this.journeyManager.journeyState.currentStep,
          completedAt: Date.now(),
          data: stepData
        });
        
        this.journeyManager.journeyState.currentStep++;
        this.journeyManager.journeyState.data = {
          ...this.journeyManager.journeyState.data,
          ...stepData
        };
        
        this.saveJourneyState();
        
        // Dispatch step complete event
        window.dispatchEvent(new CustomEvent('journeystepcomplete', {
          detail: { 
            step: this.journeyManager.journeyState.currentStep - 1,
            data: stepData,
            journeyState: this.journeyManager.journeyState
          }
        }));
        
        return true;
      },
      
      getJourneyProgress: () => {
        if (!this.journeyManager.currentJourney) return null;
        
        return {
          journeyId: this.journeyManager.currentJourney,
          currentStep: this.journeyManager.journeyState.currentStep,
          completedSteps: this.journeyManager.journeyState.completedSteps.length,
          data: this.journeyManager.journeyState.data,
          startTime: this.journeyManager.journeyState.startTime
        };
      },
      
      resetJourney: () => {
        console.log('🔄 Resetting journey');
        
        this.journeyManager.currentJourney = null;
        this.journeyManager.journeyState = {};
        localStorage.removeItem('currentJourney');
        
        // Dispatch journey reset event
        window.dispatchEvent(new CustomEvent('journeyreset'));
      },
      
      isJourneyActive: () => !!this.journeyManager.currentJourney
    };
    
    // Load saved journey state
    this.loadJourneyState();
    
    window.flexibleJourneyManager = this.journeyManager;
  }

  initializePageValidator() {
    this.pageValidator = {
      validateCurrentPage: () => {
        const currentPath = window.location.pathname;
        console.log(`🔍 Validating page: ${currentPath}`);
        
        // Basic validation - check if page exists and is accessible
        const isValid = this.isValidPage(currentPath);
        
        if (!isValid) {
          console.warn(`⚠️ Invalid page detected: ${currentPath}`);
          return false;
        }
        
        return true;
      },
      
      validateLinks: () => {
        const links = document.querySelectorAll('a[href]');
        const results = {
          total: links.length,
          valid: 0,
          invalid: 0,
          fixed: 0
        };
        
        links.forEach(link => {
          const href = link.getAttribute('href');
          
          // Skip external links
          if (href.startsWith('http') || href.startsWith('mailto:') || href.startsWith('tel:')) {
            results.valid++;
            return;
          }
          
          if (this.isValidPage(href)) {
            results.valid++;
          } else {
            results.invalid++;
            
            // Try to fix the link
            const fixedHref = this.fixLink(href);
            if (fixedHref && fixedHref !== href) {
              link.setAttribute('href', fixedHref);
              results.fixed++;
              results.invalid--;
              results.valid++;
            }
          }
        });
        
        console.log('🔗 Link validation results:', results);
        return results;
      },
      
      fixBrokenLinks: () => {
        return this.pageValidator.validateLinks().fixed;
      }
    };
    
    window.flexiblePageValidator = this.pageValidator;
  }

  initializeUserManagement() {
    this.currentUser = this.getCurrentUser();
    
    // User management utilities
    window.flexibleUserManager = {
      getCurrentUser: () => this.getCurrentUser(),
      
      isAuthenticated: () => {
        const token = localStorage.getItem('token');
        return !!token;
      },
      
      getUserRole: () => {
        const user = this.getCurrentUser();
        return user.role || 'public';
      },
      
      login: (userData, token) => {
        localStorage.setItem('user', JSON.stringify(userData));
        localStorage.setItem('token', token);
        this.currentUser = userData;
        
        // Dispatch user change event
        window.dispatchEvent(new CustomEvent('userchange', {
          detail: { user: userData, action: 'login' }
        }));
      },
      
      logout: () => {
        localStorage.removeItem('user');
        localStorage.removeItem('token');
        this.currentUser = null;
        
        // Reset journey on logout
        this.journeyManager.resetJourney();
        
        // Dispatch user change event
        window.dispatchEvent(new CustomEvent('userchange', {
          detail: { user: null, action: 'logout' }
        }));
        
        // Redirect to home
        window.location.href = '/';
      }
    };
  }

  setupEventListeners() {
    // Handle link clicks with data-route attributes
    document.addEventListener('click', (e) => {
      const link = e.target.closest('a[data-route]');
      if (link) {
        e.preventDefault();
        const route = link.getAttribute('data-route');
        const data = link.getAttribute('data-navigation-data');
        
        this.router.navigate(route, data ? JSON.parse(data) : {});
      }
    });
    
    // Handle journey action buttons
    document.addEventListener('click', (e) => {
      const actionButton = e.target.closest('[data-journey-action]');
      if (actionButton) {
        const action = actionButton.getAttribute('data-journey-action');
        const data = actionButton.getAttribute('data-journey-data');
        
        this.handleJourneyAction(action, data ? JSON.parse(data) : {});
      }
    });
    
    // Handle mode switch buttons
    document.addEventListener('click', (e) => {
      const modeButton = e.target.closest('[data-mode-switch]');
      if (modeButton) {
        const mode = modeButton.getAttribute('data-mode-switch');
        this.router.switchMode(mode);
      }
    });
    
    // Page visibility change - validate when page becomes visible
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        setTimeout(() => {
          this.pageValidator.validateCurrentPage();
        }, 100);
      }
    });
  }

  handleJourneyAction(action, data) {
    console.log(`🎯 Journey action: ${action}`, data);
    
    switch (action) {
      case 'start-buyer-journey':
        const mode = this.router.getMode();
        const journeyId = mode === 'local-market' ? 'buyer-local-market' : 'buyer-marketplace';
        this.journeyManager.startJourney(journeyId, data);
        break;
        
      case 'start-seller-journey':
        this.journeyManager.startJourney('seller-onboarding', data);
        break;
        
      case 'start-agent-journey':
        this.journeyManager.startJourney('agent-onboarding', data);
        break;
        
      case 'complete-step':
        this.journeyManager.completeStep(data);
        break;
        
      case 'add-to-cart':
        // Start buyer journey if not already started
        if (!this.journeyManager.isJourneyActive()) {
          const mode = this.router.getMode();
          const journeyId = mode === 'local-market' ? 'buyer-local-market' : 'buyer-marketplace';
          this.journeyManager.startJourney(journeyId, { product: data });
        } else {
          this.journeyManager.completeStep({ product: data });
        }
        break;
        
      case 'proceed-checkout':
        this.journeyManager.completeStep({ checkout: true, ...data });
        this.router.navigate('buyer.checkout', data);
        break;
        
      case 'complete-payment':
        this.journeyManager.completeStep({ payment: true, ...data });
        this.router.navigate('buyer.order-success', data);
        break;
        
      default:
        console.log(`Unknown journey action: ${action}`);
    }
  }

  // Route mapping utilities
  routeToUrl(route) {
    const routeMap = {
      // Public routes
      'home': '/',
      'public.about': '/public/about.html',
      'public.contact': '/public/contact.html',
      'public.faq': '/public/faq.html',
      'public.product-list': '/public/product-list.html',
      'public.product-detail': '/public/product-detail.html',
      'public.categories': '/public/categories.html',
      'public.search-results': '/public/search-results.html',
      
      // Auth routes
      'auth.login': '/auth/auth-buyer.html',
      'auth.login-seller': '/auth/auth-seller.html',
      'auth.login-agent': '/auth/auth-agent.html',
      'auth.login-admin': '/auth/auth-admin.html',
      'auth.forgot-password': '/auth/forgot-password.html',
      'auth.reset-password': '/auth/reset-password.html',
      'auth.verify-email': '/auth/verify-email.html',
      'auth.verify-phone': '/auth/verify-phone.html',
      
      // Buyer routes
      'buyer.dashboard': '/buyer/buyers-home.html',
      'buyer.products': '/buyer/product-list.html',
      'buyer.product-detail': '/buyer/product-detail.html',
      'buyer.cart': '/buyer/cart.html',
      'buyer.checkout': '/buyer/checkout.html',
      'buyer.payment': '/buyer/payment.html',
      'buyer.orders': '/buyer/orders.html',
      'buyer.order-detail': '/buyer/order-detail.html',
      'buyer.order-success': '/buyer/order-success.html',
      'buyer.track-order': '/buyer/track-order.html',
      'buyer.wishlist': '/buyer/wishlist.html',
      'buyer.profile': '/buyer/profile.html',
      'buyer.edit-profile': '/buyer/edit-profile.html',
      'buyer.settings': '/buyer/settings.html',
      'buyer.wallet': '/buyer/wallet.html',
      'buyer.messages': '/buyer/messages.html',
      'buyer.notifications': '/buyer/notifications.html',
      'buyer.reviews': '/buyer/reviews.html',
      'buyer.support': '/buyer/support.html',
      
      // Seller routes
      'seller.dashboard': '/seller/dashboard.html',
      'seller.add-product': '/seller/add-product.html',
      'seller.products': '/seller/product-list.html',
      'seller.edit-product': '/seller/edit-product.html',
      'seller.inventory': '/seller/inventory.html',
      'seller.orders': '/seller/orders.html',
      'seller.order-detail': '/seller/order-detail.html',
      'seller.analytics': '/seller/analytics.html',
      'seller.promotions': '/seller/promotions.html',
      'seller.payouts': '/seller/payouts.html',
      'seller.reviews': '/seller/reviews.html',
      'seller.messages': '/seller/messages.html',
      'seller.notifications': '/seller/notifications.html',
      'seller.profile': '/seller/profile.html',
      'seller.edit-profile': '/seller/edit-profile.html',
      'seller.settings': '/seller/settings.html',
      'seller.wallet': '/seller/wallet.html',
      'seller.support': '/seller/support.html',
      
      // Agent routes
      'agent.dashboard': '/agent/dashboard.html',
      'agent.orders': '/agent/orders.html',
      'agent.order-detail': '/agent/order-detail.html',
      'agent.deliveries': '/agent/deliveries.html',
      'agent.deliveries-detail': '/agent/deliveries-detail.html',
      'agent.pickups': '/agent/pickups.html',
      'agent.pickups-detail': '/agent/pickups-detail.html',
      'agent.earnings': '/agent/earnings.html',
      'agent.schedule': '/agent/schedule.html',
      'agent.location-tracking': '/agent/location-tracking.html',
      'agent.messages': '/agent/messages.html',
      'agent.notifications': '/agent/notifications.html',
      'agent.profile': '/agent/profile.html',
      'agent.edit-profile': '/agent/edit-profile.html',
      'agent.settings': '/agent/settings.html',
      'agent.wallet': '/agent/wallet.html',
      'agent.support': '/agent/support.html',
      
      // Admin routes
      'admin.dashboard': '/admin/dashboard.html',
      'admin.users': '/admin/users.html',
      'admin.user-detail': '/admin/user-detail.html',
      'admin.sellers': '/admin/sellers.html',
      'admin.seller-detail': '/admin/seller-detail.html',
      'admin.agents': '/admin/agents.html',
      'admin.agent-detail': '/admin/agent-detail.html',
      'admin.products': '/admin/products.html',
      'admin.product-detail': '/admin/product-detail.html',
      'admin.categories': '/admin/categories.html',
      'admin.orders': '/admin/orders.html',
      'admin.order-detail': '/admin/order-detail.html',
      'admin.payments': '/admin/payments.html',
      'admin.shipping': '/admin/shipping.html',
      'admin.reviews': '/admin/reviews.html',
      'admin.promotions': '/admin/promotions.html',
      'admin.marketing': '/admin/marketing.html',
      'admin.reports': '/admin/reports.html',
      'admin.support-tickets': '/admin/support-tickets.html',
      'admin.logs': '/admin/logs.html',
      'admin.settings': '/admin/settings.html',
      'admin.system-settings': '/admin/system-settings.html',
      
      // Local market routes (when in local-market mode)
      'local-market.home': '/grocery/local-market-home.html',
      'local-market.products': '/grocery/grocery-product-list.html',
      'local-market.product-detail': '/grocery/grocery-product-detail.html',
      'local-market.cart': '/grocery/cart.html',
      'local-market.checkout': '/grocery/grocery-checkout.html',
      'local-market.orders': '/grocery/grocery-orders.html',
      'local-market.order-detail': '/grocery/grocery-order-detail.html'
    };
    
    // Handle mode-specific routing
    if (this.currentMode === 'local-market') {
      // Map some routes to local market equivalents
      const localMarketMappings = {
        'home': '/grocery/local-market-home.html',
        'public.product-list': '/grocery/grocery-product-list.html',
        'public.product-detail': '/grocery/grocery-product-detail.html',
        'buyer.cart': '/grocery/cart.html',
        'buyer.checkout': '/grocery/grocery-checkout.html',
        'buyer.orders': '/grocery/grocery-orders.html',
        'buyer.order-detail': '/grocery/grocery-order-detail.html'
      };
      
      if (localMarketMappings[route]) {
        return localMarketMappings[route];
      }
    }
    
    return routeMap[route] || null;
  }

  urlToRoute(url) {
    // Reverse mapping from URL to route
    const urlMap = {
      '/': 'home',
      '/public/index.html': 'home',
      '/public/about.html': 'public.about',
      '/public/contact.html': 'public.contact',
      '/public/product-list.html': 'public.product-list',
      '/buyer/buyers-home.html': 'buyer.dashboard',
      '/buyer/cart.html': 'buyer.cart',
      '/buyer/checkout.html': 'buyer.checkout',
      '/seller/dashboard.html': 'seller.dashboard',
      '/agent/dashboard.html': 'agent.dashboard',
      '/admin/dashboard.html': 'admin.dashboard',
      '/grocery/local-market-home.html': 'local-market.home'
    };
    
    return urlMap[url] || null;
  }

  isValidPage(path) {
    // Basic page validation
    const validExtensions = ['.html', ''];
    const hasValidExtension = validExtensions.some(ext => path.endsWith(ext));
    
    // Check if it's a known route
    const route = this.urlToRoute(path);
    
    return hasValidExtension || !!route;
  }

  fixLink(href) {
    // Basic link fixing
    if (!href.includes('.html') && !href.includes('?') && !href.includes('#')) {
      return href + '.html';
    }
    return href;
  }

  getCurrentUser() {
    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      const token = localStorage.getItem('token');
      return {
        ...user,
        isAuthenticated: !!token
      };
    } catch {
      return { isAuthenticated: false };
    }
  }

  saveJourneyState() {
    if (this.journeyManager.journeyState) {
      localStorage.setItem('currentJourney', JSON.stringify(this.journeyManager.journeyState));
    }
  }

  loadJourneyState() {
    try {
      const saved = localStorage.getItem('currentJourney');
      if (saved) {
        const state = JSON.parse(saved);
        this.journeyManager.currentJourney = state.journeyId;
        this.journeyManager.journeyState = state;
      }
    } catch (e) {
      console.warn('Failed to load journey state:', e);
    }
  }

  // Public API for pages to use
  getPublicAPI() {
    return {
      // Router functions
      navigate: this.router.navigate,
      switchMode: this.router.switchMode,
      getMode: this.router.getMode,
      getCurrentRoute: this.router.getCurrentRoute,
      
      // Journey functions
      startJourney: this.journeyManager.startJourney,
      completeStep: this.journeyManager.completeStep,
      getJourneyProgress: this.journeyManager.getJourneyProgress,
      resetJourney: this.journeyManager.resetJourney,
      isJourneyActive: this.journeyManager.isJourneyActive,
      
      // User functions
      getCurrentUser: () => this.getCurrentUser(),
      isAuthenticated: () => window.flexibleUserManager.isAuthenticated(),
      getUserRole: () => window.flexibleUserManager.getUserRole(),
      
      // Validation functions
      validatePage: this.pageValidator.validateCurrentPage,
      validateLinks: this.pageValidator.validateLinks,
      fixBrokenLinks: this.pageValidator.fixBrokenLinks,
      
      // Utility functions
      getNavigationData: this.router.getNavigationData,
      clearNavigationData: this.router.clearNavigationData
    };
  }
}

// Initialize the flexible navigation system
const flexibleNavSystem = new FlexibleNavigationSystem();

// Make public API available globally
window.flexibleNav = flexibleNavSystem.getPublicAPI();

// Dispatch ready event
window.addEventListener('load', () => {
  window.dispatchEvent(new CustomEvent('flexibleNavigationReady', {
    detail: { 
      system: flexibleNavSystem,
      api: window.flexibleNav
    }
  }));
});

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
  module.exports = FlexibleNavigationSystem;
}
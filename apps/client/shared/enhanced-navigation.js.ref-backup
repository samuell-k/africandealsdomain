/**
 * Enhanced Navigation System for ADD Physical Products Platform
 * Provides comprehensive navigation across all pages and user roles
 */

class EnhancedNavigationManager {
  constructor() {
    this.currentMode = this.detectMode();
    this.currentUser = this.getCurrentUser();
    this.currentPage = this.getCurrentPage();
    this.navigationConfig = this.initializeNavigationConfig();
    this.init();
  }

  init() {
    this.createMainNavigation();
    this.createSidebar();
    this.createBreadcrumbs();
    this.createQuickActions();
    this.setupEventListeners();
    this.updateNavigationState();
    this.highlightCurrentPage();
  }

  detectMode() {
    const path = window.location.pathname;
    return path.includes('/grocery/') || path.includes('local-market') ? 'local-market' : 'marketplace';
  }

  getCurrentUser() {
    try {
      return JSON.parse(localStorage.getItem('user') || '{}');
    } catch {
      return {};
    }
  }

  getCurrentPage() {
    const path = window.location.pathname;
    const segments = path.split('/').filter(Boolean);
    return {
      path: path,
      segments: segments,
      role: segments[0] || 'public',
      page: segments[segments.length - 1]?.replace('.html', '') || 'index'
    };
  }

  isAuthenticated() {
    return !!localStorage.getItem('token');
  }

  initializeNavigationConfig() {
    return {
      // Public navigation
      public: {
        main: [
          { label: 'Home', route: 'home', icon: '🏠', path: '/public/index.html' },
          { label: 'Products', route: 'public.product-list', icon: '📦', path: '/public/product-list.html' },
          { label: 'Categories', route: 'public.categories', icon: '📂', path: '/public/categories.html' },
          { label: 'About', route: 'public.about', icon: 'ℹ️', path: '/public/about.html' },
          { label: 'Contact', route: 'public.contact', icon: '📞', path: '/public/contact.html' },
          { label: 'FAQ', route: 'public.faq', icon: '❓', path: '/public/faq.html' }
        ],
        footer: [
          { label: 'How It Works', route: 'public.how-it-works', path: '/public/how-it-works.html' },
          { label: 'Privacy Policy', route: 'public.privacy-policy', path: '/public/privacy-policy.html' },
          { label: 'Terms & Conditions', route: 'public.terms-and-conditions', path: '/public/terms-and-conditions.html' },
          { label: 'Shipping Policy', route: 'public.shipping-policy', path: '/public/shipping-policy.html' },
          { label: 'Returns Policy', route: 'public.returns-policy', path: '/public/returns-policy.html' }
        ]
      },

      // Buyer navigation
      buyer: {
        main: [
          { label: 'Dashboard', route: 'buyer.dashboard', icon: '🏠', path: '/buyer/buyers-home.html' },
          { label: 'Browse Products', route: 'buyer.products', icon: '🛍️', path: '/buyer/product-list.html' },
          { label: 'My Cart', route: 'buyer.cart', icon: '🛒', path: '/buyer/cart.html', badge: 'cart-count' },
          { label: 'My Orders', route: 'buyer.orders', icon: '📋', path: '/buyer/orders.html' },
          { label: 'Wishlist', route: 'buyer.wishlist', icon: '❤️', path: '/buyer/wishlist.html' },
          { label: 'Messages', route: 'buyer.messages', icon: '💬', path: '/buyer/messages.html', badge: 'message-count' }
        ],
        sidebar: [
          { label: 'Dashboard', route: 'buyer.dashboard', icon: '🏠', path: '/buyer/buyers-home.html' },
          { label: 'Browse Products', route: 'buyer.products', icon: '🛍️', path: '/buyer/product-list.html' },
          { label: 'My Cart', route: 'buyer.cart', icon: '🛒', path: '/buyer/cart.html' },
          { label: 'My Orders', route: 'buyer.orders', icon: '📋', path: '/buyer/orders.html' },
          { label: 'Order Tracking', route: 'buyer.track-order', icon: '📍', path: '/buyer/track-order.html' },
          { label: 'Wishlist', route: 'buyer.wishlist', icon: '❤️', path: '/buyer/wishlist.html' },
          { label: 'My Reviews', route: 'buyer.reviews', icon: '⭐', path: '/buyer/reviews.html' },
          { label: 'Messages', route: 'buyer.messages', icon: '💬', path: '/buyer/messages.html' },
          { label: 'Notifications', route: 'buyer.notifications', icon: '🔔', path: '/buyer/notifications.html' },
          { label: 'My Wallet', route: 'buyer.wallet', icon: '💳', path: '/buyer/wallet.html' },
          { label: 'Profile', route: 'buyer.profile', icon: '👤', path: '/buyer/profile.html' },
          { label: 'Settings', route: 'buyer.settings', icon: '⚙️', path: '/buyer/settings.html' },
          { label: 'Support', route: 'buyer.support', icon: '🆘', path: '/buyer/support.html' }
        ]
      },

      // Seller navigation
      seller: {
        main: [
          { label: 'Dashboard', route: 'seller.dashboard', icon: '📊', path: '/seller/dashboard.html' },
          { label: 'My Products', route: 'seller.products', icon: '📦', path: '/seller/product-list.html' },
          { label: 'Add Product', route: 'seller.add-product', icon: '➕', path: '/seller/add-product.html' },
          { label: 'Orders', route: 'seller.orders', icon: '📋', path: '/seller/orders.html', badge: 'order-count' },
          { label: 'Analytics', route: 'seller.analytics', icon: '📈', path: '/seller/analytics.html' },
          { label: 'Messages', route: 'seller.messages', icon: '💬', path: '/seller/messages.html', badge: 'message-count' }
        ],
        sidebar: [
          { label: 'Dashboard', route: 'seller.dashboard', icon: '📊', path: '/seller/dashboard.html' },
          { label: 'My Products', route: 'seller.products', icon: '📦', path: '/seller/product-list.html' },
          { label: 'Add Product', route: 'seller.add-product', icon: '➕', path: '/seller/add-product.html' },
          { label: 'Edit Product', route: 'seller.edit-product', icon: '✏️', path: '/seller/edit-product.html' },
          { label: 'Inventory', route: 'seller.inventory', icon: '📋', path: '/seller/inventory.html' },
          { label: 'Orders', route: 'seller.orders', icon: '📋', path: '/seller/orders.html' },
          { label: 'Returns', route: 'seller.returns', icon: '↩️', path: '/seller/returns.html' },
          { label: 'Analytics', route: 'seller.analytics', icon: '📈', path: '/seller/analytics.html' },
          { label: 'Promotions', route: 'seller.promotions', icon: '🎯', path: '/seller/promotions.html' },
          { label: 'Boosted Products', route: 'seller.boosted-products', icon: '🚀', path: '/seller/boosted-products.html' },
          { label: 'Reviews', route: 'seller.reviews', icon: '⭐', path: '/seller/reviews.html' },
          { label: 'Messages', route: 'seller.messages', icon: '💬', path: '/seller/messages.html' },
          { label: 'Notifications', route: 'seller.notifications', icon: '🔔', path: '/seller/notifications.html' },
          { label: 'Payouts', route: 'seller.payouts', icon: '💰', path: '/seller/payouts.html' },
          { label: 'Wallet', route: 'seller.wallet', icon: '💳', path: '/seller/wallet.html' },
          { label: 'Commission', route: 'seller.commission', icon: '💵', path: '/seller/commission.html' },
          { label: 'Profile', route: 'seller.profile', icon: '👤', path: '/seller/profile.html' },
          { label: 'Settings', route: 'seller.settings', icon: '⚙️', path: '/seller/settings.html' },
          { label: 'Support', route: 'seller.support', icon: '🆘', path: '/seller/support.html' }
        ]
      },

      // Agent navigation
      agent: {
        main: [
          { label: 'Dashboard', route: 'agent.dashboard', icon: '📊', path: '/agent/dashboard.html' },
          { label: 'Orders', route: 'agent.orders', icon: '📋', path: '/agent/orders.html' },
          { label: 'Earnings', route: 'agent.earnings', icon: '💰', path: '/agent/earnings.html' },
          { label: 'Messages', route: 'agent.messages', icon: '💬', path: '/agent/messages.html' }
        ],
        sidebar: [
          { label: 'Dashboard', route: 'agent.dashboard', icon: '📊', path: '/agent/dashboard.html' },
          { label: 'Orders', route: 'agent.orders', icon: '📋', path: '/agent/orders.html' },
          { label: 'Order Tracking', route: 'agent.order-tracking', icon: '📍', path: '/agent/order-tracking.html' },
          { label: 'Earnings', route: 'agent.earnings', icon: '💰', path: '/agent/earnings.html' },
          { label: 'Performance', route: 'agent.performance', icon: '📈', path: '/agent/performance.html' },
          { label: 'Messages', route: 'agent.messages', icon: '💬', path: '/agent/messages.html' },
          { label: 'Notifications', route: 'agent.notifications', icon: '🔔', path: '/agent/notifications.html' },
          { label: 'Profile', route: 'agent.profile', icon: '👤', path: '/agent/profile.html' },
          { label: 'Settings', route: 'agent.settings', icon: '⚙️', path: '/agent/settings.html' }
        ]
      },

      // Admin navigation
      admin: {
        main: [
          { label: 'Dashboard', route: 'admin.dashboard', icon: '📊', path: '/admin/dashboard.html' },
          { label: 'Users', route: 'admin.users', icon: '👥', path: '/admin/users.html' },
          { label: 'Products', route: 'admin.products', icon: '📦', path: '/admin/products.html' },
          { label: 'Orders', route: 'admin.orders', icon: '📋', path: '/admin/orders.html' },
          { label: 'Reports', route: 'admin.reports', icon: '📈', path: '/admin/reports.html' }
        ],
        sidebar: [
          { label: 'Dashboard', route: 'admin.dashboard', icon: '📊', path: '/admin/dashboard.html' },
          { label: 'Dashboard Stats', route: 'admin.dashboard-stats', icon: '📈', path: '/admin/dashboard-stats.html' },
          { label: 'Users', route: 'admin.users', icon: '👥', path: '/admin/users.html' },
          { label: 'Sellers', route: 'admin.sellers', icon: '🏪', path: '/admin/sellers.html' },
          { label: 'Agents', route: 'admin.agents', icon: '🤝', path: '/admin/agents.html' },
          { label: 'Products', route: 'admin.products', icon: '📦', path: '/admin/products.html' },
          { label: 'Product Management', route: 'admin.product-management', icon: '📦', path: '/admin/product-management.html' },
          { label: 'Categories', route: 'admin.categories', icon: '📂', path: '/admin/categories.html' },
          { label: 'Category Management', route: 'admin.category-management', icon: '📂', path: '/admin/category-management.html' },
          { label: 'Orders', route: 'admin.orders', icon: '📋', path: '/admin/orders.html' },
          { label: 'Order Management', route: 'admin.order-management', icon: '📋', path: '/admin/order-management.html' },
          { label: 'Payments', route: 'admin.payments', icon: '💳', path: '/admin/payments.html' },
          { label: 'Payment Methods', route: 'admin.payment-methods', icon: '💳', path: '/admin/payment-methods.html' },
          { label: 'Payment Monitoring', route: 'admin.payment-monitoring', icon: '💳', path: '/admin/payment-monitoring.html' },
          { label: 'Shipping', route: 'admin.shipping', icon: '🚚', path: '/admin/shipping.html' },
          { label: 'Shipping Management', route: 'admin.shipping-management', icon: '🚚', path: '/admin/shipping-management.html' },
          { label: 'Shipping Rules', route: 'admin.shipping-rules', icon: '🚚', path: '/admin/shipping-rules.html' },
          { label: 'Shipping Insights', route: 'admin.shipping-insights', icon: '🚚', path: '/admin/shipping-insights.html' },
          { label: 'Delivery Zones', route: 'admin.delivery-zones', icon: '🌍', path: '/admin/delivery-zones.html' },
          { label: 'Reviews', route: 'admin.reviews', icon: '⭐', path: '/admin/reviews.html' },
          { label: 'Promotions', route: 'admin.promotions', icon: '🎯', path: '/admin/promotions.html' },
          { label: 'Marketing', route: 'admin.marketing', icon: '📢', path: '/admin/marketing.html' },
          { label: 'Announcements', route: 'admin.announcements-management', icon: '📢', path: '/admin/announcements-management.html' },
          { label: 'Blog Publishing', route: 'admin.blog-announcement-publishing', icon: '📝', path: '/admin/blog-announcement-publishing.html' },
          { label: 'Ads Boosting', route: 'admin.ads-boosting-approval', icon: '🚀', path: '/admin/ads-boosting-approval.html' },
          { label: 'Reports', route: 'admin.reports', icon: '📈', path: '/admin/reports.html' },
          { label: 'Analytics', route: 'admin.analytics', icon: '📊', path: '/admin/analytics.html' },
          { label: 'Support Tickets', route: 'admin.support-tickets', icon: '🎫', path: '/admin/support-tickets.html' },
          { label: 'Live Chat', route: 'admin.live-chat-monitoring', icon: '💬', path: '/admin/live-chat-monitoring.html' },
          { label: 'Logs', route: 'admin.logs', icon: '📋', path: '/admin/logs.html' },
          { label: 'Security Logs', route: 'admin.admin-logs-security', icon: '🔒', path: '/admin/admin-logs-security.html' },
          { label: 'Security Monitoring', route: 'admin.security-monitoring', icon: '🔒', path: '/admin/security-monitoring.html' },
          { label: 'Settings', route: 'admin.settings', icon: '⚙️', path: '/admin/settings.html' },
          { label: 'System Settings', route: 'admin.system-settings', icon: '⚙️', path: '/admin/system-settings.html' },
          { label: 'System Testing', route: 'admin.system-testing', icon: '🧪', path: '/admin/system-testing.html' },
          { label: 'Multi-Currency', route: 'admin.multi-currency-settings', icon: '💱', path: '/admin/multi-currency-settings.html' },
          { label: 'Tax & Commission', route: 'admin.tax-commission', icon: '💰', path: '/admin/tax-commission.html' },
          { label: 'Theme Customization', route: 'admin.theme-customization', icon: '🎨', path: '/admin/theme-customization.html' },
          { label: 'CMS Management', route: 'admin.cms-management', icon: '📝', path: '/admin/cms-management.html' },
          { label: 'Email/SMS Templates', route: 'admin.email-sms-templates', icon: '📧', path: '/admin/email-sms-templates.html' },
          { label: 'Local Market Admin', route: 'admin.local-market-admin', icon: '🏪', path: '/admin/local-market-admin.html' },
          { label: 'Grocery Management', route: 'admin.grocery-management', icon: '🛒', path: '/admin/grocery-management.html' },
          { label: 'Location Dashboard', route: 'admin.location-dashboard', icon: '📍', path: '/admin/location-dashboard.html' }
        ]
      }
    };
  }

  createMainNavigation() {
    // Remove existing navigation
    const existingNav = document.getElementById('enhanced-main-nav');
    if (existingNav) existingNav.remove();

    // Create main navigation
    const nav = document.createElement('nav');
    nav.id = 'enhanced-main-nav';
    nav.className = 'fixed top-0 left-0 w-full bg-white/95 backdrop-blur-md shadow-lg border-b border-gray-200 z-50';
    
    nav.innerHTML = this.getMainNavigationHTML();
    
    // Insert at the beginning of body
    document.body.insertBefore(nav, document.body.firstChild);
    
    // Add padding to body to account for fixed nav
    document.body.style.paddingTop = '80px';
  }

  getMainNavigationHTML() {
    const isAuth = this.isAuthenticated();
    const user = this.currentUser;
    const userRole = user.role || 'public';
    const navItems = this.navigationConfig[userRole]?.main || this.navigationConfig.public.main;

    return `
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-20">
          
          <!-- Logo and Brand -->
          <div class="flex items-center space-x-4">
            <a href="${this.currentMode === 'local-market' ? '/grocery/local-market-home.html' : '/public/index.html'}" class="flex items-center space-x-3 group">
              <img src="/public/images/logo.png" alt="ADD Logo" class="h-12 w-12 rounded-xl shadow-lg group-hover:scale-110 transition-transform duration-300">
              <div>
                <span class="font-bold text-xl text-gray-900">ADD Physical Products</span>
                <div class="flex items-center space-x-2 text-xs">
                  <span class="w-2 h-2 rounded-full ${this.currentMode === 'local-market' ? 'bg-green-500' : 'bg-blue-500'}"></span>
                  <span class="text-gray-600">${this.currentMode === 'local-market' ? 'Local Market' : 'Marketplace'}</span>
                </div>
              </div>
            </a>
          </div>

          <!-- Main Navigation Items -->
          <div class="hidden md:flex items-center space-x-1">
            ${navItems.map(item => `
              <a href="${item.path}" data-route="${item.route}" 
                 class="nav-item flex items-center space-x-2 px-4 py-2 rounded-lg text-gray-700 hover:text-blue-600 hover:bg-blue-50 transition-all duration-200 font-medium relative">
                <span class="text-lg">${item.icon}</span>
                <span>${item.label}</span>
                ${item.badge ? `<span id="${item.badge}" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full px-1.5 py-0.5 hidden">0</span>` : ''}
              </a>
            `).join('')}
          </div>

          <!-- Right Side Actions -->
          <div class="flex items-center space-x-3">
            ${this.getModeToggleHTML()}
            ${this.getUserActionsHTML()}
            ${this.getMobileMenuToggleHTML()}
          </div>
        </div>
      </div>
    `;
  }

  getModeToggleHTML() {
    return `
      <button 
        data-mode-switch="${this.currentMode === 'local-market' ? 'marketplace' : 'local-market'}"
        class="hidden md:flex items-center space-x-2 px-4 py-2 rounded-xl border-2 ${this.currentMode === 'local-market' ? 'border-blue-500 text-blue-600 hover:bg-blue-50' : 'border-green-500 text-green-600 hover:bg-green-50'} transition-colors font-medium"
        title="Switch to ${this.currentMode === 'local-market' ? 'Marketplace' : 'Local Market'}"
      >
        <span class="text-lg">${this.currentMode === 'local-market' ? '📦' : '🛒'}</span>
        <span class="hidden lg:inline">${this.currentMode === 'local-market' ? 'Marketplace' : 'Local Market'}</span>
      </button>
    `;
  }

  getUserActionsHTML() {
    if (!this.isAuthenticated()) {
      return `
        <div class="flex items-center space-x-2">
          <a href="/auth/auth-buyer.html" class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 transition-colors">
            Sign In
          </a>
          <a href="/auth/auth-buyer.html" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors">
            Sign Up
          </a>
          <a href="/auth/auth-seller.html" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg transition-colors">
            Become a Seller
          </a>
        </div>
      `;
    }

    const user = this.currentUser;
    const dashboardRoute = this.getDashboardRoute();

    return `
      <!-- Notifications -->
      <button class="relative p-2 text-gray-600 hover:text-gray-900 transition-colors" id="notifications-btn">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM10.5 3.5a6 6 0 0 1 6 6v2l1.5 3h-15l1.5-3v-2a6 6 0 0 1 6-6z"></path>
        </svg>
        <span id="notifications-badge" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full px-1.5 py-0.5 hidden">0</span>
      </button>

      <!-- Messages -->
      <button class="relative p-2 text-gray-600 hover:text-gray-900 transition-colors" id="messages-btn">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
        </svg>
        <span id="messages-badge" class="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full px-1.5 py-0.5 hidden">0</span>
      </button>

      <!-- User Menu -->
      <div class="relative">
        <button id="user-menu-btn" class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors">
          <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm">
            ${(user.name || 'U').charAt(0).toUpperCase()}
          </div>
          <span class="hidden lg:inline text-sm font-medium text-gray-700">${user.name || 'User'}</span>
          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        
        <div id="user-menu" class="hidden absolute right-0 mt-2 w-64 bg-white rounded-xl shadow-lg border border-gray-200 py-2 z-50">
          <div class="px-4 py-3 border-b border-gray-100">
            <p class="text-sm font-medium text-gray-900">${user.name || 'User'}</p>
            <p class="text-sm text-gray-600">${user.email || ''}</p>
            <p class="text-xs text-blue-600 font-medium mt-1">${user.role ? user.role.charAt(0).toUpperCase() + user.role.slice(1) : 'User'}</p>
          </div>
          
          <a href="${dashboardRoute}" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
            </svg>
            Dashboard
          </a>
          
          ${this.getUserMenuItemsHTML()}
          
          <div class="border-t border-gray-100 mt-2 pt-2">
            <button onclick="logout()" class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors">
              <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
              </svg>
              Sign Out
            </button>
          </div>
        </div>
      </div>
    `;
  }

  getMobileMenuToggleHTML() {
    return `
      <button id="mobile-menu-btn" class="md:hidden p-2 text-gray-600 hover:text-gray-900">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    `;
  }

  createSidebar() {
    const userRole = this.currentUser.role || 'public';
    
    // Only create sidebar for authenticated users with role-based navigation
    if (!this.isAuthenticated() || userRole === 'public') {
      return;
    }

    // Remove existing sidebar
    const existingSidebar = document.getElementById('enhanced-sidebar');
    if (existingSidebar) existingSidebar.remove();

    const sidebar = document.createElement('div');
    sidebar.id = 'enhanced-sidebar';
    sidebar.className = 'fixed left-0 top-20 h-full w-64 bg-white shadow-lg border-r border-gray-200 z-40 transform -translate-x-full md:translate-x-0 transition-transform duration-300';
    
    sidebar.innerHTML = this.getSidebarHTML();
    
    document.body.appendChild(sidebar);
    
    // Add padding to main content for sidebar
    const mainContent = document.querySelector('main') || document.querySelector('.main-content') || document.body;
    if (window.innerWidth >= 768) {
      mainContent.style.marginLeft = '256px';
    }
  }

  getSidebarHTML() {
    const userRole = this.currentUser.role || 'public';
    const sidebarItems = this.navigationConfig[userRole]?.sidebar || [];

    return `
      <div class="flex flex-col h-full">
        <div class="flex-1 overflow-y-auto py-4">
          <div class="px-4 mb-4">
            <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">Navigation</h3>
          </div>
          <nav class="space-y-1 px-2">
            ${sidebarItems.map(item => `
              <a href="${item.path}" data-route="${item.route}" 
                 class="sidebar-item flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-700 hover:text-blue-600 hover:bg-blue-50 transition-all duration-200 group">
                <span class="text-lg">${item.icon}</span>
                <span class="font-medium">${item.label}</span>
              </a>
            `).join('')}
          </nav>
        </div>
        
        <!-- Sidebar Footer -->
        <div class="border-t border-gray-200 p-4">
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm">
              ${(this.currentUser.name || 'U').charAt(0).toUpperCase()}
            </div>
            <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-gray-900 truncate">${this.currentUser.name || 'User'}</p>
              <p class="text-xs text-gray-500 truncate">${this.currentUser.role || 'User'}</p>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  createBreadcrumbs() {
    // Remove existing breadcrumbs
    const existingBreadcrumbs = document.getElementById('enhanced-breadcrumbs');
    if (existingBreadcrumbs) existingBreadcrumbs.remove();

    const breadcrumbs = document.createElement('div');
    breadcrumbs.id = 'enhanced-breadcrumbs';
    breadcrumbs.className = 'bg-gray-50 border-b border-gray-200 py-3';
    
    breadcrumbs.innerHTML = this.getBreadcrumbsHTML();
    
    // Insert after main navigation
    const mainNav = document.getElementById('enhanced-main-nav');
    if (mainNav) {
      mainNav.parentNode.insertBefore(breadcrumbs, mainNav.nextSibling);
      // Adjust body padding
      document.body.style.paddingTop = '120px';
    }
  }

  getBreadcrumbsHTML() {
    const breadcrumbs = this.generateBreadcrumbs();
    
    return `
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <nav class="flex" aria-label="Breadcrumb">
          <ol class="flex items-center space-x-2">
            ${breadcrumbs.map((crumb, index) => `
              <li class="flex items-center">
                ${index > 0 ? '<svg class="w-4 h-4 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>' : ''}
                ${crumb.url ? 
                  `<a href="${crumb.url}" class="text-sm font-medium text-gray-500 hover:text-gray-700 transition-colors">${crumb.label}</a>` :
                  `<span class="text-sm font-medium text-gray-900">${crumb.label}</span>`
                }
              </li>
            `).join('')}
          </ol>
        </nav>
      </div>
    `;
  }

  generateBreadcrumbs() {
    const path = this.currentPage.path;
    const segments = this.currentPage.segments;
    const breadcrumbs = [];

    // Always start with Home
    breadcrumbs.push({
      label: 'Home',
      url: this.currentMode === 'local-market' ? '/grocery/local-market-home.html' : '/public/index.html'
    });

    // Add role-based breadcrumb
    if (segments.length > 0 && segments[0] !== 'public') {
      const role = segments[0];
      breadcrumbs.push({
        label: role.charAt(0).toUpperCase() + role.slice(1),
        url: this.getDashboardRoute()
      });
    }

    // Add page-specific breadcrumbs
    if (segments.length > 1) {
      const pageName = segments[segments.length - 1].replace('.html', '');
      const formattedPageName = this.formatPageName(pageName);
      
      breadcrumbs.push({
        label: formattedPageName,
        url: null // Current page, no link
      });
    }

    return breadcrumbs;
  }

  formatPageName(pageName) {
    return pageName
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  createQuickActions() {
    const userRole = this.currentUser.role;
    
    if (!this.isAuthenticated() || !userRole) {
      return;
    }

    // Remove existing quick actions
    const existingQuickActions = document.getElementById('enhanced-quick-actions');
    if (existingQuickActions) existingQuickActions.remove();

    const quickActions = document.createElement('div');
    quickActions.id = 'enhanced-quick-actions';
    quickActions.className = 'fixed bottom-6 right-6 z-50';
    
    quickActions.innerHTML = this.getQuickActionsHTML();
    
    document.body.appendChild(quickActions);
  }

  getQuickActionsHTML() {
    const userRole = this.currentUser.role;
    let actions = [];

    switch (userRole) {
      case 'buyer':
        actions = [
          { label: 'Cart', icon: '🛒', route: 'buyer.cart', color: 'bg-blue-500 hover:bg-blue-600' },
          { label: 'Orders', icon: '📋', route: 'buyer.orders', color: 'bg-green-500 hover:bg-green-600' },
          { label: 'Support', icon: '🆘', route: 'buyer.support', color: 'bg-red-500 hover:bg-red-600' }
        ];
        break;
      case 'seller':
        actions = [
          { label: 'Add Product', icon: '➕', route: 'seller.add-product', color: 'bg-green-500 hover:bg-green-600' },
          { label: 'Orders', icon: '📋', route: 'seller.orders', color: 'bg-blue-500 hover:bg-blue-600' },
          { label: 'Analytics', icon: '📈', route: 'seller.analytics', color: 'bg-purple-500 hover:bg-purple-600' }
        ];
        break;
      case 'agent':
        actions = [
          { label: 'Orders', icon: '📋', route: 'agent.orders', color: 'bg-blue-500 hover:bg-blue-600' },
          { label: 'Earnings', icon: '💰', route: 'agent.earnings', color: 'bg-green-500 hover:bg-green-600' }
        ];
        break;
      case 'admin':
        actions = [
          { label: 'Users', icon: '👥', route: 'admin.users', color: 'bg-blue-500 hover:bg-blue-600' },
          { label: 'Reports', icon: '📈', route: 'admin.reports', color: 'bg-purple-500 hover:bg-purple-600' },
          { label: 'Settings', icon: '⚙️', route: 'admin.settings', color: 'bg-gray-500 hover:bg-gray-600' }
        ];
        break;
    }

    return `
      <div class="flex flex-col space-y-2">
        ${actions.map(action => `
          <button data-route="${action.route}" 
                  class="w-12 h-12 ${action.color} text-white rounded-full shadow-lg transition-all duration-200 hover:scale-110 flex items-center justify-center"
                  title="${action.label}">
            <span class="text-lg">${action.icon}</span>
          </button>
        `).join('')}
      </div>
    `;
  }

  setupEventListeners() {
    // Handle navigation clicks
    document.addEventListener('click', (e) => {
      const routeElement = e.target.closest('[data-route]');
      if (routeElement) {
        e.preventDefault();
        const route = routeElement.dataset.route;
        this.navigate(route);
      }

      // Handle mode switching
      const modeSwitcher = e.target.closest('[data-mode-switch]');
      if (modeSwitcher) {
        e.preventDefault();
        const targetMode = modeSwitcher.dataset.modeSwitch;
        this.switchMode(targetMode);
      }

      // Handle user menu toggle
      const userMenuBtn = document.getElementById('user-menu-btn');
      const userMenu = document.getElementById('user-menu');
      if (e.target.closest('#user-menu-btn')) {
        userMenu.classList.toggle('hidden');
      } else if (!e.target.closest('#user-menu')) {
        userMenu?.classList.add('hidden');
      }

      // Handle mobile menu toggle
      const mobileMenuBtn = document.getElementById('mobile-menu-btn');
      const sidebar = document.getElementById('enhanced-sidebar');
      if (e.target.closest('#mobile-menu-btn')) {
        sidebar?.classList.toggle('-translate-x-full');
      }
    });

    // Handle window resize
    window.addEventListener('resize', () => {
      this.handleResize();
    });

    // Handle browser back/forward
    window.addEventListener('popstate', () => {
      this.currentMode = this.detectMode();
      this.currentPage = this.getCurrentPage();
      this.highlightCurrentPage();
    });
  }

  handleResize() {
    const sidebar = document.getElementById('enhanced-sidebar');
    const mainContent = document.querySelector('main') || document.querySelector('.main-content') || document.body;
    
    if (window.innerWidth >= 768) {
      sidebar?.classList.remove('-translate-x-full');
      if (this.isAuthenticated() && this.currentUser.role !== 'public') {
        mainContent.style.marginLeft = '256px';
      }
    } else {
      sidebar?.classList.add('-translate-x-full');
      mainContent.style.marginLeft = '0';
    }
  }

  navigate(route) {
    const url = this.getRouteUrl(route);
    if (url) {
      this.showLoadingIndicator();
      setTimeout(() => {
        window.location.href = url;
      }, 200);
    } else {
      console.error(`Route not found: ${route}`);
    }
  }

  getRouteUrl(route) {
    // Use the existing router's getRouteUrl method
    if (window.router && window.router.getRouteUrl) {
      return window.router.getRouteUrl(route);
    }
    
    // Fallback: simple route mapping
    const routeParts = route.split('.');
    const role = routeParts[0];
    const page = routeParts[1];
    
    if (role === 'home') {
      return this.currentMode === 'local-market' ? '/grocery/local-market-home.html' : '/public/index.html';
    }
    
    return `/${role}/${page}.html`;
  }

  switchMode(targetMode) {
    if (targetMode === this.currentMode) return;
    
    this.currentMode = targetMode;
    this.showLoadingIndicator();
    
    setTimeout(() => {
      window.location.href = targetMode === 'local-market' ? '/grocery/local-market-home.html' : '/public/index.html';
    }, 200);
  }

  updateNavigationState() {
    // Update badges and counters
    this.updateCartBadge();
    this.updateMessageBadge();
    this.updateNotificationBadge();
  }

  updateCartBadge() {
    const cartBadge = document.getElementById('cart-count');
    if (cartBadge) {
      // Get cart count from localStorage or API
      const cartCount = this.getCartCount();
      if (cartCount > 0) {
        cartBadge.textContent = cartCount;
        cartBadge.classList.remove('hidden');
      } else {
        cartBadge.classList.add('hidden');
      }
    }
  }

  updateMessageBadge() {
    const messageBadge = document.getElementById('message-count');
    if (messageBadge) {
      // Get unread message count
      const messageCount = this.getUnreadMessageCount();
      if (messageCount > 0) {
        messageBadge.textContent = messageCount;
        messageBadge.classList.remove('hidden');
      } else {
        messageBadge.classList.add('hidden');
      }
    }
  }

  updateNotificationBadge() {
    const notificationBadge = document.getElementById('notifications-badge');
    if (notificationBadge) {
      // Get unread notification count
      const notificationCount = this.getUnreadNotificationCount();
      if (notificationCount > 0) {
        notificationBadge.textContent = notificationCount;
        notificationBadge.classList.remove('hidden');
      } else {
        notificationBadge.classList.add('hidden');
      }
    }
  }

  highlightCurrentPage() {
    // Remove existing active states
    document.querySelectorAll('.nav-item, .sidebar-item').forEach(item => {
      item.classList.remove('active', 'bg-blue-100', 'text-blue-600');
    });

    // Add active state to current page
    const currentPath = window.location.pathname;
    document.querySelectorAll(`[href="${currentPath}"]`).forEach(item => {
      if (item.classList.contains('nav-item') || item.classList.contains('sidebar-item')) {
        item.classList.add('active', 'bg-blue-100', 'text-blue-600');
      }
    });
  }

  showLoadingIndicator() {
    const existing = document.getElementById('nav-loading');
    if (existing) existing.remove();

    const indicator = document.createElement('div');
    indicator.id = 'nav-loading';
    indicator.className = 'fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50';
    indicator.innerHTML = `
      <div class="bg-white rounded-2xl p-6 shadow-xl">
        <div class="flex items-center space-x-3">
          <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
          <span class="text-gray-700 font-medium">Loading...</span>
        </div>
      </div>
    `;
    
    document.body.appendChild(indicator);
  }

  getDashboardRoute() {
    const role = this.currentUser.role;
    switch (role) {
      case 'buyer':
        return this.currentMode === 'local-market' ? '/grocery/local-market-home.html' : '/buyer/buyers-home.html';
      case 'seller':
        return '/seller/dashboard.html';
      case 'agent':
        return this.currentMode === 'local-market' ? '/agent/local-market-dashboard.html' : '/agent/dashboard.html';
      case 'admin':
        return this.currentMode === 'local-market' ? '/admin/local-market-admin.html' : '/admin/dashboard.html';
      default:
        return '/public/index.html';
    }
  }

  getUserMenuItemsHTML() {
    const user = this.currentUser;
    const role = user.role;

    let items = [];

    // Common items for all roles
    items.push(`
      <a href="/${role}/profile.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>
        Profile
      </a>
    `);

    // Role-specific items
    if (role === 'buyer') {
      items.push(`
        <a href="${this.currentMode === 'local-market' ? '/grocery/orders.html' : '/buyer/orders.html'}" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          My Orders
        </a>
        <a href="/buyer/wishlist.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
          Wishlist
        </a>
      `);
    }

    // Common items
    items.push(`
      <a href="/${role}/settings.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
        Settings
      </a>
    `);

    return items.join('');
  }

  // Helper methods for badge counts
  getCartCount() {
    try {
      const cart = JSON.parse(localStorage.getItem('cart') || '[]');
      return cart.reduce((total, item) => total + (item.quantity || 1), 0);
    } catch {
      return 0;
    }
  }

  getUnreadMessageCount() {
    try {
      const messages = JSON.parse(localStorage.getItem('unreadMessages') || '0');
      return parseInt(messages) || 0;
    } catch {
      return 0;
    }
  }

  getUnreadNotificationCount() {
    try {
      const notifications = JSON.parse(localStorage.getItem('unreadNotifications') || '0');
      return parseInt(notifications) || 0;
    } catch {
      return 0;
    }
  }
}

// Initialize enhanced navigation when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  window.enhancedNavigation = new EnhancedNavigationManager();
});

// Export for use in other scripts
if (typeof module !== 'undefined' && module.exports) {
  module.exports = EnhancedNavigationManager;
}
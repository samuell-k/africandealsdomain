/**
 * Navigation Manager for ADD Physical Products Platform
 * Manages navigation UI components and integrates with unified router
 */

class NavigationManager {
  constructor() {
    this.router = window.unifiedRouter;
    this.currentUser = this.getCurrentUser();
    this.currentMode = this.router?.getMode() || 'marketplace';
    this.navigationElements = {};
    this.init();
  }

  init() {
    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.initializeNavigation());
    } else {
      this.initializeNavigation();
    }
  }

  initializeNavigation() {
    this.createNavigationStructure();
    this.setupEventListeners();
    this.updateNavigationState();
    console.log('🧭 Navigation Manager initialized');
  }

  getCurrentUser() {
    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      const token = localStorage.getItem('token');
      return {
        ...user,
        isAuthenticated: !!token,
        role: user.role || this.detectUserRole()
      };
    } catch {
      return { isAuthenticated: false, role: 'public' };
    }
  }

  detectUserRole() {
    const path = window.location.pathname;
    if (path.includes('/buyer/')) return 'buyer';
    if (path.includes('/seller/')) return 'seller';
    if (path.includes('/agent/')) return 'agent';
    if (path.includes('/admin/')) return 'admin';
    return 'public';
  }

  createNavigationStructure() {
    this.createMainNavigation();
    this.createSidebar();
    this.createBreadcrumbs();
    this.createQuickActions();
    this.createMobileMenu();
  }

  createMainNavigation() {
    const navContainer = document.getElementById('navigation-root');
    if (!navContainer) return;

    const mainNav = document.createElement('nav');
    mainNav.id = 'main-navigation';
    mainNav.className = 'fixed top-0 left-0 right-0 z-50 bg-white shadow-lg border-b border-gray-200';
    
    mainNav.innerHTML = this.getMainNavigationHTML();
    navContainer.appendChild(mainNav);
    
    this.navigationElements.mainNav = mainNav;
  }

  getMainNavigationHTML() {
    const isAuthenticated = this.currentUser.isAuthenticated;
    const role = this.currentUser.role;
    
    return `
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <!-- Logo and Brand -->
          <div class="flex items-center">
            <a href="/" data-route="home" class="flex items-center space-x-3">
              <img src="/public/images/logo.png" alt="ADD Physical Products" class="h-10 w-10 rounded-lg">
              <span class="text-xl font-bold text-gray-900">ADD Physical Products</span>
            </a>
          </div>

          <!-- Main Navigation Links -->
          <div class="hidden md:flex items-center space-x-8">
            ${this.getMainNavigationLinks()}
          </div>

          <!-- Right Side Actions -->
          <div class="flex items-center space-x-4">
            <!-- Mode Switcher -->
            <button id="mode-switcher" class="px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 border border-gray-300 rounded-md hover:bg-gray-50">
              ${this.currentMode === 'marketplace' ? '🛒 Local Market' : '📦 Marketplace'}
            </button>

            <!-- Cart (for buyers) -->
            ${role === 'buyer' ? this.getCartButton() : ''}

            <!-- User Actions -->
            <div class="flex items-center space-x-2">
              ${isAuthenticated ? this.getAuthenticatedUserMenu() : this.getGuestUserMenu()}
            </div>

            <!-- Mobile Menu Button -->
            <button id="mobile-menu-button" class="md:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100">
              <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Mobile Menu -->
      <div id="mobile-menu" class="md:hidden hidden bg-white border-t border-gray-200">
        <div class="px-2 pt-2 pb-3 space-y-1">
          ${this.getMobileNavigationLinks()}
        </div>
      </div>
    `;
  }

  getMainNavigationLinks() {
    const role = this.currentUser.role;
    const isAuthenticated = this.currentUser.isAuthenticated;

    if (!isAuthenticated) {
      return `
        <a href="/" data-route="home" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Home</a>
        <a href="/public/product-list.html" data-route="public.product-list" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Products</a>
        <a href="/public/categories.html" data-route="public.categories" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Categories</a>
        <a href="/public/about.html" data-route="public.about" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">About</a>
        <a href="/public/contact.html" data-route="public.contact" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Contact</a>
      `;
    }

    switch (role) {
      case 'buyer':
        return `
          <a href="/buyer/buyers-home.html" data-route="buyer.dashboard" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Dashboard</a>
          <a href="/buyer/product-list.html" data-route="buyer.products" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Products</a>
          <a href="/buyer/orders.html" data-route="buyer.orders" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Orders</a>
          <a href="/buyer/wishlist.html" data-route="buyer.wishlist" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Wishlist</a>
        `;
      case 'seller':
        return `
          <a href="/seller/dashboard.html" data-route="seller.dashboard" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Dashboard</a>
          <a href="/seller/product-list.html" data-route="seller.products" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Products</a>
          <a href="/seller/orders.html" data-route="seller.orders" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Orders</a>
          <a href="/seller/analytics.html" data-route="seller.analytics" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Analytics</a>
        `;
      case 'agent':
        return `
          <a href="/agent/dashboard.html" data-route="agent.dashboard" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Dashboard</a>
          <a href="/agent/orders.html" data-route="agent.orders" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Orders</a>
          <a href="/agent/deliveries.html" data-route="agent.deliveries" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Deliveries</a>
          <a href="/agent/earnings.html" data-route="agent.earnings" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Earnings</a>
        `;
      case 'admin':
        return `
          <a href="/admin/dashboard.html" data-route="admin.dashboard" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Dashboard</a>
          <a href="/admin/users.html" data-route="admin.users" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Users</a>
          <a href="/admin/products.html" data-route="admin.products" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Products</a>
          <a href="/admin/orders.html" data-route="admin.orders" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Orders</a>
        `;
      default:
        return this.getMainNavigationLinks(); // Fallback to public
    }
  }

  getMobileNavigationLinks() {
    // Similar to main navigation but formatted for mobile
    return this.getMainNavigationLinks().replace(/px-3 py-2 rounded-md text-sm font-medium/g, 'block px-3 py-2 rounded-md text-base font-medium');
  }

  getCartButton() {
    return `
      <a href="/buyer/cart.html" data-route="buyer.cart" class="relative p-2 text-gray-400 hover:text-gray-500">
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l-1.5 6m0 0h9m-9 0h9" />
        </svg>
        <span id="cart-badge" class="absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center hidden">0</span>
      </a>
    `;
  }

  getAuthenticatedUserMenu() {
    const user = this.currentUser;
    return `
      <div class="relative">
        <button id="user-menu-button" class="flex items-center space-x-2 text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          <img class="h-8 w-8 rounded-full" src="${user.avatar || '/public/images/default-avatar.png'}" alt="${user.name || 'User'}">
          <span class="hidden md:block text-gray-700">${user.name || 'User'}</span>
          <svg class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        
        <div id="user-menu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50">
          ${this.getUserMenuItems()}
        </div>
      </div>
    `;
  }

  getUserMenuItems() {
    const role = this.currentUser.role;
    const baseItems = `
      <a href="/${role}/profile.html" data-route="${role}.profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Profile</a>
      <a href="/${role}/settings.html" data-route="${role}.settings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Settings</a>
    `;

    const roleSpecificItems = {
      buyer: `
        <a href="/buyer/orders.html" data-route="buyer.orders" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">My Orders</a>
        <a href="/buyer/wallet.html" data-route="buyer.wallet" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Wallet</a>
      `,
      seller: `
        <a href="/seller/products.html" data-route="seller.products" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">My Products</a>
        <a href="/seller/analytics.html" data-route="seller.analytics" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Analytics</a>
      `,
      agent: `
        <a href="/agent/earnings.html" data-route="agent.earnings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Earnings</a>
        <a href="/agent/schedule.html" data-route="agent.schedule" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Schedule</a>
      `,
      admin: `
        <a href="/admin/settings.html" data-route="admin.settings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">System Settings</a>
        <a href="/admin/logs.html" data-route="admin.logs" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">System Logs</a>
      `
    };

    return `
      ${roleSpecificItems[role] || ''}
      ${baseItems}
      <div class="border-t border-gray-100"></div>
      <button onclick="this.logout()" class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign Out</button>
    `;
  }

  getGuestUserMenu() {
    return `
      <a href="/auth/auth-buyer.html" data-route="auth.login" class="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">Sign In</a>
      <a href="/auth/auth-buyer.html?action=register" data-route="auth.register" class="bg-indigo-600 text-white hover:bg-indigo-700 px-3 py-2 rounded-md text-sm font-medium">Sign Up</a>
    `;
  }

  createSidebar() {
    if (!this.currentUser.isAuthenticated) return;

    const sidebar = document.createElement('div');
    sidebar.id = 'navigation-sidebar';
    sidebar.className = 'fixed left-0 top-16 bottom-0 w-64 bg-white shadow-lg border-r border-gray-200 transform -translate-x-full transition-transform duration-300 ease-in-out z-40';
    
    sidebar.innerHTML = this.getSidebarHTML();
    document.body.appendChild(sidebar);
    
    this.navigationElements.sidebar = sidebar;
  }

  getSidebarHTML() {
    const role = this.currentUser.role;
    const sidebarItems = this.getSidebarItems(role);
    
    return `
      <div class="flex flex-col h-full">
        <div class="flex-1 overflow-y-auto py-4">
          <nav class="space-y-1 px-3">
            ${sidebarItems.map(item => `
              <a href="${item.path}" data-route="${item.route}" class="group flex items-center px-2 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50">
                <span class="mr-3 text-lg">${item.icon}</span>
                ${item.label}
                ${item.badge ? `<span class="ml-auto bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full">${item.badge}</span>` : ''}
              </a>
            `).join('')}
          </nav>
        </div>
        
        <div class="border-t border-gray-200 p-4">
          <div class="flex items-center">
            <img class="h-10 w-10 rounded-full" src="${this.currentUser.avatar || '/public/images/default-avatar.png'}" alt="">
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-700">${this.currentUser.name || 'User'}</p>
              <p class="text-xs text-gray-500">${role.charAt(0).toUpperCase() + role.slice(1)}</p>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  getSidebarItems(role) {
    const items = {
      buyer: [
        { label: 'Dashboard', route: 'buyer.dashboard', icon: '🏠', path: '/buyer/buyers-home.html' },
        { label: 'Browse Products', route: 'buyer.products', icon: '🛍️', path: '/buyer/product-list.html' },
        { label: 'My Cart', route: 'buyer.cart', icon: '🛒', path: '/buyer/cart.html', badge: 'cart' },
        { label: 'My Orders', route: 'buyer.orders', icon: '📋', path: '/buyer/orders.html' },
        { label: 'Order Tracking', route: 'buyer.track-order', icon: '📍', path: '/buyer/track-order.html' },
        { label: 'Wishlist', route: 'buyer.wishlist', icon: '❤️', path: '/buyer/wishlist.html' },
        { label: 'My Reviews', route: 'buyer.reviews', icon: '⭐', path: '/buyer/reviews.html' },
        { label: 'Messages', route: 'buyer.messages', icon: '💬', path: '/buyer/messages.html', badge: 'messages' },
        { label: 'Notifications', route: 'buyer.notifications', icon: '🔔', path: '/buyer/notifications.html' },
        { label: 'My Wallet', route: 'buyer.wallet', icon: '💳', path: '/buyer/wallet.html' },
        { label: 'Profile', route: 'buyer.profile', icon: '👤', path: '/buyer/profile.html' },
        { label: 'Settings', route: 'buyer.settings', icon: '⚙️', path: '/buyer/settings.html' },
        { label: 'Support', route: 'buyer.support', icon: '🆘', path: '/buyer/support.html' }
      ],
      seller: [
        { label: 'Dashboard', route: 'seller.dashboard', icon: '🏠', path: '/seller/dashboard.html' },
        { label: 'Add Product', route: 'seller.add-product', icon: '➕', path: '/seller/add-product.html' },
        { label: 'My Products', route: 'seller.products', icon: '📦', path: '/seller/product-list.html' },
        { label: 'Inventory', route: 'seller.inventory', icon: '📊', path: '/seller/inventory.html' },
        { label: 'Orders', route: 'seller.orders', icon: '📋', path: '/seller/orders.html' },
        { label: 'Analytics', route: 'seller.analytics', icon: '📈', path: '/seller/analytics.html' },
        { label: 'Promotions', route: 'seller.promotions', icon: '🎯', path: '/seller/promotions.html' },
        { label: 'Reviews', route: 'seller.reviews', icon: '⭐', path: '/seller/reviews.html' },
        { label: 'Messages', route: 'seller.messages', icon: '💬', path: '/seller/messages.html' },
        { label: 'Payouts', route: 'seller.payouts', icon: '💰', path: '/seller/payouts.html' },
        { label: 'Profile', route: 'seller.profile', icon: '👤', path: '/seller/profile.html' },
        { label: 'Settings', route: 'seller.settings', icon: '⚙️', path: '/seller/settings.html' }
      ],
      agent: [
        { label: 'Dashboard', route: 'agent.dashboard', icon: '🏠', path: '/agent/dashboard.html' },
        { label: 'Orders', route: 'agent.orders', icon: '📋', path: '/agent/orders.html' },
        { label: 'Deliveries', route: 'agent.deliveries', icon: '🚚', path: '/agent/deliveries.html' },
        { label: 'Pickups', route: 'agent.pickups', icon: '📦', path: '/agent/pickups.html' },
        { label: 'Earnings', route: 'agent.earnings', icon: '💰', path: '/agent/earnings.html' },
        { label: 'Schedule', route: 'agent.schedule', icon: '📅', path: '/agent/schedule.html' },
        { label: 'Location', route: 'agent.location-tracking', icon: '📍', path: '/agent/location-tracking.html' },
        { label: 'Messages', route: 'agent.messages', icon: '💬', path: '/agent/messages.html' },
        { label: 'Profile', route: 'agent.profile', icon: '👤', path: '/agent/profile.html' },
        { label: 'Settings', route: 'agent.settings', icon: '⚙️', path: '/agent/settings.html' }
      ],
      admin: [
        { label: 'Dashboard', route: 'admin.dashboard', icon: '🏠', path: '/admin/dashboard.html' },
        { label: 'Users', route: 'admin.users', icon: '👥', path: '/admin/users.html' },
        { label: 'Sellers', route: 'admin.sellers', icon: '🏪', path: '/admin/sellers.html' },
        { label: 'Agents', route: 'admin.agents', icon: '🤝', path: '/admin/agents.html' },
        { label: 'Products', route: 'admin.products', icon: '📦', path: '/admin/products.html' },
        { label: 'Categories', route: 'admin.categories', icon: '📂', path: '/admin/categories.html' },
        { label: 'Orders', route: 'admin.orders', icon: '📋', path: '/admin/orders.html' },
        { label: 'Payments', route: 'admin.payments', icon: '💳', path: '/admin/payments.html' },
        { label: 'Shipping', route: 'admin.shipping', icon: '🚚', path: '/admin/shipping.html' },
        { label: 'Reviews', route: 'admin.reviews', icon: '⭐', path: '/admin/reviews.html' },
        { label: 'Marketing', route: 'admin.marketing', icon: '📢', path: '/admin/marketing.html' },
        { label: 'Reports', route: 'admin.reports', icon: '📊', path: '/admin/reports.html' },
        { label: 'Support', route: 'admin.support-tickets', icon: '🎫', path: '/admin/support-tickets.html' },
        { label: 'Settings', route: 'admin.settings', icon: '⚙️', path: '/admin/settings.html' }
      ]
    };

    return items[role] || [];
  }

  createBreadcrumbs() {
    const breadcrumbContainer = document.createElement('div');
    breadcrumbContainer.id = 'breadcrumb-container';
    breadcrumbContainer.className = 'fixed top-16 left-0 right-0 bg-gray-50 border-b border-gray-200 px-4 py-2 z-30';
    
    const breadcrumbs = this.generateBreadcrumbs();
    if (breadcrumbs.length > 1) {
      breadcrumbContainer.innerHTML = `
        <nav class="flex" aria-label="Breadcrumb">
          <ol class="flex items-center space-x-2">
            ${breadcrumbs.map((crumb, index) => `
              <li class="flex items-center">
                ${index > 0 ? '<svg class="flex-shrink-0 h-4 w-4 text-gray-400 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" /></svg>' : ''}
                ${index === breadcrumbs.length - 1 ? 
                  `<span class="text-sm font-medium text-gray-500">${crumb.label}</span>` :
                  `<a href="${crumb.path}" data-route="${crumb.route}" class="text-sm font-medium text-gray-700 hover:text-gray-900">${crumb.label}</a>`
                }
              </li>
            `).join('')}
          </ol>
        </nav>
      `;
      
      document.body.appendChild(breadcrumbContainer);
      this.navigationElements.breadcrumbs = breadcrumbContainer;
    }
  }

  generateBreadcrumbs() {
    const path = window.location.pathname;
    const segments = path.split('/').filter(Boolean);
    const breadcrumbs = [];

    // Always start with home
    breadcrumbs.push({
      label: 'Home',
      path: '/',
      route: 'home'
    });

    // Add segments based on path
    if (segments.length > 0) {
      const role = segments[0];
      
      if (role === 'public') {
        if (segments[1]) {
          const page = segments[1].replace('.html', '');
          breadcrumbs.push({
            label: this.formatPageName(page),
            path: path,
            route: `public.${page}`
          });
        }
      } else if (['buyer', 'seller', 'agent', 'admin'].includes(role)) {
        breadcrumbs.push({
          label: `${role.charAt(0).toUpperCase() + role.slice(1)} Dashboard`,
          path: `/${role}/dashboard.html`,
          route: `${role}.dashboard`
        });

        if (segments[1] && segments[1] !== 'dashboard.html') {
          const page = segments[1].replace('.html', '');
          breadcrumbs.push({
            label: this.formatPageName(page),
            path: path,
            route: `${role}.${page}`
          });
        }
      } else if (role === 'grocery') {
        breadcrumbs.push({
          label: 'Local Market',
          path: '/grocery/local-market-home.html',
          route: 'home'
        });

        if (segments[1] && segments[1] !== 'local-market-home.html') {
          const page = segments[1].replace('.html', '').replace('grocery-', '');
          breadcrumbs.push({
            label: this.formatPageName(page),
            path: path,
            route: `buyer.${page}`
          });
        }
      }
    }

    return breadcrumbs;
  }

  formatPageName(page) {
    return page
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  createQuickActions() {
    if (!this.currentUser.isAuthenticated) return;

    const quickActions = document.createElement('div');
    quickActions.id = 'quick-actions';
    quickActions.className = 'fixed bottom-6 right-6 z-40';
    
    const actions = this.getQuickActions();
    if (actions.length > 0) {
      quickActions.innerHTML = `
        <div class="flex flex-col space-y-2">
          ${actions.map(action => `
            <button data-route="${action.route}" class="bg-indigo-600 hover:bg-indigo-700 text-white p-3 rounded-full shadow-lg transition-colors duration-200" title="${action.label}">
              <span class="text-xl">${action.icon}</span>
            </button>
          `).join('')}
        </div>
      `;
      
      document.body.appendChild(quickActions);
      this.navigationElements.quickActions = quickActions;
    }
  }

  getQuickActions() {
    const role = this.currentUser.role;
    const actions = {
      buyer: [
        { label: 'Add to Cart', route: 'buyer.cart', icon: '🛒' },
        { label: 'Messages', route: 'buyer.messages', icon: '💬' }
      ],
      seller: [
        { label: 'Add Product', route: 'seller.add-product', icon: '➕' },
        { label: 'Messages', route: 'seller.messages', icon: '💬' }
      ],
      agent: [
        { label: 'New Delivery', route: 'agent.deliveries', icon: '🚚' },
        { label: 'Messages', route: 'agent.messages', icon: '💬' }
      ],
      admin: [
        { label: 'System Settings', route: 'admin.settings', icon: '⚙️' },
        { label: 'Support Tickets', route: 'admin.support-tickets', icon: '🎫' }
      ]
    };

    return actions[role] || [];
  }

  createMobileMenu() {
    // Mobile menu is created as part of main navigation
    // This method handles mobile-specific functionality
    this.setupMobileMenuToggle();
  }

  setupMobileMenuToggle() {
    document.addEventListener('click', (e) => {
      const mobileMenuButton = e.target.closest('#mobile-menu-button');
      const mobileMenu = document.getElementById('mobile-menu');
      
      if (mobileMenuButton && mobileMenu) {
        mobileMenu.classList.toggle('hidden');
      }
      
      // Close mobile menu when clicking outside
      if (!e.target.closest('#mobile-menu') && !e.target.closest('#mobile-menu-button')) {
        if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
        }
      }
    });
  }

  setupEventListeners() {
    // Mode switcher
    document.addEventListener('click', (e) => {
      if (e.target.closest('#mode-switcher')) {
        e.preventDefault();
        const targetMode = this.currentMode === 'marketplace' ? 'local-market' : 'marketplace';
        this.router.switchMode(targetMode);
      }
    });

    // User menu toggle
    document.addEventListener('click', (e) => {
      const userMenuButton = e.target.closest('#user-menu-button');
      const userMenu = document.getElementById('user-menu');
      
      if (userMenuButton && userMenu) {
        e.preventDefault();
        userMenu.classList.toggle('hidden');
      } else if (!e.target.closest('#user-menu')) {
        if (userMenu && !userMenu.classList.contains('hidden')) {
          userMenu.classList.add('hidden');
        }
      }
    });

    // Sidebar toggle for mobile
    document.addEventListener('click', (e) => {
      if (e.target.closest('#sidebar-toggle')) {
        const sidebar = this.navigationElements.sidebar;
        if (sidebar) {
          sidebar.classList.toggle('-translate-x-full');
        }
      }
    });

    // Listen for mode changes
    window.addEventListener('modechange', (e) => {
      this.currentMode = e.detail.newMode;
      this.updateNavigationState();
    });

    // Listen for user changes
    window.addEventListener('userchange', (e) => {
      this.currentUser = e.detail.user;
      this.recreateNavigation();
    });
  }

  updateNavigationState() {
    // Update mode switcher
    const modeSwitcher = document.getElementById('mode-switcher');
    if (modeSwitcher) {
      modeSwitcher.textContent = this.currentMode === 'marketplace' ? '🛒 Local Market' : '📦 Marketplace';
    }

    // Update active navigation items
    this.highlightActiveNavigation();

    // Update cart badge
    this.updateCartBadge();

    // Update message badges
    this.updateMessageBadges();
  }

  highlightActiveNavigation() {
    const currentPath = window.location.pathname;
    
    // Remove existing active classes
    document.querySelectorAll('.nav-active').forEach(el => {
      el.classList.remove('nav-active', 'bg-indigo-100', 'text-indigo-700');
    });

    // Add active class to current page
    document.querySelectorAll(`[href="${currentPath}"]`).forEach(el => {
      el.classList.add('nav-active', 'bg-indigo-100', 'text-indigo-700');
    });
  }

  updateCartBadge() {
    const cartBadge = document.getElementById('cart-badge');
    if (cartBadge) {
      const cartCount = this.getCartCount();
      if (cartCount > 0) {
        cartBadge.textContent = cartCount;
        cartBadge.classList.remove('hidden');
      } else {
        cartBadge.classList.add('hidden');
      }
    }
  }

  updateMessageBadges() {
    const messageBadges = document.querySelectorAll('[data-badge="messages"]');
    messageBadges.forEach(badge => {
      const messageCount = this.getUnreadMessageCount();
      if (messageCount > 0) {
        badge.textContent = messageCount;
        badge.classList.remove('hidden');
      } else {
        badge.classList.add('hidden');
      }
    });
  }

  getCartCount() {
    try {
      const cart = JSON.parse(localStorage.getItem('cart') || '[]');
      return cart.reduce((total, item) => total + (item.quantity || 1), 0);
    } catch {
      return 0;
    }
  }

  getUnreadMessageCount() {
    try {
      const messages = JSON.parse(localStorage.getItem('unreadMessages') || '[]');
      return messages.length;
    } catch {
      return 0;
    }
  }

  recreateNavigation() {
    // Remove existing navigation
    Object.values(this.navigationElements).forEach(element => {
      if (element && element.parentNode) {
        element.parentNode.removeChild(element);
      }
    });

    // Recreate navigation
    this.createNavigationStructure();
    this.updateNavigationState();
  }

  logout() {
    // Clear user data
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    localStorage.removeItem('cart');
    localStorage.removeItem('unreadMessages');

    // Redirect to home
    this.router.navigate('home', {}, { replace: true });
  }

  // Public API
  refresh() {
    this.currentUser = this.getCurrentUser();
    this.currentMode = this.router?.getMode() || 'marketplace';
    this.updateNavigationState();
  }

  showSidebar() {
    const sidebar = this.navigationElements.sidebar;
    if (sidebar) {
      sidebar.classList.remove('-translate-x-full');
    }
  }

  hideSidebar() {
    const sidebar = this.navigationElements.sidebar;
    if (sidebar) {
      sidebar.classList.add('-translate-x-full');
    }
  }

  toggleSidebar() {
    const sidebar = this.navigationElements.sidebar;
    if (sidebar) {
      sidebar.classList.toggle('-translate-x-full');
    }
  }
}

// Create global instance
window.navigationManager = new NavigationManager();

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
  module.exports = NavigationManager;
}
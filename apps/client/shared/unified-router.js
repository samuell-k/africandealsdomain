/** * Unified Router System for ADD Physical Products Platform * Handles seamless routing between Physical Products and Local Market modes * Ensures complete user journey from login to delivery confirmation */class UnifiedRouter {  constructor() {    this.currentMode = this.detectCurrentMode();    this.currentUser = this.getCurrentUser();    this.routes = this.initializeRoutes();    this.fallbackRoutes = this.initializeFallbackRoutes();    this.userJourneyMap = this.initializeUserJourneyMap();    this.init();  }  init() {    this.setupEventListeners();    this.validateCurrentRoute();    this.initializeModeManager();    console.log('ðŸš€ Unified Router initialized');  }  detectCurrentMode() {    const path = window.location.pathname;    const urlParams = new URLSearchParams(window.location.search);    // Check URL parameters first    if (urlParams.get('mode') === 'local' || urlParams.get('market') === 'local') {      return 'local-market';    }    // Check path segments    if (path.includes('/grocery/') ||         path.includes('local-market') ||         path.includes('grocery-') ||        path.includes('fast-delivery')) {      return 'local-market';    }    // Check localStorage    const storedMode = localStorage.getItem('marketplace_mode');    if (storedMode === 'local_market') {      return 'local-market';    }    return 'marketplace'; // Default  }  getCurrentUser() {    try {      const user = JSON.parse(localStorage.getItem('user') || '{}');      const token = localStorage.getItem('token');      return {        ...user,        isAuthenticated: !!token,        role: user.role || this.detectUserRole()      };    } catch {      return {        isAuthenticated: false,        role: 'public'      };    }  }  detectUserRole() {    const path = window.location.pathname;    if (path.includes('/buyer/')) return 'buyer';    if (path.includes('/seller/')) return 'seller';    if (path.includes('/agent/')) return 'agent';    if (path.includes('/admin/')) return 'admin';    return 'public';  }  initializeRoutes() {    return {      // Home routes      home: {        marketplace: '/public/index.html',        'local-market': '/grocery/local-market-home.html'      },      // Authentication routes (shared between modes)      auth: {        login: '/auth/auth-buyer.html',        'login-seller': '/auth/auth-seller.html',        'login-agent': '/auth/auth-agent.html',        'login-admin': '/auth/auth-admin.html',        register: '/auth/auth-buyer.html?action=register',        'register-seller': '/auth/auth-seller.html?action=register',        'forgot-password': '/auth/forgot-password.html',        'reset-password': '/auth/reset-password.html',        'verify-email': '/auth/verify-email.html',        'verify-phone': '/auth/verify-phone.html'      },      // Public routes (shared)      public: {        about: '/public/about.html',        contact: '/public/contact.html',        faq: '/public/faq.html',        'how-it-works': '/public/how-it-works.html',        'privacy-policy': '/public/privacy-policy.html',        'terms-and-conditions': '/public/terms-and-conditions.html',        'shipping-policy': '/public/shipping-policy.html',        'returns-policy': '/public/returns-policy.html',        categories: {          marketplace: '/public/categories.html',          'local-market': '/grocery/grocery-categories.html'        },        'product-list': {          marketplace: '/public/products.html',          'local-market': '/grocery/grocery-products.html'        },        'product-detail': {          marketplace: '/public/product-detail.html',          'local-market': '/grocery/grocery-product-detail.html'        },        'search-results': '/public/search-results.html'      },      // Buyer routes (mode-specific)      buyer: {        dashboard: {          marketplace: '/buyer/buyers-home.html',          'local-market': '/grocery/local-market-home.html'        },        products: {          marketplace: '/buyer/products.html',          'local-market': '/grocery/grocery-products.html'        },        'product-detail': {          marketplace: '/buyer/product-detail.html',          'local-market': '/grocery/grocery-product-detail.html'        },        cart: {          marketplace: '/buyer/cart.html',          'local-market': '/grocery/cart.html'        },        checkout: {          marketplace: '/buyer/checkout.html',          'local-market': '/grocery/grocery-checkout.html'        },        payment: {          marketplace: '/buyer/payment.html',          'local-market': '/buyer/payment.html?mode=local'        },        orders: {          marketplace: '/buyer/orders.html',          'local-market': '/grocery/grocery-orders.html'        },        'order-detail': {          marketplace: '/buyer/order-detail.html',          'local-market': '/grocery/grocery-order-detail.html'        },        'order-success': {          marketplace: '/buyer/order-success.html',          'local-market': '/grocery/order-success.html'        },        'track-order': {          marketplace: '/buyer/track-order.html',          'local-market': '/buyer/track-order.html?mode=local'        },        // Shared buyer pages        wishlist: '/buyer/wishlist.html',        profile: '/buyer/profile.html',        'edit-profile': '/buyer/edit-profile.html',        settings: '/buyer/settings.html',        wallet: '/buyer/wallet.html',        messages: {          marketplace: '/buyer/messages.html',          'local-market': '/grocery/grocery-messages.html'        },        notifications: {          marketplace: '/buyer/notifications.html',          'local-market': '/grocery/grocery-notifications.html'        },        reviews: {          marketplace: '/buyer/reviews.html',          'local-market': '/grocery/grocery-reviews.html'        },        support: {          marketplace: '/buyer/support.html',          'local-market': '/grocery/grocery-support.html'        }      },      // Seller routes      seller: {        dashboard: '/seller/dashboard.html',        'add-product': {          marketplace: '/seller/add-product.html',          'local-market': '/seller/add-local-market-product.html'        },        'edit-product': '/seller/edit-product.html',        products: '/seller/products.html',        inventory: '/seller/inventory.html',        orders: '/seller/orders.html',        'order-detail': '/seller/order-detail.html',        analytics: '/seller/analytics.html',        promotions: '/seller/promotions.html',        'boosted-products': '/seller/boosted-products.html',        payouts: '/seller/payouts.html',        commission: '/seller/commission.html',        returns: '/seller/returns.html',        'returns-detail': '/seller/returns-detail.html',        reviews: '/seller/reviews.html',        messages: '/seller/messages.html',        notifications: '/seller/notifications.html',        profile: '/seller/profile.html',        'edit-profile': '/seller/edit-profile.html',        settings: '/seller/settings.html',        wallet: '/seller/wallet.html',        support: '/seller/support.html'      },      // Agent routes      agent: {        dashboard: {          marketplace: '/agent/dashboard.html',          'local-market': '/agent/local-market-dashboard.html'        },        orders: '/agent/orders.html',        'order-detail': '/agent/order-detail.html',        deliveries: '/agent/deliveries.html',        'deliveries-detail': '/agent/deliveries-detail.html',        pickups: '/agent/pickups.html',        'pickups-detail': '/agent/pickups-detail.html',        earnings: '/agent/earnings.html',        schedule: '/agent/schedule.html',        'location-tracking': '/agent/location-tracking.html',        messages: '/agent/messages.html',        notifications: '/agent/notifications.html',        profile: '/agent/profile.html',        'edit-profile': '/agent/edit-profile.html',        settings: '/agent/settings.html',        wallet: '/agent/wallet.html',        support: '/agent/support.html'      },      // Admin routes      admin: {        dashboard: '/admin/dashboard.html',        users: '/admin/user-management.html',        'user-detail': '/admin/user-detail.html',        'user-edit': '/admin/user-edit.html',        sellers: '/admin/sellers.html',        'seller-detail': '/admin/seller-detail.html',        'seller-edit': '/admin/seller-edit.html',        agents: '/admin/agents.html',        'agent-detail': '/admin/agent-detail.html',        'agent-edit': '/admin/agent-edit.html',        products: '/admin/products.html',        'product-detail': '/admin/product-detail.html',        'product-edit': '/admin/product-edit.html',        categories: '/admin/categories.html',        'category-management': '/admin/category-management.html',        orders: '/admin/orders.html',        'order-detail': '/admin/order-detail.html',        'order-edit': '/admin/order-edit.html',        'order-management': '/admin/order-management.html',        payments: '/admin/payments.html',        'payment-methods': '/admin/payment-methods.html',        'payment-monitoring': '/admin/payment-monitoring.html',        shipping: '/admin/shipping.html',        'shipping-management': '/admin/shipping-management.html',        'shipping-rules': '/admin/shipping-rules.html',        'delivery-zones': '/admin/delivery-zones.html',        reviews: '/admin/reviews.html',        'review-detail': '/admin/review-detail.html',        promotions: '/admin/promotions.html',        marketing: '/admin/marketing.html',        reports: '/admin/reports.html',        'support-tickets': '/admin/support-tickets.html',        logs: '/admin/logs.html',        settings: '/admin/settings.html',        'system-settings': '/admin/system-settings.html',        'local-market-admin': '/admin/local-market-admin.html',        'grocery-management': '/admin/grocery-management.html'      },      // Error routes      error: {        '404': '/auth/404.html',        'access-denied': '/auth/access-denied.html',        maintenance: '/auth/maintenance.html',        'coming-soon': '/auth/coming-soon.html'      }    };  }  initializeFallbackRoutes() {    return {      public: '/public/index.html',      buyer: '/buyer/buyers-home.html',      seller: '/seller/dashboard.html',      agent: '/agent/dashboard.html',      admin: '/admin/dashboard.html',      error: '/auth/404.html'    };  }  initializeUserJourneyMap() {    return {      // Complete buyer journey for both modes      'buyer-journey': {        marketplace: [          'home',          'public.product-list',          'public.product-detail',          'buyer.cart',          'auth.login',          'buyer.checkout',          'buyer.payment',          'buyer.order-success',          'buyer.orders',          'buyer.track-order'        ],        'local-market': [          'home',          'public.product-list',          'public.product-detail',          'buyer.cart',          'auth.login',          'buyer.checkout',          'buyer.payment',          'buyer.order-success',          'buyer.orders',          'buyer.track-order'        ]      },      // Seller journey      'seller-journey': [        'auth.login-seller',        'seller.dashboard',        'seller.add-product',        'seller.products',        'seller.orders',        'seller.analytics'      ],      // Agent journey      'agent-journey': [        'auth.login-agent',        'agent.dashboard',        'agent.orders',        'agent.deliveries',        'agent.earnings'      ]    };  }  // Navigate to a specific route  navigate(routeKey, params = {}, options = {}) {    const url = this.getRouteUrl(routeKey, params);    if (!url) {      console.error(`Route not found: ${routeKey}`);      this.handleRouteError(routeKey);      return false;    }    // Show loading if not disabled    if (!options.skipLoading) {      this.showLoadingIndicator();    }    // Add mode parameter if needed    const finalUrl = this.addModeParameter(url, params);    // Navigate with delay for UX    setTimeout(() => {      if (options.replace) {        window.location.replace(finalUrl);      } else {        window.location.href = finalUrl;      }    }, options.delay || 200);    return true;  }  // Get URL for a route  getRouteUrl(routeKey, params = {}) {    const routeParts = routeKey.split('.');    let route = this.routes;    // Navigate through route object    for (const part of routeParts) {      if (route[part]) {        route = route[part];      } else {        return null;      }    }    // Handle mode-specific routes    if (typeof route === 'object' && route[this.currentMode]) {      route = route[this.currentMode];    } else if (typeof route === 'object' && !route[this.currentMode]) {      // Fallback to marketplace mode      route = route.marketplace || route;    }    if (typeof route === 'string') {      return this.addQueryParameters(route, params);    }    return null;  }  // Add query parameters to URL  addQueryParameters(url, params) {    if (Object.keys(params).length === 0) return url;    const urlObj = new URL(url, window.location.origin);    Object.entries(params).forEach(([key, value]) => {      urlObj.searchParams.set(key, value);    });    return urlObj.pathname + urlObj.search;  }  // Add mode parameter to URL if needed  addModeParameter(url, params) {    if (this.currentMode === 'local-market' && !params.mode) {      return this.addQueryParameters(url, { mode: 'local' });    }    return url;  }  // Switch between modes  switchMode(targetMode, preserveContext = true) {    if (targetMode === this.currentMode) return;    const previousMode = this.currentMode;    this.currentMode = targetMode;    // Update localStorage    localStorage.setItem('marketplace_mode', targetMode === 'local-market' ? 'local_market' : 'physical');    // Determine target route    let targetRoute = 'home';    if (preserveContext) {      targetRoute = this.getEquivalentRoute(window.location.pathname, targetMode);    }    // Update mode manager if available    if (window.marketplaceModeManager) {      window.marketplaceModeManager.setMode(targetMode === 'local-market' ? 'local_market' : 'physical', false);    }    // Navigate to equivalent route    this.navigate(targetRoute, {}, { skipLoading: false });    // Trigger mode change event    this.triggerModeChangeEvent(previousMode, targetMode);  }  // Get equivalent route in target mode  getEquivalentRoute(currentPath, targetMode) {    // Map current path to route key    const routeKey = this.pathToRouteKey(currentPath);    if (!routeKey) return 'home';    // Check if route exists in target mode    const targetUrl = this.getRouteUrl(routeKey);    if (targetUrl) return routeKey;    // Fallback to appropriate dashboard or home    if (currentPath.includes('/buyer/')) return 'buyer.dashboard';    if (currentPath.includes('/seller/')) return 'seller.dashboard';    if (currentPath.includes('/agent/')) return 'agent.dashboard';    if (currentPath.includes('/admin/')) return 'admin.dashboard';    return 'home';  }  // Convert path to route key  pathToRouteKey(path) {    // Remove query parameters    const cleanPath = path.split('?')[0];    // Find matching route    for (const [category, routes] of Object.entries(this.routes)) {      for (const [key, route] of Object.entries(routes)) {        if (typeof route === 'string' && route === cleanPath) {          return `${category}.${key}`;        } else if (typeof route === 'object') {          for (const [mode, modePath] of Object.entries(route)) {            if (modePath === cleanPath) {              return `${category}.${key}`;            }          }        }      }    }    return null;  }  // Validate current route  validateCurrentRoute() {    const currentPath = window.location.pathname;    // Check if current route is valid    if (!this.isValidRoute(currentPath)) {      console.warn(`Invalid route detected: ${currentPath}`);      this.handleInvalidRoute(currentPath);    }  }  // Check if route is valid  isValidRoute(path) {    const cleanPath = path.split('?')[0];    // Check against all known routes    for (const routes of Object.values(this.routes)) {      for (const route of Object.values(routes)) {        if (typeof route === 'string' && route === cleanPath) {          return true;        } else if (typeof route === 'object') {          for (const modePath of Object.values(route)) {            if (modePath === cleanPath) {              return true;            }          }        }      }    }    return false;  }  // Handle invalid route  handleInvalidRoute(path) {    // Try to find a similar valid route    const similarRoute = this.findSimilarRoute(path);    if (similarRoute) {      console.log(`Redirecting to similar route: ${similarRoute}`);      this.navigate(similarRoute, {}, { replace: true });    } else {      // Redirect to appropriate fallback      const role = this.currentUser.role || 'public';      const fallback = this.fallbackRoutes[role];      console.log(`Redirecting to fallback: ${fallback}`);      window.location.replace(fallback);    }  }  // Find similar route  findSimilarRoute(path) {    const segments = path.split('/').filter(Boolean);    // Try to match by role    if (segments.length > 0) {      const role = segments[0];      if (this.routes[role]) {        return `${role}.dashboard`;      }    }    return null;  }  // Handle route error  handleRouteError(routeKey) {    console.error(`Failed to navigate to: ${routeKey}`);    // Try fallback route    const parts = routeKey.split('.');    if (parts.length > 1) {      const role = parts[0];      const fallback = this.fallbackRoutes[role];      if (fallback) {        window.location.href = fallback;        return;      }    }    // Ultimate fallback    this.navigate('error.404');  }  // Setup event listeners  setupEventListeners() {    // Handle data-route clicks    document.addEventListener('click', (e) => {      const routeElement = e.target.closest('[data-route]');      if (routeElement) {        e.preventDefault();        const route = routeElement.dataset.route;        const params = routeElement.dataset.params ?           JSON.parse(routeElement.dataset.params) : {};        this.navigate(route, params);      }      // Handle mode switching      });    // Handle browser navigation    window.addEventListener('popstate', () => {      this.currentMode = this.detectCurrentMode();      this.validateCurrentRoute();    });    // Handle mode changes from other components    window.addEventListener('modechange', (e) => {      if (e.detail.mode !== this.currentMode) {        this.switchMode(e.detail.mode, false);      }    });  }  // Initialize mode manager integration  initializeModeManager() {    if (window.marketplaceModeManager) {      // Sync modes      const modeManagerMode = window.marketplaceModeManager.getCurrentMode();      const routerMode = modeManagerMode === 'local_market' ? 'local-market' : 'marketplace';      if (routerMode !== this.currentMode) {        this.currentMode = routerMode;      }      // Listen for mode changes      window.marketplaceModeManager.addListener((prevMode, newMode) => {        const routerMode = newMode === 'local_market' ? 'local-market' : 'marketplace';        if (routerMode !== this.currentMode) {          this.switchMode(routerMode, true);        }      });    }  }  // Show loading indicator  showLoadingIndicator() {    // Remove existing indicator    const existing = document.getElementById('unified-router-loading');    if (existing) existing.remove();    // Create loading indicator    const indicator = document.createElement('div');    indicator.id = 'unified-router-loading';    indicator.className = 'fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50';    indicator.innerHTML = `      <div class="bg-white rounded-2xl p-6 shadow-xl">        <div class="flex items-center space-x-3">          <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>          <span class="text-gray-700 font-medium">Loading...</span>        </div>      </div>    `;    document.body.appendChild(indicator);    // Auto-remove after 5 seconds    setTimeout(() => {      if (indicator.parentNode) {        indicator.remove();      }    }, 5000);  }  // Trigger mode change event  triggerModeChangeEvent(previousMode, newMode) {    const event = new CustomEvent('modechange', {      detail: {        previousMode,        newMode,        timestamp: Date.now()      }    });    window.dispatchEvent(event);  }  // Get user journey for current mode  getUserJourney(journeyType = 'buyer-journey') {    const journey = this.userJourneyMap[journeyType];    if (typeof journey === 'object' && journey[this.currentMode]) {      return journey[this.currentMode];    }    return journey || [];  }  // Navigate through user journey  navigateJourney(journeyType, step) {    const journey = this.getUserJourney(journeyType);    if (step < journey.length) {      this.navigate(journey[step]);      return true;    }    return false;  }  // Get current mode info  getCurrentModeInfo() {    return {      mode: this.currentMode,      isMarketplace: this.currentMode === 'marketplace',      isLocalMarket: this.currentMode === 'local-market',      user: this.currentUser    };  }  // Public API methods  getMode() {    return this.currentMode;  }  isMarketplaceMode() {    return this.currentMode === 'marketplace';  }  isLocalMarketMode() {    return this.currentMode === 'local-market';  }  // Debug methods  debugRoutes() {    console.table(this.routes);  }  debugCurrentState() {    console.log('Current Router State:', {      mode: this.currentMode,      user: this.currentUser,      path: window.location.pathname,      isValidRoute: this.isValidRoute(window.location.pathname)    });  }}// Create global instancewindow.unifiedRouter = new UnifiedRouter();// Export for module systemsif (typeof module !== 'undefined' && module.exports) {  module.exports = UnifiedRouter;}
// Mode Manager for Two-Mode Marketplace System
// Handles Physical Products Mode (default) and Local Market / Fast Delivery Mode

class MarketplaceModeManager {
  constructor() {
    this.MODES = {
      PHYSICAL: 'physical',
      LOCAL_MARKET: 'local_market'
    };
    
    this.DEFAULT_MODE = this.MODES.PHYSICAL;
    this.STORAGE_KEY = 'marketplace_mode';
    
    this.currentMode = this.getStoredMode();
    this.listeners = [];
    
    // Initialize mode
    this.setMode(this.currentMode, false); // Don't trigger events on init
  }

  // Get mode from localStorage
  getStoredMode() {
    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      return stored && this.MODES[stored.toUpperCase()] ? stored : this.DEFAULT_MODE;
    } catch (e) {
      console.warn('Failed to get stored mode:', e);
      return this.DEFAULT_MODE;
    }
  }

  // Get current mode
  getCurrentMode() {
    return this.currentMode;
  }

  // Check if current mode is physical products
  isPhysicalMode() {
    return this.currentMode === this.MODES.PHYSICAL;
  }

  // Check if current mode is local market
  isLocalMarketMode() {
    return this.currentMode === this.MODES.LOCAL_MARKET;
  }

  // Set mode and persist to localStorage
  setMode(mode, triggerEvents = true) {
    if (!Object.values(this.MODES).includes(mode)) {
      console.warn(`Invalid mode: ${mode}`);
      return false;
    }

    const previousMode = this.currentMode;
    this.currentMode = mode;

    try {
      localStorage.setItem(this.STORAGE_KEY, mode);
    } catch (e) {
      console.warn('Failed to store mode:', e);
    }

    // Update UI elements
    this.updateUI();

    // Trigger events if requested
    if (triggerEvents) {
      this.notifyListeners(previousMode, mode);
    }

    return true;
  }

  // Toggle between modes
  toggleMode() {
    const newMode = this.isPhysicalMode() ? this.MODES.LOCAL_MARKET : this.MODES.PHYSICAL;
    return this.setMode(newMode);
  }

  // Update UI elements based on current mode
  updateUI() {
    // Update mode switch buttons
    this.updateModeSwitchButtons();
    
    // Update page content based on mode
    this.updatePageContent();
    
    // Update navigation
    this.updateNavigation();
  }

  // Update mode switch buttons
  updateModeSwitchButtons() {
    const switches = document.querySelectorAll('[data-mode-switch]');
    switches.forEach(switchEl => {
      const isPhysical = this.isPhysicalMode();
      
      // Update button text and appearance
      const button = switchEl.querySelector('[data-mode-button]');
      if (button) {
        if (isPhysical) {
          button.innerHTML = `
            <span class="text-2xl">ðŸ›’</span>
            <span>Switch to Local Market / Fast Delivery</span>
            <span class="bg-white/20 px-2 py-1 rounded-full text-sm">NEW</span>
          `;
          button.className = 'inline-flex items-center gap-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white px-6 py-3 rounded-xl hover:from-green-600 hover:to-emerald-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl font-semibold';
        } else {
          button.innerHTML = `
            <span class="text-2xl">ðŸ“¦</span>
            <span>Back to General Marketplace</span>
          `;
          button.className = 'inline-flex items-center gap-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-6 py-3 rounded-xl hover:from-blue-600 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl font-semibold';
        }
      }

      // Update mode indicator
      const indicator = switchEl.querySelector('[data-mode-indicator]');
      if (indicator) {
        if (isPhysical) {
          indicator.innerHTML = `
            <div class="flex items-center gap-2 text-sm text-gray-600">
              <span class="w-2 h-2 bg-blue-500 rounded-full"></span>
              <span>Physical Products Mode</span>
            </div>
          `;
        } else {
          indicator.innerHTML = `
            <div class="flex items-center gap-2 text-sm text-gray-600">
              <span class="w-2 h-2 bg-green-500 rounded-full"></span>
              <span>Local Market Mode</span>
            </div>
          `;
        }
      }
    });
  }

  // Update page content based on mode
  updatePageContent() {
    const isPhysical = this.isPhysicalMode();
    
    // Update page title
    const title = document.querySelector('title');
    if (title) {
      if (isPhysical) {
        title.textContent = title.textContent.replace('Local Market', 'Physical Products');
      } else {
        title.textContent = title.textContent.replace('Physical Products', 'Local Market');
      }
    }

    // Update main heading
    const mainHeading = document.querySelector('[data-mode-heading]');
    if (mainHeading) {
      if (isPhysical) {
        mainHeading.innerHTML = `
          <h1 class="text-3xl font-bold brand-text mb-4">Welcome to General Marketplace</h1>
          <p class="text-lg text-gray-600 mb-6">Discover amazing products from trusted sellers worldwide</p>
        `;
      } else {
        mainHeading.innerHTML = `
          <h1 class="text-3xl font-bold brand-text mb-4">Welcome to Local Market</h1>
          <p class="text-lg text-gray-600 mb-6">Fresh groceries and local products delivered fast</p>
        `;
      }
    }

    // Update product sections
    this.updateProductSections();
  }

  // Update product sections based on mode
  updateProductSections() {
    const isPhysical = this.isPhysicalMode();
    
    // Update featured products section
    const featuredSection = document.querySelector('[data-featured-section]');
    if (featuredSection) {
      const title = featuredSection.querySelector('h2');
      const viewAllLink = featuredSection.querySelector('a[href*="product-list"]');
      
      if (isPhysical) {
        if (title) title.textContent = 'Featured Products';
        if (viewAllLink) viewAllLink.href = '/buyer/product-list.html';
      } else {
        if (title) title.textContent = 'Featured Local Products';
        if (viewAllLink) viewAllLink.href = '/buyer/local-market.html';
      }
    }

    // Update categories section
    const categoriesSection = document.querySelector('[data-categories-section]');
    if (categoriesSection) {
      const title = categoriesSection.querySelector('h2');
      if (title) {
        title.textContent = isPhysical ? 'Shop by Category' : 'Local Categories';
      }
    }

    // Update seller product management links
    this.updateSellerProductLinks();
  }

  // Update seller product management links based on mode
  updateSellerProductLinks() {
    const isPhysical = this.isPhysicalMode();
    
    // Update "Add Product" links
    const addProductLinks = document.querySelectorAll('a[href*="add-product"]');
    addProductLinks.forEach(link => {
      if (isPhysical) {
        link.href = '/seller/add-product.html';
        link.innerHTML = link.innerHTML.replace('ðŸ›’', 'ðŸ“¦');
      } else {
        link.href = '/seller/add-grocery-product.html';
        link.innerHTML = link.innerHTML.replace('ðŸ“¦', 'ðŸ›’');
      }
    });

    // Update "My Products" links
    const myProductsLinks = document.querySelectorAll('a[href*="product-list"]');
    myProductsLinks.forEach(link => {
      if (isPhysical) {
        link.href = '/seller/product-list.html';
      } else {
        link.href = '/seller/product-list.html?mode=local';
      }
    });
  }

  // Update navigation based on mode
  updateNavigation() {
    const isPhysical = this.isPhysicalMode();
    
    // Update cart link
    const cartLink = document.querySelector('a[href*="cart"]');
    if (cartLink) {
      cartLink.href = isPhysical ? '/buyer/cart.html' : '/buyer/local-market.html#cart';
    }

    // Update orders link
    const ordersLink = document.querySelector('a[href*="orders"]');
    if (ordersLink) {
      ordersLink.href = isPhysical ? '/buyer/orders.html' : '/buyer/orders.html?mode=local';
    }
  }

  // Add event listener for mode changes
  addListener(callback) {
    this.listeners.push(callback);
  }

  // Remove event listener
  removeListener(callback) {
    const index = this.listeners.indexOf(callback);
    if (index > -1) {
      this.listeners.splice(index, 1);
    }
  }

  // Notify all listeners of mode change
  notifyListeners(previousMode, newMode) {
    this.listeners.forEach(callback => {
      try {
        callback(previousMode, newMode);
      } catch (e) {
        console.error('Error in mode change listener:', e);
      }
    });
  }

  // Initialize mode manager on page load
  initialize() {
    // Set up mode switch event listeners
    document.addEventListener('click', (e) => {
      const switchButton = e.target.closest('[data-mode-switch] [data-mode-button]');
      if (switchButton) {
        e.preventDefault();
        this.toggleMode();
      }
    });

    // Listen for storage changes (other tabs)
    window.addEventListener('storage', (e) => {
      if (e.key === this.STORAGE_KEY && e.newValue !== e.oldValue) {
        this.setMode(e.newValue || this.DEFAULT_MODE, false);
      }
    });

    // Initial UI update
    this.updateUI();
  }

  // Get mode-specific configuration
  getModeConfig() {
    const configs = {
      [this.MODES.PHYSICAL]: {
        name: 'Physical Products Mode',
        description: 'General marketplace for durable goods',
        icon: 'ðŸ“¦',
        color: 'blue',
        features: ['Global shipping', 'Durable products', 'Standard delivery', 'International sellers']
      },
      [this.MODES.LOCAL_MARKET]: {
        name: 'Local Market Mode',
        description: 'Fast delivery for groceries and perishables',
        icon: 'ðŸ›’',
        color: 'green',
        features: ['Local delivery', 'Fresh products', 'Fast delivery', 'Local sellers']
      }
    };
    
    return configs[this.currentMode] || configs[this.DEFAULT_MODE];
  }
}

// Create global instance
window.marketplaceModeManager = new MarketplaceModeManager();

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.marketplaceModeManager.initialize();
  });
} else {
  window.marketplaceModeManager.initialize();
}

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
  module.exports = MarketplaceModeManager;
} 
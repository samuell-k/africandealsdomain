/**
 * Enhanced Navigation Component
 * Provides consistent navigation across both marketplace modes
 */

class NavigationManager {
  constructor() {
    this.currentMode = this.detectMode();
    this.currentUser = this.getCurrentUser();
    this.init();
  }

  init() {
    this.createNavigation();
    this.setupEventListeners();
    this.updateNavigationState();
  }

  detectMode() {
    const path = window.location.pathname;
    return path.includes('/grocery/') || path.includes('local-market') ? 'local-market' : 'marketplace';
  }

  getCurrentUser() {
    try {
      return JSON.parse(localStorage.getItem('user') || '{}');
    } catch {
      return {};
    }
  }

  isAuthenticated() {
    return !!localStorage.getItem('token');
  }

  createNavigation() {
    // Find existing navigation or create one
    let nav = document.querySelector('#main-navigation');
    if (!nav) {
      nav = document.createElement('nav');
      nav.id = 'main-navigation';
      nav.className = 'glass bg-white/90 backdrop-blur-md fixed top-0 left-0 w-full z-50 shadow-lg border-b border-gray-200';
      
      // Insert at the beginning of body or after existing header
      const existingHeader = document.querySelector('header');
      if (existingHeader) {
        existingHeader.parentNode.insertBefore(nav, existingHeader.nextSibling);
      } else {
        document.body.insertBefore(nav, document.body.firstChild);
      }
    }

    nav.innerHTML = this.getNavigationHTML();
  }

  getNavigationHTML() {
    const isAuth = this.isAuthenticated();
    const user = this.currentUser;
    const mode = this.currentMode;

    return `
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          
          <!-- Logo and Brand -->
          <div class="flex items-center space-x-4">
            <a href="${mode === 'local-market' ? '/grocery/local-market-home.html' : '/public/index.html'}" class="flex items-center space-x-3 group">
              <img src="/public/images/logo.png" alt="ADD Logo" class="h-10 w-10 rounded-xl shadow-lg group-hover:scale-110 transition-transform duration-300">
              <div>
                <span class="font-bold text-xl text-gray-900">ADD Physical Products</span>
                <div class="flex items-center space-x-2 text-xs">
                  <span class="w-2 h-2 rounded-full ${mode === 'local-market' ? 'bg-green-500' : 'bg-blue-500'}"></span>
                  <span class="text-gray-600">${mode === 'local-market' ? 'Local Market' : 'Marketplace'}</span>
                </div>
              </div>
            </a>
          </div>

          <!-- Search Bar (for buyers) -->
          ${this.getSearchBarHTML()}

          <!-- Mode Switcher -->
          <div class="hidden md:flex items-center space-x-2">
            <button 
              data-mode-switch="${mode === 'local-market' ? 'marketplace' : 'local-market'}"
              class="flex items-center space-x-2 px-4 py-2 rounded-xl border-2 ${mode === 'local-market' ? 'border-blue-500 text-blue-600 hover:bg-blue-50' : 'border-green-500 text-green-600 hover:bg-green-50'} transition-colors font-medium"
            >
              <span class="text-lg">${mode === 'local-market' ? 'ðŸ“¦' : 'ðŸ›’'}</span>
              <span class="hidden lg:inline">${mode === 'local-market' ? 'Marketplace' : 'Local Market'}</span>
            </button>
          </div>

          <!-- User Actions -->
          <div class="flex items-center space-x-2">
            ${this.getUserActionsHTML()}
          </div>
        </div>

        <!-- Mobile Menu -->
        <div id="mobile-menu" class="hidden md:hidden pb-4">
          ${this.getMobileMenuHTML()}
        </div>
      </div>
    `;
  }

  getSearchBarHTML() {
    if (!this.isAuthenticated() || this.currentUser.role !== 'buyer') {
      return '';
    }

    return `
      <div class="hidden md:flex flex-1 max-w-2xl mx-8">
        <div class="relative w-full">
          <input 
            type="text" 
            id="global-search"
            placeholder="Search for products..."
            class="w-full pl-12 pr-4 py-2 rounded-xl border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white/80"
          >
          <div class="absolute left-4 top-1/2 -translate-y-1/2">
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>
    `;
  }

  getUserActionsHTML() {
    if (!this.isAuthenticated()) {
      return `
        <a href="/auth/auth-buyer.html" class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 transition-colors">
          Sign In
        </a>
        <a href="/auth/auth-buyer.html" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors">
          Sign Up
        </a>
        <a href="/auth/auth-seller.html" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg transition-colors">
          Sell
        </a>
      `;
    }

    const user = this.currentUser;
    const dashboardRoute = this.getDashboardRoute();

    return `
      <!-- Cart (for buyers) -->
      ${user.role === 'buyer' ? this.getCartIconHTML() : ''}
      
      <!-- Notifications -->
      <button class="relative p-2 text-gray-600 hover:text-gray-900 transition-colors" id="notifications-btn">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM10.5 3.5a6 6 0 0 1 6 6v2l1.5 3h-15l1.5-3v-2a6 6 0 0 1 6-6z"></path>
        </svg>
        <span id="notifications-badge" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full px-1.5 py-0.5 hidden">0</span>
      </button>

      <!-- Messages -->
      <button class="relative p-2 text-gray-600 hover:text-gray-900 transition-colors" id="messages-btn">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
        </svg>
        <span id="messages-badge" class="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full px-1.5 py-0.5 hidden">0</span>
      </button>

      <!-- User Menu -->
      <div class="relative">
        <button id="user-menu-btn" class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors">
          <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm">
            ${(user.name || 'U').charAt(0).toUpperCase()}
          </div>
          <span class="hidden lg:inline text-sm font-medium text-gray-700">${user.name || 'User'}</span>
          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        
        <div id="user-menu" class="hidden absolute right-0 mt-2 w-64 bg-white rounded-xl shadow-lg border border-gray-200 py-2 z-50">
          <div class="px-4 py-3 border-b border-gray-100">
            <p class="text-sm font-medium text-gray-900">${user.name || 'User'}</p>
            <p class="text-sm text-gray-600">${user.email || ''}</p>
            <p class="text-xs text-blue-600 font-medium mt-1">${user.role ? user.role.charAt(0).toUpperCase() + user.role.slice(1) : 'User'}</p>
          </div>
          
          <a href="${dashboardRoute}" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
            </svg>
            Dashboard
          </a>
          
          ${this.getUserMenuItemsHTML()}
          
          <div class="border-t border-gray-100 mt-2 pt-2">
            <button onclick="logout()" class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors">
              <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
              </svg>
              Sign Out
            </button>
          </div>
        </div>
      </div>

      <!-- Mobile Menu Toggle -->
      <button id="mobile-menu-btn" class="md:hidden p-2 text-gray-600 hover:text-gray-900">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    `;
  }

  getCartIconHTML() {
    if (this.currentMode === 'local-market') {
      return `
        <a href="/grocery/cart.html" class="relative p-2 text-gray-600 hover:text-gray-900 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m0 0h8m-8 0a2 2 0 100 4 2 2 0 000-4zm8 0a2 2 0 100 4 2 2 0 000-4z"></path>
          </svg>
          <span id="cart-badge" class="absolute -top-1 -right-1 bg-green-500 text-white text-xs rounded-full px-1.5 py-0.5 hidden">0</span>
        </a>
      `;
    } else {
      return `
        <a href="/buyer/cart.html" class="relative p-2 text-gray-600 hover:text-gray-900 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
          </svg>
          <span id="cart-badge" class="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full px-1.5 py-0.5 hidden">0</span>
        </a>
      `;
    }
  }

  getUserMenuItemsHTML() {
    const user = this.currentUser;
    const role = user.role;

    let items = [];

    // Common items for all roles
    items.push(`
      <a href="/${role}/profile.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>
        Profile
      </a>
    `);

    // Role-specific items
    if (role === 'buyer') {
      items.push(`
        <a href="${this.currentMode === 'local-market' ? '/grocery/orders.html' : '/buyer/orders.html'}" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          My Orders
        </a>
        <a href="/buyer/wishlist.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
          Wishlist
        </a>
      `);
    } else if (role === 'seller') {
      items.push(`
        <a href="/seller/orders.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          Orders
        </a>
        <a href="/seller/product-list.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
          </svg>
          Products
        </a>
        <a href="${this.currentMode === 'local-market' ? '/seller/add-grocery-product.html' : '/seller/add-product.html'}" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
          <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Add Product
        </a>
      `);
    }

    // Common items
    items.push(`
      <a href="/${role}/wallet.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path>
        </svg>
        Wallet
      </a>
      <a href="/${role}/settings.html" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors">
        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
        Settings
      </a>
    `);

    return items.join('');
  }

  getMobileMenuHTML() {
    if (!this.isAuthenticated()) {
      return `
        <div class="space-y-2">
          <a href="/auth/auth-buyer.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">Sign In</a>
          <a href="/auth/auth-buyer.html" class="block px-4 py-2 bg-blue-600 text-white rounded-lg text-center">Sign Up</a>
          <a href="/auth/auth-seller.html" class="block px-4 py-2 bg-green-600 text-white rounded-lg text-center">Become a Seller</a>
        </div>
      `;
    }

    return `
      <div class="space-y-2">
        <button 
          data-mode-switch="${this.currentMode === 'local-market' ? 'marketplace' : 'local-market'}"
          class="flex items-center space-x-2 w-full px-4 py-2 text-left text-gray-700 hover:bg-gray-100 rounded-lg"
        >
          <span class="text-lg">${this.currentMode === 'local-market' ? 'ðŸ“¦' : 'ðŸ›’'}</span>
          <span>Switch to ${this.currentMode === 'local-market' ? 'Marketplace' : 'Local Market'}</span>
        </button>
        
        <a href="${this.getDashboardRoute()}" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">Dashboard</a>
        
        ${this.currentUser.role === 'buyer' ? `
          <a href="${this.currentMode === 'local-market' ? '/grocery/orders.html' : '/buyer/orders.html'}" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">My Orders</a>
          <a href="${this.currentMode === 'local-market' ? '/grocery/cart.html' : '/buyer/cart.html'}" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">Cart</a>
        ` : ''}
        
        <a href="/${this.currentUser.role}/profile.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">Profile</a>
        <a href="/${this.currentUser.role}/settings.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">Settings</a>
        
        <button onclick="logout()" class="block w-full text-left px-4 py-2 text-red-600 hover:bg-red-50 rounded-lg">Sign Out</button>
      </div>
    `;
  }

  getDashboardRoute() {
    const role = this.currentUser.role;
    const mode = this.currentMode;
    
    switch (role) {
      case 'buyer':
        return mode === 'local-market' ? '/grocery/local-market-home.html' : '/buyer/buyers-home.html';
      case 'seller':
        return '/seller/dashboard.html';
      case 'agent':
        return mode === 'local-market' ? '/agent/local-market-dashboard.html' : '/agent/dashboard.html';
      case 'admin':
        return mode === 'local-market' ? '/admin/local-market-admin.html' : '/admin/dashboard.html';
      default:
        return mode === 'local-market' ? '/grocery/local-market-home.html' : '/public/index.html';
    }
  }

  setupEventListeners() {
    // User menu toggle
    document.addEventListener('click', (e) => {
      const userMenuBtn = e.target.closest('#user-menu-btn');
      const userMenu = document.getElementById('user-menu');
      
      if (userMenuBtn && userMenu) {
        e.preventDefault();
        userMenu.classList.toggle('hidden');
      } else if (!e.target.closest('#user-menu')) {
        if (userMenu) userMenu.classList.add('hidden');
      }

      // Mobile menu toggle
      const mobileMenuBtn = e.target.closest('#mobile-menu-btn');
      const mobileMenu = document.getElementById('mobile-menu');
      
      if (mobileMenuBtn && mobileMenu) {
        e.preventDefault();
        mobileMenu.classList.toggle('hidden');
      }

      // Mode switching
      const modeSwitcher = e.target.closest('[data-mode-switch]');
      if (modeSwitcher) {
        e.preventDefault();
        const targetMode = modeSwitcher.dataset.modeSwitch;
        if (window.appRouter) {
          window.appRouter.switchMode(targetMode);
        }
      }
    });

    // Global search
    const searchInput = document.getElementById('global-search');
    if (searchInput) {
      searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          const query = e.target.value.trim();
          if (query) {
            const searchUrl = this.currentMode === 'local-market' 
              ? `/grocery/products.html?search=${encodeURIComponent(query)}`
              : `/public/search-results.html?q=${encodeURIComponent(query)}`;
            window.location.href = searchUrl;
          }
        }
      });
    }

    // Update badges periodically
    this.updateBadges();
    setInterval(() => this.updateBadges(), 30000); // Update every 30 seconds
  }

  updateNavigationState() {
    // Update mode indicator
    const modeIndicators = document.querySelectorAll('[data-mode-indicator]');
    modeIndicators.forEach(indicator => {
      indicator.textContent = this.currentMode === 'local-market' ? 'Local Market' : 'Marketplace';
    });

    // Update cart badge
    this.updateCartBadge();
  }

  updateBadges() {
    this.updateCartBadge();
    this.updateNotificationsBadge();
    this.updateMessagesBadge();
  }

  async updateCartBadge() {
    if (!this.isAuthenticated() || this.currentUser.role !== 'buyer') return;

    try {
      const endpoint = this.currentMode === 'local-market' ? '/api/local-market/cart' : '/api/cart';
      const response = await fetch(endpoint, {
        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        const badge = document.getElementById('cart-badge');
        const count = data.items?.length || 0;
        
        if (badge) {
          if (count > 0) {
            badge.textContent = count;
            badge.classList.remove('hidden');
          } else {
            badge.classList.add('hidden');
          }
        }
      }
    } catch (error) {
      console.error('Error updating cart badge:', error);
    }
  }

  async updateNotificationsBadge() {
    if (!this.isAuthenticated()) return;

    try {
      const response = await fetch('/api/notifications/unread-count', {
        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        const badge = document.getElementById('notifications-badge');
        const count = data.count || 0;
        
        if (badge) {
          if (count > 0) {
            badge.textContent = count;
            badge.classList.remove('hidden');
          } else {
            badge.classList.add('hidden');
          }
        }
      }
    } catch (error) {
      console.error('Error updating notifications badge:', error);
    }
  }

  async updateMessagesBadge() {
    if (!this.isAuthenticated()) return;

    try {
      const response = await fetch('/api/messages/unread-count', {
        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        const badge = document.getElementById('messages-badge');
        const count = data.count || 0;
        
        if (badge) {
          if (count > 0) {
            badge.textContent = count;
            badge.classList.remove('hidden');
          } else {
            badge.classList.add('hidden');
          }
        }
      }
    } catch (error) {
      console.error('Error updating messages badge:', error);
    }
  }
}

// Global logout function
function logout() {
  localStorage.removeItem('token');
  localStorage.removeItem('user');
  window.location.href = '/public/index.html';
}

// Initialize navigation when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.navigationManager = new NavigationManager();
  });
} else {
  window.navigationManager = new NavigationManager();
}

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
  module.exports = NavigationManager;
}
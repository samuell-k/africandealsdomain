/**
 * Reusable Buyer Navigation Component
 * This component can be injected into any buyer page to provide consistent navigation
 */

class BuyerNavigation {
  constructor(options = {}) {
    this.currentPage = options.currentPage || '';
    this.userName = options.userName || 'Account';
    this.cartCount = options.cartCount || 0;
  }

  /**
   * Generate the navigation HTML
   */
  generateHTML() {
    return `
      <!-- Navigation Header -->
      <nav class="bg-white shadow-lg border-b border-gray-200 sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex justify-between items-center h-16">
            <!-- Logo and Brand -->
            <div class="flex items-center space-x-4">
              <a href="/public/index.html" class="flex items-center space-x-2 group">
                <img src="/public/images/logo.png" alt="ADD" class="h-10 w-10 rounded-xl shadow-lg group-hover:scale-110 transition-transform duration-300">
                <div>
                  <h1 class="text-xl font-bold text-gray-900">ADD Physical Products</h1>
                  <p class="text-xs text-blue-600">Buyer Portal</p>
                </div>
              </a>
            </div>
            
            <!-- Navigation Links -->
            <div class="hidden md:flex items-center space-x-6">
              <a href="/buyer/dashboard.html" class="nav-link ${this.currentPage === 'dashboard' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'} transition-colors">Dashboard</a>
              <a href="/public/products.html" class="nav-link ${this.currentPage === 'products' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'} transition-colors">Browse Products</a>
              <a href="/buyer/orders.html" class="nav-link ${this.currentPage === 'orders' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'} transition-colors">My Orders</a>
              <a href="/buyer/cart.html" class="nav-link ${this.currentPage === 'cart' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'} transition-colors relative">
                Cart
                ${this.cartCount > 0 ? `<span class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">${this.cartCount}</span>` : ''}
              </a>
              <a href="/buyer/wishlist.html" class="nav-link ${this.currentPage === 'wishlist' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'} transition-colors">Wishlist</a>
            </div>
            
            <!-- Mode Switcher -->
            <div class="mode-switcher-container" data-mode-switch="">
              <!-- Mode switcher will be inserted here by JavaScript -->
            </div>
            
            <!-- User Menu -->
            <div class="flex items-center space-x-4">
              <div class="relative">
                <button id="userMenuButton" class="flex items-center space-x-2 text-gray-700 hover:text-blue-600 transition-colors">
                  <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                  </div>
                  <span class="hidden md:block font-medium" id="userName">${this.userName}</span>
                </button>
                
                <!-- Dropdown Menu -->
                <div id="userDropdown" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
                  <div class="py-2">
                    <a href="/buyer/profile.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 ${this.currentPage === 'profile' ? 'text-blue-600 font-semibold bg-blue-50' : ''}">Profile</a>
                    <a href="/buyer/messages.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 ${this.currentPage === 'messages' ? 'text-blue-600 font-semibold bg-blue-50' : ''}">Messages</a>
                    <a href="/buyer/support.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Support</a>
                    <hr class="my-2">
                    <button onclick="BuyerNavigation.logout()" class="block w-full text-left px-4 py-2 text-red-600 hover:bg-red-50">Logout</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Mobile Menu -->
        <div id="mobileMenu" class="hidden md:hidden bg-white border-t border-gray-200">
          <div class="px-4 py-2 space-y-2">
            <a href="/buyer/dashboard.html" class="block py-2 ${this.currentPage === 'dashboard' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'}">Dashboard</a>
            <a href="/public/products.html" class="block py-2 ${this.currentPage === 'products' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'}">Browse Products</a>
            <a href="/buyer/orders.html" class="block py-2 ${this.currentPage === 'orders' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'}">My Orders</a>
            <a href="/buyer/cart.html" class="block py-2 ${this.currentPage === 'cart' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'}">Cart</a>
            <a href="/buyer/wishlist.html" class="block py-2 ${this.currentPage === 'wishlist' ? 'text-blue-600 font-semibold' : 'text-gray-600 hover:text-blue-600'}">Wishlist</a>
          </div>
        </div>
      </nav>
    `;
  }

  /**
   * Initialize the navigation functionality
   */
  initialize() {
    // User menu toggle
    const userMenuButton = document.getElementById('userMenuButton');
    const userDropdown = document.getElementById('userDropdown');
    
    if (userMenuButton && userDropdown) {
      userMenuButton.addEventListener('click', function(e) {
        e.stopPropagation();
        userDropdown.classList.toggle('hidden');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function() {
        userDropdown.classList.add('hidden');
      });
    }
    
    // Load user info from localStorage
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    if (user.name) {
      const userNameElement = document.getElementById('userName');
      if (userNameElement) {
        userNameElement.textContent = user.name;
      }
    }

    // Update cart count if available
    this.updateCartCount();
  }

  /**
   * Update cart count badge
   */
  updateCartCount() {
    // This would typically fetch from API or localStorage
    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');
    this.cartCount = cartItems.length;
    
    // Update the cart badge if it exists
    const cartLink = document.querySelector('a[href="/buyer/cart.html"]');
    if (cartLink && this.cartCount > 0) {
      const existingBadge = cartLink.querySelector('.absolute');
      if (existingBadge) {
        existingBadge.textContent = this.cartCount;
      }
    }
  }

  /**
   * Static method to inject navigation into a page
   */
  static inject(containerId, options = {}) {
    const container = document.getElementById(containerId);
    if (!container) {
      console.error(`Container with ID '${containerId}' not found`);
      return null;
    }

    const navigation = new BuyerNavigation(options);
    container.innerHTML = navigation.generateHTML();
    
    // Initialize after DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => navigation.initialize());
    } else {
      navigation.initialize();
    }

    return navigation;
  }

  /**
   * Static logout method
   */
  static logout() {
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    localStorage.removeItem('cartItems');
    window.location.href = '/auth/auth-buyer.html';
  }
}

// Make it globally available
window.BuyerNavigation = BuyerNavigation;
/**
 * Authentication Utilities
 * Handles user authentication state across all pages
 */

class AuthUtils {
  constructor() {
    this.token = localStorage.getItem('token');
    this.user = this.getUser();
    this.init();
  }

  init() {
    // Check authentication on page load
    this.checkAuthState();
    
    // Set up periodic token validation
    this.setupTokenValidation();
  }

  getUser() {
    try {
      const userData = localStorage.getItem('user');
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Error parsing user data:', error);
      return null;
    }
  }

  isAuthenticated() {
    return !!(this.token && this.user);
  }

  getUserRole() {
    if (!this.user || typeof this.user !== 'object') {
      return null;
    }
    return this.user.role || null;
  }

  getUserName() {
    if (!this.user || typeof this.user !== 'object') {
      return 'User';
    }
    return this.user.name || 'User';
  }

  getUserEmail() {
    if (!this.user || typeof this.user !== 'object') {
      return '';
    }
    return this.user.email || '';
  }

  async validateToken() {
    if (!this.token) {
      console.log('[AUTH] No token to validate');
      return false;
    }

    try {
      console.log('[AUTH] Validating token...');
      const response = await fetch('/api/auth/validate', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          console.error('[AUTH] Expected JSON response but got:', contentType);
          throw new Error('Invalid response format - expected JSON');
        }

        const data = await response.json();
        console.log('[AUTH] Token validation response:', data);
        
        if (data.success && data.user) {
          // Update user data if it has changed
          this.user = data.user;
          localStorage.setItem('user', JSON.stringify(data.user));
          console.log('[AUTH] Token validation successful, user data updated');
          return true;
        } else {
          console.log('[AUTH] Token validation failed - invalid response format');
        }
      } else {
        console.log('[AUTH] Token validation failed - HTTP', response.status);
        
        // Try to get error details
        try {
          const errorData = await response.json();
          console.log('[AUTH] Error details:', errorData);
        } catch (e) {
          console.log('[AUTH] Could not parse error response');
        }
      }
      
      // Token is invalid - but don't logout immediately during page load
      if (document.readyState === 'complete') {
        console.log('[AUTH] Logging out due to invalid token');
        this.logout();
      }
      return false;
    } catch (error) {
      console.error('[AUTH] Token validation error:', error);
      // Don't logout on network errors during page load
      if (document.readyState === 'complete' && !error.message.includes('fetch') && !error.message.includes('NetworkError')) {
        this.logout();
      }
      return false;
    }
  }

  setupTokenValidation() {
    // Validate token every 5 minutes
    setInterval(() => {
      if (this.isAuthenticated()) {
        this.validateToken();
      }
    }, 5 * 60 * 1000);
  }

  checkAuthState() {
    const currentPath = window.location.pathname;
    
    // Pages that require authentication
    const protectedPages = [
      '/buyer/',
      '/seller/',
      '/agent/',
      '/admin/',
      '/grocery/checkout.html',
      '/grocery/cart.html',
      '/grocery/grocery-orders.html'
    ];

    const isProtectedPage = protectedPages.some(path => currentPath.includes(path));

    if (isProtectedPage && !this.isAuthenticated()) {
      // Add a small delay to prevent immediate redirect during page load
      setTimeout(() => {
        if (!this.isAuthenticated()) {
          console.log('[AUTH] Redirecting to login - protected page accessed without authentication');
          this.redirectToLogin();
        }
      }, 1000);
      return;
    }

    // Update UI based on auth state
    this.updateAuthUI();
  }

  updateAuthUI() {
    // Update user menu
    this.updateUserMenu();
    
    // Update navigation based on auth state
    this.updateNavigation();
    
    // Show/hide auth-dependent elements
    this.toggleAuthElements();
  }

  updateUserMenu() {
    const userMenuButton = document.getElementById('user-menu-button');
    const userMenuDropdown = document.getElementById('user-menu-dropdown');
    
    if (!userMenuButton) return;

    if (this.isAuthenticated()) {
      // Update user menu for authenticated users
      const userName = this.getUserName();
      const userRole = this.getUserRole();
      
      // Update button content
      userMenuButton.innerHTML = `
        <div class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
          <span class="hidden lg:inline text-sm font-medium text-gray-700">${userName}</span>
        </div>
      `;

      // Create authenticated user dropdown
      if (userMenuDropdown) {
        userMenuDropdown.innerHTML = this.createAuthenticatedDropdown();
      } else {
        // Create dropdown if it doesn't exist
        this.createUserDropdown();
      }
    } else {
      // Update for non-authenticated users
      userMenuButton.innerHTML = `
        <div class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
            <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
          <span class="hidden lg:inline text-sm font-medium text-gray-700">Sign In</span>
        </div>
      `;

      // Create sign-in dropdown
      if (userMenuDropdown) {
        userMenuDropdown.innerHTML = this.createSignInDropdown();
      } else {
        this.createUserDropdown();
      }
    }

    // Set up dropdown toggle
    this.setupUserMenuToggle();
  }

  createAuthenticatedDropdown() {
    const userRole = this.getUserRole();
    const userName = this.getUserName();
    const userEmail = this.getUserEmail();

    let roleSpecificLinks = '';
    
    switch (userRole) {
      case 'buyer':
        roleSpecificLinks = `
          <a href="/buyer/buyers-home.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Dashboard</a>
          <a href="/buyer/orders.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">My Orders</a>
          <a href="/buyer/wishlist.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Wishlist</a>
          <a href="/buyer/messages.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Messages</a>
        `;
        break;
      case 'seller':
        roleSpecificLinks = `
          <a href="/seller/dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Dashboard</a>
          <a href="/seller/product-list.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">My Products</a>
          <a href="/seller/orders.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Orders</a>
          <a href="/seller/add-product.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Add Product</a>
        `;
        break;
      case 'agent':
        roleSpecificLinks = `
          <a href="/agent/dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Dashboard</a>
          <a href="/agent/orders.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Deliveries</a>
          <a href="/agent/earnings.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Earnings</a>
        `;
        break;
      case 'admin':
        roleSpecificLinks = `
          <a href="/admin/dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Panel</a>
          <a href="/admin/users.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Users</a>
          <a href="/admin/products.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Products</a>
          <a href="/admin/orders.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Orders</a>
        `;
        break;
    }

    return `
      <div class="py-2">
        <div class="px-4 py-2 border-b border-gray-200">
          <p class="text-sm font-medium text-gray-900">${userName}</p>
          <p class="text-xs text-gray-500">${userEmail}</p>
          <span class="inline-block mt-1 px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full capitalize">${userRole}</span>
        </div>
        ${roleSpecificLinks}
        <div class="border-t border-gray-200 mt-2">
          <a href="/buyer/profile.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Profile Settings</a>
          <button onclick="authUtils.logout()" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50">Sign Out</button>
        </div>
      </div>
    `;
  }

  createSignInDropdown() {
    return `
      <div class="py-2">
        <div class="px-4 py-2 border-b border-gray-200">
          <p class="text-sm font-medium text-gray-900">Welcome!</p>
          <p class="text-xs text-gray-500">Sign in to access your account</p>
        </div>
        <a href="/auth/auth-buyer.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
          <div class="flex items-center">
            <span class="mr-2">👤</span>
            Sign In as Buyer
          </div>
        </a>
        <a href="/auth/auth-seller.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
          <div class="flex items-center">
            <span class="mr-2">🏪</span>
            Sign In as Seller
          </div>
        </a>
        <a href="/auth/auth-agent.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
          <div class="flex items-center">
            <span class="mr-2">🚚</span>
            Sign In as Agent
          </div>
        </a>
        <div class="border-t border-gray-200 mt-2">
          <a href="/auth/auth-buyer.html?mode=register" class="block px-4 py-2 text-sm text-green-600 hover:bg-green-50">Create Account</a>
        </div>
      </div>
    `;
  }

  createUserDropdown() {
    const userMenuButton = document.getElementById('user-menu-button');
    if (!userMenuButton) return;

    const dropdown = document.createElement('div');
    dropdown.id = 'user-menu-dropdown';
    dropdown.className = 'absolute right-0 mt-2 w-64 bg-white rounded-xl shadow-lg border border-gray-200 z-50 hidden';
    
    dropdown.innerHTML = this.isAuthenticated() ? 
      this.createAuthenticatedDropdown() : 
      this.createSignInDropdown();

    userMenuButton.parentNode.appendChild(dropdown);
  }

  setupUserMenuToggle() {
    const userMenuButton = document.getElementById('user-menu-button');
    const userMenuDropdown = document.getElementById('user-menu-dropdown');

    if (!userMenuButton || !userMenuDropdown) return;

    userMenuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      userMenuDropdown.classList.toggle('hidden');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!userMenuButton.contains(e.target) && !userMenuDropdown.contains(e.target)) {
        userMenuDropdown.classList.add('hidden');
      }
    });
  }

  updateNavigation() {
    // Update navigation links based on user role
    const currentPath = window.location.pathname;
    
    // Add role-specific navigation enhancements
    if (this.isAuthenticated()) {
      this.addRoleSpecificNavigation();
    }
  }

  addRoleSpecificNavigation() {
    // Add quick access buttons or modify existing navigation
    // This can be customized based on specific needs
  }

  toggleAuthElements() {
    // Show/hide elements based on authentication state
    const authRequiredElements = document.querySelectorAll('[data-auth-required]');
    const guestOnlyElements = document.querySelectorAll('[data-guest-only]');

    authRequiredElements.forEach(element => {
      if (this.isAuthenticated()) {
        element.style.display = '';
      } else {
        element.style.display = 'none';
      }
    });

    guestOnlyElements.forEach(element => {
      if (this.isAuthenticated()) {
        element.style.display = 'none';
      } else {
        element.style.display = '';
      }
    });
  }

  redirectToLogin() {
    const currentPath = window.location.pathname;
    const returnUrl = encodeURIComponent(window.location.href);
    
    // Determine which login page to use based on current page
    let loginPage = '/auth/auth-buyer.html';
    
    if (currentPath.includes('/seller/')) {
      loginPage = '/auth/auth-seller.html';
    } else if (currentPath.includes('/agent/')) {
      loginPage = '/auth/auth-agent.html';
    } else if (currentPath.includes('/admin/')) {
      loginPage = '/auth/auth-admin.html';
    }
    
    console.log('[AUTH] Redirecting to login:', loginPage);
    window.location.href = `${loginPage}?returnUrl=${returnUrl}`;
  }

  // Enhanced API call method with proper error handling
  async makeAuthenticatedRequest(url, options = {}) {
    if (!this.isAuthenticated()) {
      console.log('[AUTH] Not authenticated for API call');
      this.redirectToLogin();
      return null;
    }

    const defaultOptions = {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Bearer ${this.token}`
      }
    };

    const mergedOptions = {
      ...defaultOptions,
      ...options,
      headers: {
        ...defaultOptions.headers,
        ...options.headers
      }
    };

    try {
      const response = await fetch(url, mergedOptions);
      
      if (response.status === 401) {
        console.log('[AUTH] Unauthorized - token expired');
        this.logout();
        return null;
      }

      if (!response.ok) {
        console.error('[AUTH] Request failed:', response.status, response.statusText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        return await response.json();
      } else if (contentType && contentType.includes('text/html')) {
        console.error('[AUTH] Received HTML response instead of JSON from:', url);
        throw new Error('Unexpected HTML response from API');
      } else {
        return await response.text();
      }
    } catch (error) {
      console.error('[AUTH] Request error:', error);
      throw error;
    }
  }

  logout() {
    // Clear authentication data
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('localMarketCart');
    localStorage.removeItem('checkoutData');
    
    // Reset instance variables
    this.token = null;
    this.user = null;
    
    // Redirect to home page
    window.location.href = '/public/index.html';
  }

  // API request helper with authentication
  async apiRequest(url, options = {}) {
    const defaultOptions = {
      headers: {
        'Content-Type': 'application/json',
        ...(this.token && { 'Authorization': `Bearer ${this.token}` })
      }
    };

    const mergedOptions = {
      ...defaultOptions,
      ...options,
      headers: {
        ...defaultOptions.headers,
        ...options.headers
      }
    };

    try {
      const response = await fetch(url, mergedOptions);
      
      if (response.status === 401) {
        // Token expired or invalid
        this.logout();
        return null;
      }
      
      return response;
    } catch (error) {
      console.error('API request error:', error);
      throw error;
    }
  }
}

// Create global instance
window.authUtils = new AuthUtils();

// Export for module use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = AuthUtils;
}
/**
 * Reusable Agent Navigation Component
 * This component can be injected into any agent page to provide consistent navigation
 */

class AgentNavigation {
  constructor(options = {}) {
    this.currentPage = options.currentPage || '';
    this.userName = options.userName || 'Agent';
    this.agentCode = options.agentCode || 'AGT-001';
    this.isAvailable = options.isAvailable !== false; // Default to available
  }

  /**
   * Generate the navigation HTML
   */
  generateHTML() {
    return `
      <!-- Agent Navigation Header -->
      <header class="glass-morphism border-b border-white/20">
        <div class="flex items-center justify-between px-6 py-4">
          <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
              <i class="fas fa-shipping-fast text-white text-xl"></i>
            </div>
            <div>
              <h1 class="text-2xl font-bold text-white">Agent Portal</h1>
              <p class="text-white/70 text-sm">Welcome back, <span id="agent-name">${this.userName}</span>!</p>
            </div>
          </div>
          
          <!-- Navigation Links -->
          <div class="hidden md:flex items-center space-x-6">
            <a href="/agent/dashboard.html" class="nav-link ${this.currentPage === 'dashboard' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'} transition-colors">Dashboard</a>
            <a href="/agent/orders.html" class="nav-link ${this.currentPage === 'orders' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'} transition-colors">Orders</a>
            <a href="/agent/deliveries.html" class="nav-link ${this.currentPage === 'deliveries' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'} transition-colors">Deliveries</a>
            <a href="/agent/earnings.html" class="nav-link ${this.currentPage === 'earnings' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'} transition-colors">Earnings</a>
            <a href="/agent/messages.html" class="nav-link ${this.currentPage === 'messages' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'} transition-colors">Messages</a>
          </div>
          
          <div class="flex items-center space-x-4">
            <!-- Availability Toggle -->
            <div class="flex items-center space-x-2">
              <span class="text-white text-sm">Status:</span>
              <button id="availability-toggle" class="relative inline-flex items-center h-6 rounded-full w-11 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white ${this.isAvailable ? 'bg-green-600' : 'bg-gray-600'}">
                <span id="toggle-slider" class="inline-block w-4 h-4 transform transition-transform duration-200 ease-in-out bg-white rounded-full ${this.isAvailable ? 'translate-x-6' : 'translate-x-1'}"></span>
              </button>
              <span id="status-text" class="text-white text-sm font-medium">${this.isAvailable ? 'Available' : 'Offline'}</span>
            </div>
            
            <!-- Notifications -->
            <div class="relative">
              <button class="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-all">
                <i class="fas fa-bell text-white"></i>
                <span class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></span>
              </button>
            </div>
            
            <!-- Profile Dropdown -->
            <div class="relative">
              <button id="profile-dropdown-btn" class="flex items-center space-x-2">
                <img id="agent-avatar" src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face" 
                     alt="Agent" class="w-8 h-8 rounded-full">
                <span id="agent-code" class="text-white font-medium">${this.agentCode}</span>
                <svg class="w-4 h-4 text-white/70" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
              
              <!-- Dropdown Menu -->
              <div id="profile-dropdown-menu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
                <div class="py-2">
                  <div class="px-4 py-2 border-b border-gray-100">
                    <div class="font-semibold text-sm text-gray-800" id="profile-greeting">Hello, ${this.userName}</div>
                    <div class="text-xs text-gray-500">Agent Portal</div>
                  </div>
                  <a href="/agent/profile.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 ${this.currentPage === 'profile' ? 'text-blue-600 font-semibold bg-blue-50' : ''}">Profile</a>
                  <a href="/agent/settings.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Settings</a>
                  <a href="/agent/support.html" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Support</a>
                  <hr class="my-2">
                  <button onclick="AgentNavigation.logout()" class="block w-full text-left px-4 py-2 text-red-600 hover:bg-red-50">Logout</button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Mobile Menu -->
        <div id="mobile-menu" class="hidden md:hidden bg-white/10 border-t border-white/20">
          <div class="px-4 py-2 space-y-2">
            <a href="/agent/dashboard.html" class="block py-2 ${this.currentPage === 'dashboard' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'}">Dashboard</a>
            <a href="/agent/orders.html" class="block py-2 ${this.currentPage === 'orders' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'}">Orders</a>
            <a href="/agent/deliveries.html" class="block py-2 ${this.currentPage === 'deliveries' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'}">Deliveries</a>
            <a href="/agent/earnings.html" class="block py-2 ${this.currentPage === 'earnings' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'}">Earnings</a>
            <a href="/agent/messages.html" class="block py-2 ${this.currentPage === 'messages' ? 'text-blue-300 font-semibold' : 'text-white/80 hover:text-white'}">Messages</a>
          </div>
        </div>
      </header>
    `;
  }

  /**
   * Initialize the navigation functionality
   */
  initialize() {
    // Profile dropdown toggle
    const profileButton = document.getElementById('profile-dropdown-btn');
    const profileDropdown = document.getElementById('profile-dropdown-menu');
    
    if (profileButton && profileDropdown) {
      profileButton.addEventListener('click', function(e) {
        e.stopPropagation();
        profileDropdown.classList.toggle('hidden');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function() {
        profileDropdown.classList.add('hidden');
      });
    }
    
    // Availability toggle
    const availabilityToggle = document.getElementById('availability-toggle');
    const toggleSlider = document.getElementById('toggle-slider');
    const statusText = document.getElementById('status-text');
    
    if (availabilityToggle) {
      availabilityToggle.addEventListener('click', () => {
        this.isAvailable = !this.isAvailable;
        
        if (this.isAvailable) {
          availabilityToggle.classList.remove('bg-gray-600');
          availabilityToggle.classList.add('bg-green-600');
          toggleSlider.classList.remove('translate-x-1');
          toggleSlider.classList.add('translate-x-6');
          statusText.textContent = 'Available';
        } else {
          availabilityToggle.classList.remove('bg-green-600');
          availabilityToggle.classList.add('bg-gray-600');
          toggleSlider.classList.remove('translate-x-6');
          toggleSlider.classList.add('translate-x-1');
          statusText.textContent = 'Offline';
        }
        
        // Here you would typically send the status to the server
        console.log('Agent availability changed to:', this.isAvailable ? 'Available' : 'Offline');
      });
    }
    
    // Load user info from localStorage
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    if (user.name) {
      const agentNameElement = document.getElementById('agent-name');
      const profileGreetingElement = document.getElementById('profile-greeting');
      const agentCodeElement = document.getElementById('agent-code');
      
      if (agentNameElement) {
        agentNameElement.textContent = user.name;
      }
      if (profileGreetingElement) {
        profileGreetingElement.textContent = `Hello, ${user.name}`;
      }
      if (agentCodeElement && user.agent_code) {
        agentCodeElement.textContent = user.agent_code;
      }
    }
  }

  /**
   * Static method to inject navigation into a page
   */
  static inject(containerId, options = {}) {
    const container = document.getElementById(containerId);
    if (!container) {
      console.error(`Container with ID '${containerId}' not found`);
      return null;
    }

    const navigation = new AgentNavigation(options);
    container.innerHTML = navigation.generateHTML();
    
    // Initialize after DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => navigation.initialize());
    } else {
      navigation.initialize();
    }

    return navigation;
  }

  /**
   * Static logout method
   */
  static logout() {
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    window.location.href = '/auth/auth-agent.html';
  }
}

// Make it globally available
window.AgentNavigation = AgentNavigation;